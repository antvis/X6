// DO NOT EDIT THIS FILE. This is generated code. Please see: https://github.com/microsoft/package-inherit
'use strict'

var util$2 = require('util')
var fs$3 = require('fs')
var path = require('path')
var os = require('os')
var constants$3 = require('constants')
var stream_1 = require('stream')
var assert = require('assert')
var events_1 = require('events')
var tty = require('tty')
var require$$2 = require('net')
var url = require('url')

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : { default: e }
}

var util__default = /*#__PURE__*/ _interopDefaultLegacy(util$2)
var fs__default = /*#__PURE__*/ _interopDefaultLegacy(fs$3)
var path__default = /*#__PURE__*/ _interopDefaultLegacy(path)
var os__default = /*#__PURE__*/ _interopDefaultLegacy(os)
var constants__default = /*#__PURE__*/ _interopDefaultLegacy(constants$3)
var stream_1__default = /*#__PURE__*/ _interopDefaultLegacy(stream_1)
var assert__default = /*#__PURE__*/ _interopDefaultLegacy(assert)
var events_1__default = /*#__PURE__*/ _interopDefaultLegacy(events_1)
var tty__default = /*#__PURE__*/ _interopDefaultLegacy(tty)
var require$$2__default = /*#__PURE__*/ _interopDefaultLegacy(require$$2)
var url__default = /*#__PURE__*/ _interopDefaultLegacy(url)

function camelCase(str) {
  str = str.toLocaleLowerCase()
  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {
    return str
  } else {
    let camelcase = ''
    let nextChrUpper = false
    const leadingHyphens = str.match(/^-+/)
    for (
      let i = leadingHyphens ? leadingHyphens[0].length : 0;
      i < str.length;
      i++
    ) {
      let chr = str.charAt(i)
      if (nextChrUpper) {
        nextChrUpper = false
        chr = chr.toLocaleUpperCase()
      }
      if (i !== 0 && (chr === '-' || chr === '_')) {
        nextChrUpper = true
        continue
      } else if (chr !== '-' && chr !== '_') {
        camelcase += chr
      }
    }
    return camelcase
  }
}
function decamelize(str, joinString) {
  const lowercase = str.toLocaleLowerCase()
  joinString = joinString || '-'
  let notCamelcase = ''
  for (let i = 0; i < str.length; i++) {
    const chrLower = lowercase.charAt(i)
    const chrString = str.charAt(i)
    if (chrLower !== chrString) {
      notCamelcase += `${joinString}${lowercase.charAt(i)}`
    } else {
      notCamelcase += chrString
    }
  }
  return notCamelcase
}

// take an un-split argv string and tokenize it.
function tokenizeArgString(argString) {
  if (Array.isArray(argString)) {
    return argString.map((e) => (typeof e !== 'string' ? e + '' : e))
  }
  argString = argString.trim()
  let i = 0
  let prevC = null
  let c = null
  let opening = null
  const args = []
  for (let ii = 0; ii < argString.length; ii++) {
    prevC = c
    c = argString.charAt(ii)
    // split on spaces unless we're in quotes.
    if (c === ' ' && !opening) {
      if (!(prevC === ' ')) {
        i++
      }
      continue
    }
    // don't split the string if we're in matching
    // opening or closing single and double quotes.
    if (c === opening) {
      opening = null
    } else if ((c === "'" || c === '"') && !opening) {
      opening = c
    }
    if (!args[i]) args[i] = ''
    args[i] += c
  }
  return args
}

let mixin
class YargsParser {
  constructor(_mixin) {
    mixin = _mixin
  }
  parse(argsInput, options) {
    const opts = Object.assign(
      {
        alias: undefined,
        array: undefined,
        boolean: undefined,
        config: undefined,
        configObjects: undefined,
        configuration: undefined,
        coerce: undefined,
        count: undefined,
        default: undefined,
        envPrefix: undefined,
        narg: undefined,
        normalize: undefined,
        string: undefined,
        number: undefined,
        __: undefined,
        key: undefined,
      },
      options,
    )
    // allow a string argument to be passed in rather
    // than an argv array.
    const args = tokenizeArgString(argsInput)
    // aliases might have transitive relationships, normalize this.
    const aliases = combineAliases(
      Object.assign(Object.create(null), opts.alias),
    )
    const configuration = Object.assign(
      {
        'boolean-negation': true,
        'camel-case-expansion': true,
        'combine-arrays': false,
        'dot-notation': true,
        'duplicate-arguments-array': true,
        'flatten-duplicate-arrays': true,
        'greedy-arrays': true,
        'halt-at-non-option': false,
        'nargs-eats-options': false,
        'negation-prefix': 'no-',
        'parse-numbers': true,
        'populate--': false,
        'set-placeholder-key': false,
        'short-option-groups': true,
        'strip-aliased': false,
        'strip-dashed': false,
        'unknown-options-as-args': false,
      },
      opts.configuration,
    )
    const defaults = Object.assign(Object.create(null), opts.default)
    const configObjects = opts.configObjects || []
    const envPrefix = opts.envPrefix
    const notFlagsOption = configuration['populate--']
    const notFlagsArgv = notFlagsOption ? '--' : '_'
    const newAliases = Object.create(null)
    const defaulted = Object.create(null)
    // allow a i18n handler to be passed in, default to a fake one (util.format).
    const __ = opts.__ || mixin.format
    const flags = {
      aliases: Object.create(null),
      arrays: Object.create(null),
      bools: Object.create(null),
      strings: Object.create(null),
      numbers: Object.create(null),
      counts: Object.create(null),
      normalize: Object.create(null),
      configs: Object.create(null),
      nargs: Object.create(null),
      coercions: Object.create(null),
      keys: [],
    }
    const negative = /^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/
    const negatedBoolean = new RegExp(
      '^--' + configuration['negation-prefix'] + '(.+)',
    )
    ;[]
      .concat(opts.array || [])
      .filter(Boolean)
      .forEach(function (opt) {
        const key = typeof opt === 'object' ? opt.key : opt
        // assign to flags[bools|strings|numbers]
        const assignment = Object.keys(opt)
          .map(function (key) {
            const arrayFlagKeys = {
              boolean: 'bools',
              string: 'strings',
              number: 'numbers',
            }
            return arrayFlagKeys[key]
          })
          .filter(Boolean)
          .pop()
        // assign key to be coerced
        if (assignment) {
          flags[assignment][key] = true
        }
        flags.arrays[key] = true
        flags.keys.push(key)
      })
    ;[]
      .concat(opts.boolean || [])
      .filter(Boolean)
      .forEach(function (key) {
        flags.bools[key] = true
        flags.keys.push(key)
      })
    ;[]
      .concat(opts.string || [])
      .filter(Boolean)
      .forEach(function (key) {
        flags.strings[key] = true
        flags.keys.push(key)
      })
    ;[]
      .concat(opts.number || [])
      .filter(Boolean)
      .forEach(function (key) {
        flags.numbers[key] = true
        flags.keys.push(key)
      })
    ;[]
      .concat(opts.count || [])
      .filter(Boolean)
      .forEach(function (key) {
        flags.counts[key] = true
        flags.keys.push(key)
      })
    ;[]
      .concat(opts.normalize || [])
      .filter(Boolean)
      .forEach(function (key) {
        flags.normalize[key] = true
        flags.keys.push(key)
      })
    if (typeof opts.narg === 'object') {
      Object.entries(opts.narg).forEach(([key, value]) => {
        if (typeof value === 'number') {
          flags.nargs[key] = value
          flags.keys.push(key)
        }
      })
    }
    if (typeof opts.coerce === 'object') {
      Object.entries(opts.coerce).forEach(([key, value]) => {
        if (typeof value === 'function') {
          flags.coercions[key] = value
          flags.keys.push(key)
        }
      })
    }
    if (typeof opts.config !== 'undefined') {
      if (Array.isArray(opts.config) || typeof opts.config === 'string') {
        ;[]
          .concat(opts.config)
          .filter(Boolean)
          .forEach(function (key) {
            flags.configs[key] = true
          })
      } else if (typeof opts.config === 'object') {
        Object.entries(opts.config).forEach(([key, value]) => {
          if (typeof value === 'boolean' || typeof value === 'function') {
            flags.configs[key] = value
          }
        })
      }
    }
    // create a lookup table that takes into account all
    // combinations of aliases: {f: ['foo'], foo: ['f']}
    extendAliases(opts.key, aliases, opts.default, flags.arrays)
    // apply default values to all aliases.
    Object.keys(defaults).forEach(function (key) {
      ;(flags.aliases[key] || []).forEach(function (alias) {
        defaults[alias] = defaults[key]
      })
    })
    let error = null
    checkConfiguration()
    let notFlags = []
    const argv = Object.assign(Object.create(null), { _: [] })
    // TODO(bcoe): for the first pass at removing object prototype  we didn't
    // remove all prototypes from objects returned by this API, we might want
    // to gradually move towards doing so.
    const argvReturn = {}
    for (let i = 0; i < args.length; i++) {
      const arg = args[i]
      let broken
      let key
      let letters
      let m
      let next
      let value
      // any unknown option (except for end-of-options, "--")
      if (arg !== '--' && isUnknownOptionAsArg(arg)) {
        argv._.push(arg)
        // -- separated by =
      } else if (
        arg.match(/^--.+=/) ||
        (!configuration['short-option-groups'] && arg.match(/^-.+=/))
      ) {
        // Using [\s\S] instead of . because js doesn't support the
        // 'dotall' regex modifier. See:
        // http://stackoverflow.com/a/1068308/13216
        m = arg.match(/^--?([^=]+)=([\s\S]*)$/)
        // arrays format = '--f=a b c'
        if (m !== null && Array.isArray(m) && m.length >= 3) {
          if (checkAllAliases(m[1], flags.arrays)) {
            i = eatArray(i, m[1], args, m[2])
          } else if (checkAllAliases(m[1], flags.nargs) !== false) {
            // nargs format = '--f=monkey washing cat'
            i = eatNargs(i, m[1], args, m[2])
          } else {
            setArg(m[1], m[2])
          }
        }
      } else if (
        arg.match(negatedBoolean) &&
        configuration['boolean-negation']
      ) {
        m = arg.match(negatedBoolean)
        if (m !== null && Array.isArray(m) && m.length >= 2) {
          key = m[1]
          setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false)
        }
        // -- separated by space.
      } else if (
        arg.match(/^--.+/) ||
        (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))
      ) {
        m = arg.match(/^--?(.+)/)
        if (m !== null && Array.isArray(m) && m.length >= 2) {
          key = m[1]
          if (checkAllAliases(key, flags.arrays)) {
            // array format = '--foo a b c'
            i = eatArray(i, key, args)
          } else if (checkAllAliases(key, flags.nargs) !== false) {
            // nargs format = '--foo a b c'
            // should be truthy even if: flags.nargs[key] === 0
            i = eatNargs(i, key, args)
          } else {
            next = args[i + 1]
            if (
              next !== undefined &&
              (!next.match(/^-/) || next.match(negative)) &&
              !checkAllAliases(key, flags.bools) &&
              !checkAllAliases(key, flags.counts)
            ) {
              setArg(key, next)
              i++
            } else if (/^(true|false)$/.test(next)) {
              setArg(key, next)
              i++
            } else {
              setArg(key, defaultValue(key))
            }
          }
        }
        // dot-notation flag separated by '='.
      } else if (arg.match(/^-.\..+=/)) {
        m = arg.match(/^-([^=]+)=([\s\S]*)$/)
        if (m !== null && Array.isArray(m) && m.length >= 3) {
          setArg(m[1], m[2])
        }
        // dot-notation flag separated by space.
      } else if (arg.match(/^-.\..+/) && !arg.match(negative)) {
        next = args[i + 1]
        m = arg.match(/^-(.\..+)/)
        if (m !== null && Array.isArray(m) && m.length >= 2) {
          key = m[1]
          if (
            next !== undefined &&
            !next.match(/^-/) &&
            !checkAllAliases(key, flags.bools) &&
            !checkAllAliases(key, flags.counts)
          ) {
            setArg(key, next)
            i++
          } else {
            setArg(key, defaultValue(key))
          }
        }
      } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
        letters = arg.slice(1, -1).split('')
        broken = false
        for (let j = 0; j < letters.length; j++) {
          next = arg.slice(j + 2)
          if (letters[j + 1] && letters[j + 1] === '=') {
            value = arg.slice(j + 3)
            key = letters[j]
            if (checkAllAliases(key, flags.arrays)) {
              // array format = '-f=a b c'
              i = eatArray(i, key, args, value)
            } else if (checkAllAliases(key, flags.nargs) !== false) {
              // nargs format = '-f=monkey washing cat'
              i = eatNargs(i, key, args, value)
            } else {
              setArg(key, value)
            }
            broken = true
            break
          }
          if (next === '-') {
            setArg(letters[j], next)
            continue
          }
          // current letter is an alphabetic character and next value is a number
          if (
            /[A-Za-z]/.test(letters[j]) &&
            /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) &&
            checkAllAliases(next, flags.bools) === false
          ) {
            setArg(letters[j], next)
            broken = true
            break
          }
          if (letters[j + 1] && letters[j + 1].match(/\W/)) {
            setArg(letters[j], next)
            broken = true
            break
          } else {
            setArg(letters[j], defaultValue(letters[j]))
          }
        }
        key = arg.slice(-1)[0]
        if (!broken && key !== '-') {
          if (checkAllAliases(key, flags.arrays)) {
            // array format = '-f a b c'
            i = eatArray(i, key, args)
          } else if (checkAllAliases(key, flags.nargs) !== false) {
            // nargs format = '-f a b c'
            // should be truthy even if: flags.nargs[key] === 0
            i = eatNargs(i, key, args)
          } else {
            next = args[i + 1]
            if (
              next !== undefined &&
              (!/^(-|--)[^-]/.test(next) || next.match(negative)) &&
              !checkAllAliases(key, flags.bools) &&
              !checkAllAliases(key, flags.counts)
            ) {
              setArg(key, next)
              i++
            } else if (/^(true|false)$/.test(next)) {
              setArg(key, next)
              i++
            } else {
              setArg(key, defaultValue(key))
            }
          }
        }
      } else if (
        arg.match(/^-[0-9]$/) &&
        arg.match(negative) &&
        checkAllAliases(arg.slice(1), flags.bools)
      ) {
        // single-digit boolean alias, e.g: xargs -0
        key = arg.slice(1)
        setArg(key, defaultValue(key))
      } else if (arg === '--') {
        notFlags = args.slice(i + 1)
        break
      } else if (configuration['halt-at-non-option']) {
        notFlags = args.slice(i)
        break
      } else {
        const maybeCoercedNumber = maybeCoerceNumber('_', arg)
        if (
          typeof maybeCoercedNumber === 'string' ||
          typeof maybeCoercedNumber === 'number'
        ) {
          argv._.push(maybeCoercedNumber)
        }
      }
    }
    // order of precedence:
    // 1. command line arg
    // 2. value from env var
    // 3. value from config file
    // 4. value from config objects
    // 5. configured default value
    applyEnvVars(argv, true) // special case: check env vars that point to config file
    applyEnvVars(argv, false)
    setConfig(argv)
    setConfigObjects()
    applyDefaultsAndAliases(argv, flags.aliases, defaults, true)
    applyCoercions(argv)
    if (configuration['set-placeholder-key']) setPlaceholderKeys(argv)
    // for any counts either not in args or without an explicit default, set to 0
    Object.keys(flags.counts).forEach(function (key) {
      if (!hasKey(argv, key.split('.'))) setArg(key, 0)
    })
    // '--' defaults to undefined.
    if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = []
    notFlags.forEach(function (key) {
      argv[notFlagsArgv].push(key)
    })
    if (
      configuration['camel-case-expansion'] &&
      configuration['strip-dashed']
    ) {
      Object.keys(argv)
        .filter((key) => key !== '--' && key.includes('-'))
        .forEach((key) => {
          delete argv[key]
        })
    }
    if (configuration['strip-aliased']) {
      ;[]
        .concat(...Object.keys(aliases).map((k) => aliases[k]))
        .forEach((alias) => {
          if (configuration['camel-case-expansion']) {
            delete argv[
              alias
                .split('.')
                .map((prop) => camelCase(prop))
                .join('.')
            ]
          }
          delete argv[alias]
        })
    }
    // how many arguments should we consume, based
    // on the nargs option?
    function eatNargs(i, key, args, argAfterEqualSign) {
      let ii
      let toEat = checkAllAliases(key, flags.nargs)
      // NaN has a special meaning for the array type, indicating that one or
      // more values are expected.
      toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat
      if (toEat === 0) {
        if (!isUndefined(argAfterEqualSign)) {
          error = Error(__('Argument unexpected for: %s', key))
        }
        setArg(key, defaultValue(key))
        return i
      }
      let available = isUndefined(argAfterEqualSign) ? 0 : 1
      if (configuration['nargs-eats-options']) {
        // classic behavior, yargs eats positional and dash arguments.
        if (args.length - (i + 1) + available < toEat) {
          error = Error(__('Not enough arguments following: %s', key))
        }
        available = toEat
      } else {
        // nargs will not consume flag arguments, e.g., -abc, --foo,
        // and terminates when one is observed.
        for (ii = i + 1; ii < args.length; ii++) {
          if (
            !args[ii].match(/^-[^0-9]/) ||
            args[ii].match(negative) ||
            isUnknownOptionAsArg(args[ii])
          )
            available++
          else break
        }
        if (available < toEat)
          error = Error(__('Not enough arguments following: %s', key))
      }
      let consumed = Math.min(available, toEat)
      if (!isUndefined(argAfterEqualSign) && consumed > 0) {
        setArg(key, argAfterEqualSign)
        consumed--
      }
      for (ii = i + 1; ii < consumed + i + 1; ii++) {
        setArg(key, args[ii])
      }
      return i + consumed
    }
    // if an option is an array, eat all non-hyphenated arguments
    // following it... YUM!
    // e.g., --foo apple banana cat becomes ["apple", "banana", "cat"]
    function eatArray(i, key, args, argAfterEqualSign) {
      let argsToSet = []
      let next = argAfterEqualSign || args[i + 1]
      // If both array and nargs are configured, enforce the nargs count:
      const nargsCount = checkAllAliases(key, flags.nargs)
      if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {
        argsToSet.push(true)
      } else if (
        isUndefined(next) ||
        (isUndefined(argAfterEqualSign) &&
          /^-/.test(next) &&
          !negative.test(next) &&
          !isUnknownOptionAsArg(next))
      ) {
        // for keys without value ==> argsToSet remains an empty []
        // set user default value, if available
        if (defaults[key] !== undefined) {
          const defVal = defaults[key]
          argsToSet = Array.isArray(defVal) ? defVal : [defVal]
        }
      } else {
        // value in --option=value is eaten as is
        if (!isUndefined(argAfterEqualSign)) {
          argsToSet.push(processValue(key, argAfterEqualSign))
        }
        for (let ii = i + 1; ii < args.length; ii++) {
          if (
            (!configuration['greedy-arrays'] && argsToSet.length > 0) ||
            (nargsCount &&
              typeof nargsCount === 'number' &&
              argsToSet.length >= nargsCount)
          )
            break
          next = args[ii]
          if (
            /^-/.test(next) &&
            !negative.test(next) &&
            !isUnknownOptionAsArg(next)
          )
            break
          i = ii
          argsToSet.push(processValue(key, next))
        }
      }
      // If both array and nargs are configured, create an error if less than
      // nargs positionals were found. NaN has special meaning, indicating
      // that at least one value is required (more are okay).
      if (
        typeof nargsCount === 'number' &&
        ((nargsCount && argsToSet.length < nargsCount) ||
          (isNaN(nargsCount) && argsToSet.length === 0))
      ) {
        error = Error(__('Not enough arguments following: %s', key))
      }
      setArg(key, argsToSet)
      return i
    }
    function setArg(key, val) {
      if (/-/.test(key) && configuration['camel-case-expansion']) {
        const alias = key
          .split('.')
          .map(function (prop) {
            return camelCase(prop)
          })
          .join('.')
        addNewAlias(key, alias)
      }
      const value = processValue(key, val)
      const splitKey = key.split('.')
      setKey(argv, splitKey, value)
      // handle populating aliases of the full key
      if (flags.aliases[key]) {
        flags.aliases[key].forEach(function (x) {
          const keyProperties = x.split('.')
          setKey(argv, keyProperties, value)
        })
      }
      // handle populating aliases of the first element of the dot-notation key
      if (splitKey.length > 1 && configuration['dot-notation']) {
        ;(flags.aliases[splitKey[0]] || []).forEach(function (x) {
          let keyProperties = x.split('.')
          // expand alias with nested objects in key
          const a = [].concat(splitKey)
          a.shift() // nuke the old key.
          keyProperties = keyProperties.concat(a)
          // populate alias only if is not already an alias of the full key
          // (already populated above)
          if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {
            setKey(argv, keyProperties, value)
          }
        })
      }
      // Set normalize getter and setter when key is in 'normalize' but isn't an array
      if (
        checkAllAliases(key, flags.normalize) &&
        !checkAllAliases(key, flags.arrays)
      ) {
        const keys = [key].concat(flags.aliases[key] || [])
        keys.forEach(function (key) {
          Object.defineProperty(argvReturn, key, {
            enumerable: true,
            get() {
              return val
            },
            set(value) {
              val = typeof value === 'string' ? mixin.normalize(value) : value
            },
          })
        })
      }
    }
    function addNewAlias(key, alias) {
      if (!(flags.aliases[key] && flags.aliases[key].length)) {
        flags.aliases[key] = [alias]
        newAliases[alias] = true
      }
      if (!(flags.aliases[alias] && flags.aliases[alias].length)) {
        addNewAlias(alias, key)
      }
    }
    function processValue(key, val) {
      // strings may be quoted, clean this up as we assign values.
      if (
        typeof val === 'string' &&
        (val[0] === "'" || val[0] === '"') &&
        val[val.length - 1] === val[0]
      ) {
        val = val.substring(1, val.length - 1)
      }
      // handle parsing boolean arguments --foo=true --bar false.
      if (
        checkAllAliases(key, flags.bools) ||
        checkAllAliases(key, flags.counts)
      ) {
        if (typeof val === 'string') val = val === 'true'
      }
      let value = Array.isArray(val)
        ? val.map(function (v) {
            return maybeCoerceNumber(key, v)
          })
        : maybeCoerceNumber(key, val)
      // increment a count given as arg (either no value or value parsed as boolean)
      if (
        checkAllAliases(key, flags.counts) &&
        (isUndefined(value) || typeof value === 'boolean')
      ) {
        value = increment()
      }
      // Set normalized value when key is in 'normalize' and in 'arrays'
      if (
        checkAllAliases(key, flags.normalize) &&
        checkAllAliases(key, flags.arrays)
      ) {
        if (Array.isArray(val))
          value = val.map((val) => {
            return mixin.normalize(val)
          })
        else value = mixin.normalize(val)
      }
      return value
    }
    function maybeCoerceNumber(key, value) {
      if (
        !checkAllAliases(key, flags.strings) &&
        !checkAllAliases(key, flags.bools) &&
        !Array.isArray(value)
      ) {
        const shouldCoerceNumber =
          isNumber(value) &&
          configuration['parse-numbers'] &&
          Number.isSafeInteger(Math.floor(parseFloat(`${value}`)))
        if (
          shouldCoerceNumber ||
          (!isUndefined(value) && checkAllAliases(key, flags.numbers))
        )
          value = Number(value)
      }
      return value
    }
    // set args from config.json file, this should be
    // applied last so that defaults can be applied.
    function setConfig(argv) {
      const configLookup = Object.create(null)
      // expand defaults/aliases, in-case any happen to reference
      // the config.json file.
      applyDefaultsAndAliases(configLookup, flags.aliases, defaults)
      Object.keys(flags.configs).forEach(function (configKey) {
        const configPath = argv[configKey] || configLookup[configKey]
        if (configPath) {
          try {
            let config = null
            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath)
            const resolveConfig = flags.configs[configKey]
            if (typeof resolveConfig === 'function') {
              try {
                config = resolveConfig(resolvedConfigPath)
              } catch (e) {
                config = e
              }
              if (config instanceof Error) {
                error = config
                return
              }
            } else {
              config = mixin.require(resolvedConfigPath)
            }
            setConfigObject(config)
          } catch (ex) {
            // Deno will receive a PermissionDenied error if an attempt is
            // made to load config without the --allow-read flag:
            if (ex.name === 'PermissionDenied') error = ex
            else if (argv[configKey])
              error = Error(__('Invalid JSON config file: %s', configPath))
          }
        }
      })
    }
    // set args from config object.
    // it recursively checks nested objects.
    function setConfigObject(config, prev) {
      Object.keys(config).forEach(function (key) {
        const value = config[key]
        const fullKey = prev ? prev + '.' + key : key
        // if the value is an inner object and we have dot-notation
        // enabled, treat inner objects in config the same as
        // heavily nested dot notations (foo.bar.apple).
        if (
          typeof value === 'object' &&
          value !== null &&
          !Array.isArray(value) &&
          configuration['dot-notation']
        ) {
          // if the value is an object but not an array, check nested object
          setConfigObject(value, fullKey)
        } else {
          // setting arguments via CLI takes precedence over
          // values within the config file.
          if (
            !hasKey(argv, fullKey.split('.')) ||
            (checkAllAliases(fullKey, flags.arrays) &&
              configuration['combine-arrays'])
          ) {
            setArg(fullKey, value)
          }
        }
      })
    }
    // set all config objects passed in opts
    function setConfigObjects() {
      if (typeof configObjects !== 'undefined') {
        configObjects.forEach(function (configObject) {
          setConfigObject(configObject)
        })
      }
    }
    function applyEnvVars(argv, configOnly) {
      if (typeof envPrefix === 'undefined') return
      const prefix = typeof envPrefix === 'string' ? envPrefix : ''
      const env = mixin.env()
      Object.keys(env).forEach(function (envVar) {
        if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {
          // get array of nested keys and convert them to camel case
          const keys = envVar.split('__').map(function (key, i) {
            if (i === 0) {
              key = key.substring(prefix.length)
            }
            return camelCase(key)
          })
          if (
            ((configOnly && flags.configs[keys.join('.')]) || !configOnly) &&
            !hasKey(argv, keys)
          ) {
            setArg(keys.join('.'), env[envVar])
          }
        }
      })
    }
    function applyCoercions(argv) {
      let coerce
      const applied = new Set()
      Object.keys(argv).forEach(function (key) {
        if (!applied.has(key)) {
          // If we haven't already coerced this option via one of its aliases
          coerce = checkAllAliases(key, flags.coercions)
          if (typeof coerce === 'function') {
            try {
              const value = maybeCoerceNumber(key, coerce(argv[key]))
              ;[].concat(flags.aliases[key] || [], key).forEach((ali) => {
                applied.add(ali)
                argv[ali] = value
              })
            } catch (err) {
              error = err
            }
          }
        }
      })
    }
    function setPlaceholderKeys(argv) {
      flags.keys.forEach((key) => {
        // don't set placeholder keys for dot notation options 'foo.bar'.
        if (~key.indexOf('.')) return
        if (typeof argv[key] === 'undefined') argv[key] = undefined
      })
      return argv
    }
    function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {
      Object.keys(defaults).forEach(function (key) {
        if (!hasKey(obj, key.split('.'))) {
          setKey(obj, key.split('.'), defaults[key])
          if (canLog) defaulted[key] = true
          ;(aliases[key] || []).forEach(function (x) {
            if (hasKey(obj, x.split('.'))) return
            setKey(obj, x.split('.'), defaults[key])
          })
        }
      })
    }
    function hasKey(obj, keys) {
      let o = obj
      if (!configuration['dot-notation']) keys = [keys.join('.')]
      keys.slice(0, -1).forEach(function (key) {
        o = o[key] || {}
      })
      const key = keys[keys.length - 1]
      if (typeof o !== 'object') return false
      else return key in o
    }
    function setKey(obj, keys, value) {
      let o = obj
      if (!configuration['dot-notation']) keys = [keys.join('.')]
      keys.slice(0, -1).forEach(function (key) {
        // TODO(bcoe): in the next major version of yargs, switch to
        // Object.create(null) for dot notation:
        key = sanitizeKey(key)
        if (typeof o === 'object' && o[key] === undefined) {
          o[key] = {}
        }
        if (typeof o[key] !== 'object' || Array.isArray(o[key])) {
          // ensure that o[key] is an array, and that the last item is an empty object.
          if (Array.isArray(o[key])) {
            o[key].push({})
          } else {
            o[key] = [o[key], {}]
          }
          // we want to update the empty object at the end of the o[key] array, so set o to that object
          o = o[key][o[key].length - 1]
        } else {
          o = o[key]
        }
      })
      // TODO(bcoe): in the next major version of yargs, switch to
      // Object.create(null) for dot notation:
      const key = sanitizeKey(keys[keys.length - 1])
      const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays)
      const isValueArray = Array.isArray(value)
      let duplicate = configuration['duplicate-arguments-array']
      // nargs has higher priority than duplicate
      if (!duplicate && checkAllAliases(key, flags.nargs)) {
        duplicate = true
        if (
          (!isUndefined(o[key]) && flags.nargs[key] === 1) ||
          (Array.isArray(o[key]) && o[key].length === flags.nargs[key])
        ) {
          o[key] = undefined
        }
      }
      if (value === increment()) {
        o[key] = increment(o[key])
      } else if (Array.isArray(o[key])) {
        if (duplicate && isTypeArray && isValueArray) {
          o[key] = configuration['flatten-duplicate-arrays']
            ? o[key].concat(value)
            : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value])
        } else if (
          !duplicate &&
          Boolean(isTypeArray) === Boolean(isValueArray)
        ) {
          o[key] = value
        } else {
          o[key] = o[key].concat([value])
        }
      } else if (o[key] === undefined && isTypeArray) {
        o[key] = isValueArray ? value : [value]
      } else if (
        duplicate &&
        !(
          o[key] === undefined ||
          checkAllAliases(key, flags.counts) ||
          checkAllAliases(key, flags.bools)
        )
      ) {
        o[key] = [o[key], value]
      } else {
        o[key] = value
      }
    }
    // extend the aliases list with inferred aliases.
    function extendAliases(...args) {
      args.forEach(function (obj) {
        Object.keys(obj || {}).forEach(function (key) {
          // short-circuit if we've already added a key
          // to the aliases array, for example it might
          // exist in both 'opts.default' and 'opts.key'.
          if (flags.aliases[key]) return
          flags.aliases[key] = [].concat(aliases[key] || [])
          // For "--option-name", also set argv.optionName
          flags.aliases[key].concat(key).forEach(function (x) {
            if (/-/.test(x) && configuration['camel-case-expansion']) {
              const c = camelCase(x)
              if (c !== key && flags.aliases[key].indexOf(c) === -1) {
                flags.aliases[key].push(c)
                newAliases[c] = true
              }
            }
          })
          // For "--optionName", also set argv['option-name']
          flags.aliases[key].concat(key).forEach(function (x) {
            if (
              x.length > 1 &&
              /[A-Z]/.test(x) &&
              configuration['camel-case-expansion']
            ) {
              const c = decamelize(x, '-')
              if (c !== key && flags.aliases[key].indexOf(c) === -1) {
                flags.aliases[key].push(c)
                newAliases[c] = true
              }
            }
          })
          flags.aliases[key].forEach(function (x) {
            flags.aliases[x] = [key].concat(
              flags.aliases[key].filter(function (y) {
                return x !== y
              }),
            )
          })
        })
      })
    }
    function checkAllAliases(key, flag) {
      const toCheck = [].concat(flags.aliases[key] || [], key)
      const keys = Object.keys(flag)
      const setAlias = toCheck.find((key) => keys.includes(key))
      return setAlias ? flag[setAlias] : false
    }
    function hasAnyFlag(key) {
      const flagsKeys = Object.keys(flags)
      const toCheck = [].concat(flagsKeys.map((k) => flags[k]))
      return toCheck.some(function (flag) {
        return Array.isArray(flag) ? flag.includes(key) : flag[key]
      })
    }
    function hasFlagsMatching(arg, ...patterns) {
      const toCheck = [].concat(...patterns)
      return toCheck.some(function (pattern) {
        const match = arg.match(pattern)
        return match && hasAnyFlag(match[1])
      })
    }
    // based on a simplified version of the short flag group parsing logic
    function hasAllShortFlags(arg) {
      // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group
      if (arg.match(negative) || !arg.match(/^-[^-]+/)) {
        return false
      }
      let hasAllFlags = true
      let next
      const letters = arg.slice(1).split('')
      for (let j = 0; j < letters.length; j++) {
        next = arg.slice(j + 2)
        if (!hasAnyFlag(letters[j])) {
          hasAllFlags = false
          break
        }
        if (
          (letters[j + 1] && letters[j + 1] === '=') ||
          next === '-' ||
          (/[A-Za-z]/.test(letters[j]) &&
            /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) ||
          (letters[j + 1] && letters[j + 1].match(/\W/))
        ) {
          break
        }
      }
      return hasAllFlags
    }
    function isUnknownOptionAsArg(arg) {
      return configuration['unknown-options-as-args'] && isUnknownOption(arg)
    }
    function isUnknownOption(arg) {
      // ignore negative numbers
      if (arg.match(negative)) {
        return false
      }
      // if this is a short option group and all of them are configured, it isn't unknown
      if (hasAllShortFlags(arg)) {
        return false
      }
      // e.g. '--count=2'
      const flagWithEquals = /^-+([^=]+?)=[\s\S]*$/
      // e.g. '-a' or '--arg'
      const normalFlag = /^-+([^=]+?)$/
      // e.g. '-a-'
      const flagEndingInHyphen = /^-+([^=]+?)-$/
      // e.g. '-abc123'
      const flagEndingInDigits = /^-+([^=]+?\d+)$/
      // e.g. '-a/usr/local'
      const flagEndingInNonWordCharacters = /^-+([^=]+?)\W+.*$/
      // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method
      return !hasFlagsMatching(
        arg,
        flagWithEquals,
        negatedBoolean,
        normalFlag,
        flagEndingInHyphen,
        flagEndingInDigits,
        flagEndingInNonWordCharacters,
      )
    }
    // make a best effort to pick a default value
    // for an option based on name and type.
    function defaultValue(key) {
      if (
        !checkAllAliases(key, flags.bools) &&
        !checkAllAliases(key, flags.counts) &&
        `${key}` in defaults
      ) {
        return defaults[key]
      } else {
        return defaultForType(guessType(key))
      }
    }
    // return a default value, given the type of a flag.,
    function defaultForType(type) {
      const def = {
        boolean: true,
        string: '',
        number: undefined,
        array: [],
      }
      return def[type]
    }
    // given a flag, enforce a default type.
    function guessType(key) {
      let type = 'boolean'
      if (checkAllAliases(key, flags.strings)) type = 'string'
      else if (checkAllAliases(key, flags.numbers)) type = 'number'
      else if (checkAllAliases(key, flags.bools)) type = 'boolean'
      else if (checkAllAliases(key, flags.arrays)) type = 'array'
      return type
    }
    function isNumber(x) {
      if (x === null || x === undefined) return false
      // if loaded from config, may already be a number.
      if (typeof x === 'number') return true
      // hexadecimal.
      if (/^0x[0-9a-f]+$/i.test(x)) return true
      // don't treat 0123 as a number; as it drops the leading '0'.
      if (x.length > 1 && x[0] === '0') return false
      return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x)
    }
    function isUndefined(num) {
      return num === undefined
    }
    // check user configuration settings for inconsistencies
    function checkConfiguration() {
      // count keys should not be set as array/narg
      Object.keys(flags.counts).find((key) => {
        if (checkAllAliases(key, flags.arrays)) {
          error = Error(
            __(
              'Invalid configuration: %s, opts.count excludes opts.array.',
              key,
            ),
          )
          return true
        } else if (checkAllAliases(key, flags.nargs)) {
          error = Error(
            __(
              'Invalid configuration: %s, opts.count excludes opts.narg.',
              key,
            ),
          )
          return true
        }
        return false
      })
    }
    return {
      argv: Object.assign(argvReturn, argv),
      error: error,
      aliases: Object.assign({}, flags.aliases),
      newAliases: Object.assign({}, newAliases),
      defaulted: Object.assign({}, defaulted),
      configuration: configuration,
    }
  }
}
// if any aliases reference each other, we should
// merge them together.
function combineAliases(aliases) {
  const aliasArrays = []
  const combined = Object.create(null)
  let change = true
  // turn alias lookup hash {key: ['alias1', 'alias2']} into
  // a simple array ['key', 'alias1', 'alias2']
  Object.keys(aliases).forEach(function (key) {
    aliasArrays.push([].concat(aliases[key], key))
  })
  // combine arrays until zero changes are
  // made in an iteration.
  while (change) {
    change = false
    for (let i = 0; i < aliasArrays.length; i++) {
      for (let ii = i + 1; ii < aliasArrays.length; ii++) {
        const intersect = aliasArrays[i].filter(function (v) {
          return aliasArrays[ii].indexOf(v) !== -1
        })
        if (intersect.length) {
          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii])
          aliasArrays.splice(ii, 1)
          change = true
          break
        }
      }
    }
  }
  // map arrays back to the hash-lookup (de-dupe while
  // we're at it).
  aliasArrays.forEach(function (aliasArray) {
    aliasArray = aliasArray.filter(function (v, i, self) {
      return self.indexOf(v) === i
    })
    const lastAlias = aliasArray.pop()
    if (lastAlias !== undefined && typeof lastAlias === 'string') {
      combined[lastAlias] = aliasArray
    }
  })
  return combined
}
// this function should only be called when a count is given as an arg
// it is NOT called to set a default value
// thus we can start the count at 1 instead of 0
function increment(orig) {
  return orig !== undefined ? orig + 1 : 1
}
// TODO(bcoe): in the next major version of yargs, switch to
// Object.create(null) for dot notation:
function sanitizeKey(key) {
  if (key === '__proto__') return '___proto___'
  return key
}

// Main entrypoint for libraries using yargs-parser in Node.js
// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our
// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.
const minNodeVersion =
  process && process.env && process.env.YARGS_MIN_NODE_VERSION
    ? Number(process.env.YARGS_MIN_NODE_VERSION)
    : 10
if (process && process.version) {
  const major = Number(process.version.match(/v([^.]+)/)[1])
  if (major < minNodeVersion) {
    throw Error(
      `yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`,
    )
  }
}
// Creates a yargs-parser instance using Node.js standard libraries:
const env = process ? process.env : {}
const parser = new YargsParser({
  cwd: process.cwd,
  env: () => {
    return env
  },
  format: util$2.format,
  normalize: path.normalize,
  resolve: path.resolve,
  // TODO: figure  out a  way to combine ESM and CJS coverage, such  that
  // we can exercise all the lines below:
  require: (path) => {
    if (typeof require !== 'undefined') {
      return require(path)
    } else if (path.match(/\.json$/)) {
      return fs$3.readFileSync(path, 'utf8')
    } else {
      throw Error('only .json config files are supported in ESM')
    }
  },
})
const yargsParser = function Parser(args, opts) {
  const result = parser.parse(args.slice(), opts)
  return result.argv
}
yargsParser.detailed = function (args, opts) {
  return parser.parse(args.slice(), opts)
}
yargsParser.camelCase = camelCase
yargsParser.decamelize = decamelize

const detectNewline = (string) => {
  if (typeof string !== 'string') {
    throw new TypeError('Expected a string')
  }

  const newlines = string.match(/(?:\r?\n)/g) || []

  if (newlines.length === 0) {
    return
  }

  const crlf = newlines.filter((newline) => newline === '\r\n').length
  const lf = newlines.length - crlf

  return crlf > lf ? '\r\n' : '\n'
}

var detectNewline_1 = detectNewline
var graceful = (string) =>
  (typeof string === 'string' && detectNewline(string)) || '\n'
detectNewline_1.graceful = graceful

var commonjsGlobal =
  typeof globalThis !== 'undefined'
    ? globalThis
    : typeof window !== 'undefined'
    ? window
    : typeof global !== 'undefined'
    ? global
    : typeof self !== 'undefined'
    ? self
    : {}

function createCommonjsModule(fn, basedir, module) {
  return (
    (module = {
      path: basedir,
      exports: {},
      require: function (path, base) {
        return commonjsRequire(
          path,
          base === undefined || base === null ? module.path : base,
        )
      },
    }),
    fn(module, module.exports),
    module.exports
  )
}

function commonjsRequire() {
  throw new Error(
    'Dynamic requires are not currently supported by @rollup/plugin-commonjs',
  )
}

var infoFromPackageJson_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  function infoFromPackageJson(packageJson, packageJsonPath) {
    return Object.assign({ packageJsonPath }, packageJson)
  }
  exports.infoFromPackageJson = infoFromPackageJson
})

const pTry = (fn, ...arguments_) =>
  new Promise((resolve) => {
    resolve(fn(...arguments_))
  })

var pTry_1 = pTry
// TODO: remove this in the next major version
var _default = pTry
pTry_1.default = _default

const pLimit = (concurrency) => {
  if (
    !(
      (Number.isInteger(concurrency) || concurrency === Infinity) &&
      concurrency > 0
    )
  ) {
    return Promise.reject(
      new TypeError('Expected `concurrency` to be a number from 1 and up'),
    )
  }

  const queue = []
  let activeCount = 0

  const next = () => {
    activeCount--

    if (queue.length > 0) {
      queue.shift()()
    }
  }

  const run = (fn, resolve, ...args) => {
    activeCount++

    const result = pTry_1(fn, ...args)

    resolve(result)

    result.then(next, next)
  }

  const enqueue = (fn, resolve, ...args) => {
    if (activeCount < concurrency) {
      run(fn, resolve, ...args)
    } else {
      queue.push(run.bind(null, fn, resolve, ...args))
    }
  }

  const generator = (fn, ...args) =>
    new Promise((resolve) => enqueue(fn, resolve, ...args))
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount,
    },
    pendingCount: {
      get: () => queue.length,
    },
    clearQueue: {
      value: () => {
        queue.length = 0
      },
    },
  })

  return generator
}

var pLimit_1 = pLimit
var _default$1 = pLimit
pLimit_1.default = _default$1

class EndError extends Error {
  constructor(value) {
    super()
    this.value = value
  }
}

// The input can also be a promise, so we await it
const testElement = async (element, tester) => tester(await element)

// The input can also be a promise, so we `Promise.all()` them both
const finder = async (element) => {
  const values = await Promise.all(element)
  if (values[1] === true) {
    throw new EndError(values[0])
  }

  return false
}

const pLocate = async (iterable, tester, options) => {
  options = {
    concurrency: Infinity,
    preserveOrder: true,
    ...options,
  }

  const limit = pLimit_1(options.concurrency)

  // Start all the promises concurrently with optional limit
  const items = [...iterable].map((element) => [
    element,
    limit(testElement, element, tester),
  ])

  // Check the promises either serially or concurrently
  const checkLimit = pLimit_1(options.preserveOrder ? 1 : Infinity)

  try {
    await Promise.all(items.map((element) => checkLimit(finder, element)))
  } catch (error) {
    if (error instanceof EndError) {
      return error.value
    }

    throw error
  }
}

var pLocate_1 = pLocate
// TODO: Remove this for the next major release
var _default$2 = pLocate
pLocate_1.default = _default$2

const { promisify } = util__default['default']

const fsStat = promisify(fs__default['default'].stat)
const fsLStat = promisify(fs__default['default'].lstat)

const typeMappings = {
  directory: 'isDirectory',
  file: 'isFile',
}

function checkType({ type }) {
  if (type in typeMappings) {
    return
  }

  throw new Error(`Invalid type specified: ${type}`)
}

const matchType = (type, stat) =>
  type === undefined || stat[typeMappings[type]]()

var locatePath = async (paths, options) => {
  options = {
    cwd: process.cwd(),
    type: 'file',
    allowSymlinks: true,
    ...options,
  }
  checkType(options)
  const statFn = options.allowSymlinks ? fsStat : fsLStat

  return pLocate_1(
    paths,
    async (path_) => {
      try {
        const stat = await statFn(
          path__default['default'].resolve(options.cwd, path_),
        )
        return matchType(options.type, stat)
      } catch (_) {
        return false
      }
    },
    options,
  )
}

var sync = (paths, options) => {
  options = {
    cwd: process.cwd(),
    allowSymlinks: true,
    type: 'file',
    ...options,
  }
  checkType(options)
  const statFn = options.allowSymlinks
    ? fs__default['default'].statSync
    : fs__default['default'].lstatSync

  for (const path_ of paths) {
    try {
      const stat = statFn(path__default['default'].resolve(options.cwd, path_))

      if (matchType(options.type, stat)) {
        return path_
      }
    } catch (_) {}
  }
}
locatePath.sync = sync

const { promisify: promisify$1 } = util__default['default']

const pAccess = promisify$1(fs__default['default'].access)

var pathExists = async (path) => {
  try {
    await pAccess(path)
    return true
  } catch (_) {
    return false
  }
}

var sync$1 = (path) => {
  try {
    fs__default['default'].accessSync(path)
    return true
  } catch (_) {
    return false
  }
}
pathExists.sync = sync$1

var findUp = createCommonjsModule(function (module) {
  const stop = Symbol('findUp.stop')

  module.exports = async (name, options = {}) => {
    let directory = path__default['default'].resolve(options.cwd || '')
    const { root } = path__default['default'].parse(directory)
    const paths = [].concat(name)

    const runMatcher = async (locateOptions) => {
      if (typeof name !== 'function') {
        return locatePath(paths, locateOptions)
      }

      const foundPath = await name(locateOptions.cwd)
      if (typeof foundPath === 'string') {
        return locatePath([foundPath], locateOptions)
      }

      return foundPath
    }

    // eslint-disable-next-line no-constant-condition
    while (true) {
      // eslint-disable-next-line no-await-in-loop
      const foundPath = await runMatcher({ ...options, cwd: directory })

      if (foundPath === stop) {
        return
      }

      if (foundPath) {
        return path__default['default'].resolve(directory, foundPath)
      }

      if (directory === root) {
        return
      }

      directory = path__default['default'].dirname(directory)
    }
  }

  module.exports.sync = (name, options = {}) => {
    let directory = path__default['default'].resolve(options.cwd || '')
    const { root } = path__default['default'].parse(directory)
    const paths = [].concat(name)

    const runMatcher = (locateOptions) => {
      if (typeof name !== 'function') {
        return locatePath.sync(paths, locateOptions)
      }

      const foundPath = name(locateOptions.cwd)
      if (typeof foundPath === 'string') {
        return locatePath.sync([foundPath], locateOptions)
      }

      return foundPath
    }

    // eslint-disable-next-line no-constant-condition
    while (true) {
      const foundPath = runMatcher({ ...options, cwd: directory })

      if (foundPath === stop) {
        return
      }

      if (foundPath) {
        return path__default['default'].resolve(directory, foundPath)
      }

      if (directory === root) {
        return
      }

      directory = path__default['default'].dirname(directory)
    }
  }

  module.exports.exists = pathExists

  module.exports.sync.exists = pathExists.sync

  module.exports.stop = stop
})

var origCwd = process.cwd
var cwd = null

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

process.cwd = function () {
  if (!cwd) cwd = origCwd.call(process)
  return cwd
}
try {
  process.cwd()
} catch (er) {}

var chdir = process.chdir
process.chdir = function (d) {
  cwd = null
  chdir.call(process, d)
}

var polyfills = patch

function patch(fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (
    constants__default['default'].hasOwnProperty('O_SYMLINK') &&
    process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)
  ) {
    patchLchmod(fs)
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs)
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown)
  fs.fchown = chownFix(fs.fchown)
  fs.lchown = chownFix(fs.lchown)

  fs.chmod = chmodFix(fs.chmod)
  fs.fchmod = chmodFix(fs.fchmod)
  fs.lchmod = chmodFix(fs.lchmod)

  fs.chownSync = chownFixSync(fs.chownSync)
  fs.fchownSync = chownFixSync(fs.fchownSync)
  fs.lchownSync = chownFixSync(fs.lchownSync)

  fs.chmodSync = chmodFixSync(fs.chmodSync)
  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

  fs.stat = statFix(fs.stat)
  fs.fstat = statFix(fs.fstat)
  fs.lstat = statFix(fs.lstat)

  fs.statSync = statFixSync(fs.statSync)
  fs.fstatSync = statFixSync(fs.fstatSync)
  fs.lstatSync = statFixSync(fs.lstatSync)

  // if lchmod/lchown do not exist, then make them no-ops
  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchmodSync = function () {}
  }
  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchownSync = function () {}
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === 'win32') {
    fs.rename = (function (fs$rename) {
      return function (from, to, cb) {
        var start = Date.now()
        var backoff = 0
        fs$rename(from, to, function CB(er) {
          if (
            er &&
            (er.code === 'EACCES' || er.code === 'EPERM') &&
            Date.now() - start < 60000
          ) {
            setTimeout(function () {
              fs.stat(to, function (stater, st) {
                if (stater && stater.code === 'ENOENT') fs$rename(from, to, CB)
                else cb(er)
              })
            }, backoff)
            if (backoff < 100) backoff += 10
            return
          }
          if (cb) cb(er)
        })
      }
    })(fs.rename)
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = (function (fs$read) {
    function read(fd, buffer, offset, length, position, callback_) {
      var callback
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++
            return fs$read.call(
              fs,
              fd,
              buffer,
              offset,
              length,
              position,
              callback,
            )
          }
          callback_.apply(this, arguments)
        }
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
    }

    // This ensures `util.promisify` works as it does for native `fs.read`.
    read.__proto__ = fs$read
    return read
  })(fs.read)

  fs.readSync = (function (fs$readSync) {
    return function (fd, buffer, offset, length, position) {
      var eagCounter = 0
      while (true) {
        try {
          return fs$readSync.call(fs, fd, buffer, offset, length, position)
        } catch (er) {
          if (er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++
            continue
          }
          throw er
        }
      }
    }
  })(fs.readSync)

  function patchLchmod(fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open(
        path,
        constants__default['default'].O_WRONLY |
          constants__default['default'].O_SYMLINK,
        mode,
        function (err, fd) {
          if (err) {
            if (callback) callback(err)
            return
          }
          // prefer to return the chmod error, if one occurs,
          // but still try to close, and report closing errors if they occur.
          fs.fchmod(fd, mode, function (err) {
            fs.close(fd, function (err2) {
              if (callback) callback(err || err2)
            })
          })
        },
      )
    }

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(
        path,
        constants__default['default'].O_WRONLY |
          constants__default['default'].O_SYMLINK,
        mode,
      )

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true
      var ret
      try {
        ret = fs.fchmodSync(fd, mode)
        threw = false
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd)
          } catch (er) {}
        } else {
          fs.closeSync(fd)
        }
      }
      return ret
    }
  }

  function patchLutimes(fs) {
    if (constants__default['default'].hasOwnProperty('O_SYMLINK')) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(
          path,
          constants__default['default'].O_SYMLINK,
          function (er, fd) {
            if (er) {
              if (cb) cb(er)
              return
            }
            fs.futimes(fd, at, mt, function (er) {
              fs.close(fd, function (er2) {
                if (cb) cb(er || er2)
              })
            })
          },
        )
      }

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants__default['default'].O_SYMLINK)
        var ret
        var threw = true
        try {
          ret = fs.futimesSync(fd, at, mt)
          threw = false
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd)
            } catch (er) {}
          } else {
            fs.closeSync(fd)
          }
        }
        return ret
      }
    } else {
      fs.lutimes = function (_a, _b, _c, cb) {
        if (cb) process.nextTick(cb)
      }
      fs.lutimesSync = function () {}
    }
  }

  function chmodFix(orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chmodFixSync(orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function chownFix(orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chownFixSync(orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function statFix(orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options
        options = null
      }
      function callback(er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000
          if (stats.gid < 0) stats.gid += 0x100000000
        }
        if (cb) cb.apply(this, arguments)
      }
      return options
        ? orig.call(fs, target, options, callback)
        : orig.call(fs, target, callback)
    }
  }

  function statFixSync(orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options) {
      var stats = options
        ? orig.call(fs, target, options)
        : orig.call(fs, target)
      if (stats.uid < 0) stats.uid += 0x100000000
      if (stats.gid < 0) stats.gid += 0x100000000
      return stats
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk(er) {
    if (!er) return true

    if (er.code === 'ENOSYS') return true

    var nonroot = !process.getuid || process.getuid() !== 0
    if (nonroot) {
      if (er.code === 'EINVAL' || er.code === 'EPERM') return true
    }

    return false
  }
}

var Stream = stream_1__default['default'].Stream

var legacyStreams = legacy

function legacy(fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream,
  }

  function ReadStream(path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options)

    Stream.call(this)

    var self = this

    this.path = path
    this.fd = null
    this.readable = true
    this.paused = false

    this.flags = 'r'
    this.mode = 438 /*=0666*/
    this.bufferSize = 64 * 1024

    options = options || {}

    // Mixin options into this
    var keys = Object.keys(options)
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index]
      this[key] = options[key]
    }

    if (this.encoding) this.setEncoding(this.encoding)

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number')
      }
      if (this.end === undefined) {
        this.end = Infinity
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number')
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end')
      }

      this.pos = this.start
    }

    if (this.fd !== null) {
      process.nextTick(function () {
        self._read()
      })
      return
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err)
        self.readable = false
        return
      }

      self.fd = fd
      self.emit('open', fd)
      self._read()
    })
  }

  function WriteStream(path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options)

    Stream.call(this)

    this.path = path
    this.fd = null
    this.writable = true

    this.flags = 'w'
    this.encoding = 'binary'
    this.mode = 438 /*=0666*/
    this.bytesWritten = 0

    options = options || {}

    // Mixin options into this
    var keys = Object.keys(options)
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index]
      this[key] = options[key]
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number')
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero')
      }

      this.pos = this.start
    }

    this.busy = false
    this._queue = []

    if (this.fd === null) {
      this._open = fs.open
      this._queue.push([
        this._open,
        this.path,
        this.flags,
        this.mode,
        undefined,
      ])
      this.flush()
    }
  }
}

var clone_1 = clone

function clone(obj) {
  if (obj === null || typeof obj !== 'object') return obj

  if (obj instanceof Object) var copy = { __proto__: obj.__proto__ }
  else var copy = Object.create(null)

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
  })

  return copy
}

var gracefulFs = createCommonjsModule(function (module) {
  /* istanbul ignore next - node 0.x polyfill */
  var gracefulQueue
  var previousSymbol

  /* istanbul ignore else - node 0.x polyfill */
  if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
    gracefulQueue = Symbol.for('graceful-fs.queue')
    // This is used in testing by future versions
    previousSymbol = Symbol.for('graceful-fs.previous')
  } else {
    gracefulQueue = '___graceful-fs.queue'
    previousSymbol = '___graceful-fs.previous'
  }

  function noop() {}

  function publishQueue(context, queue) {
    Object.defineProperty(context, gracefulQueue, {
      get: function () {
        return queue
      },
    })
  }

  var debug = noop
  if (util__default['default'].debuglog)
    debug = util__default['default'].debuglog('gfs4')
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
    debug = function () {
      var m = util__default['default'].format.apply(
        util__default['default'],
        arguments,
      )
      m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
      console.error(m)
    }

  // Once time initialization
  if (!fs__default['default'][gracefulQueue]) {
    // This queue can be shared by multiple loaded instances
    var queue = commonjsGlobal[gracefulQueue] || []
    publishQueue(fs__default['default'], queue)

    // Patch fs.close/closeSync to shared queue version, because we need
    // to retry() whenever a close happens *anywhere* in the program.
    // This is essential when multiple graceful-fs instances are
    // in play at the same time.
    fs__default['default'].close = (function (fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs__default['default'], fd, function (err) {
          // This function uses the graceful-fs shared queue
          if (!err) {
            retry()
          }

          if (typeof cb === 'function') cb.apply(this, arguments)
        })
      }

      Object.defineProperty(close, previousSymbol, {
        value: fs$close,
      })
      return close
    })(fs__default['default'].close)

    fs__default['default'].closeSync = (function (fs$closeSync) {
      function closeSync(fd) {
        // This function uses the graceful-fs shared queue
        fs$closeSync.apply(fs__default['default'], arguments)
        retry()
      }

      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync,
      })
      return closeSync
    })(fs__default['default'].closeSync)

    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
      process.on('exit', function () {
        debug(fs__default['default'][gracefulQueue])
        assert__default['default'].equal(
          fs__default['default'][gracefulQueue].length,
          0,
        )
      })
    }
  }

  if (!commonjsGlobal[gracefulQueue]) {
    publishQueue(commonjsGlobal, fs__default['default'][gracefulQueue])
  }

  module.exports = patch(clone_1(fs__default['default']))
  if (
    process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH &&
    !fs__default['default'].__patched
  ) {
    module.exports = patch(fs__default['default'])
    fs__default['default'].__patched = true
  }

  function patch(fs) {
    // Everything that references the open() function needs to be in here
    polyfills(fs)
    fs.gracefulify = patch

    fs.createReadStream = createReadStream
    fs.createWriteStream = createWriteStream
    var fs$readFile = fs.readFile
    fs.readFile = readFile
    function readFile(path, options, cb) {
      if (typeof options === 'function') (cb = options), (options = null)

      return go$readFile(path, options, cb)

      function go$readFile(path, options, cb) {
        return fs$readFile(path, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$readFile, [path, options, cb]])
          else {
            if (typeof cb === 'function') cb.apply(this, arguments)
            retry()
          }
        })
      }
    }

    var fs$writeFile = fs.writeFile
    fs.writeFile = writeFile
    function writeFile(path, data, options, cb) {
      if (typeof options === 'function') (cb = options), (options = null)

      return go$writeFile(path, data, options, cb)

      function go$writeFile(path, data, options, cb) {
        return fs$writeFile(path, data, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$writeFile, [path, data, options, cb]])
          else {
            if (typeof cb === 'function') cb.apply(this, arguments)
            retry()
          }
        })
      }
    }

    var fs$appendFile = fs.appendFile
    if (fs$appendFile) fs.appendFile = appendFile
    function appendFile(path, data, options, cb) {
      if (typeof options === 'function') (cb = options), (options = null)

      return go$appendFile(path, data, options, cb)

      function go$appendFile(path, data, options, cb) {
        return fs$appendFile(path, data, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$appendFile, [path, data, options, cb]])
          else {
            if (typeof cb === 'function') cb.apply(this, arguments)
            retry()
          }
        })
      }
    }

    var fs$readdir = fs.readdir
    fs.readdir = readdir
    function readdir(path, options, cb) {
      var args = [path]
      if (typeof options !== 'function') {
        args.push(options)
      } else {
        cb = options
      }
      args.push(go$readdir$cb)

      return go$readdir(args)

      function go$readdir$cb(err, files) {
        if (files && files.sort) files.sort()

        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readdir, [args]])
        else {
          if (typeof cb === 'function') cb.apply(this, arguments)
          retry()
        }
      }
    }

    function go$readdir(args) {
      return fs$readdir.apply(fs, args)
    }

    if (process.version.substr(0, 4) === 'v0.8') {
      var legStreams = legacyStreams(fs)
      ReadStream = legStreams.ReadStream
      WriteStream = legStreams.WriteStream
    }

    var fs$ReadStream = fs.ReadStream
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype)
      ReadStream.prototype.open = ReadStream$open
    }

    var fs$WriteStream = fs.WriteStream
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype)
      WriteStream.prototype.open = WriteStream$open
    }

    Object.defineProperty(fs, 'ReadStream', {
      get: function () {
        return ReadStream
      },
      set: function (val) {
        ReadStream = val
      },
      enumerable: true,
      configurable: true,
    })
    Object.defineProperty(fs, 'WriteStream', {
      get: function () {
        return WriteStream
      },
      set: function (val) {
        WriteStream = val
      },
      enumerable: true,
      configurable: true,
    })

    // legacy names
    var FileReadStream = ReadStream
    Object.defineProperty(fs, 'FileReadStream', {
      get: function () {
        return FileReadStream
      },
      set: function (val) {
        FileReadStream = val
      },
      enumerable: true,
      configurable: true,
    })
    var FileWriteStream = WriteStream
    Object.defineProperty(fs, 'FileWriteStream', {
      get: function () {
        return FileWriteStream
      },
      set: function (val) {
        FileWriteStream = val
      },
      enumerable: true,
      configurable: true,
    })

    function ReadStream(path, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
    }

    function ReadStream$open() {
      var that = this
      open(that.path, that.flags, that.mode, function (err, fd) {
        if (err) {
          if (that.autoClose) that.destroy()

          that.emit('error', err)
        } else {
          that.fd = fd
          that.emit('open', fd)
          that.read()
        }
      })
    }

    function WriteStream(path, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this
      else
        return WriteStream.apply(
          Object.create(WriteStream.prototype),
          arguments,
        )
    }

    function WriteStream$open() {
      var that = this
      open(that.path, that.flags, that.mode, function (err, fd) {
        if (err) {
          that.destroy()
          that.emit('error', err)
        } else {
          that.fd = fd
          that.emit('open', fd)
        }
      })
    }

    function createReadStream(path, options) {
      return new fs.ReadStream(path, options)
    }

    function createWriteStream(path, options) {
      return new fs.WriteStream(path, options)
    }

    var fs$open = fs.open
    fs.open = open
    function open(path, flags, mode, cb) {
      if (typeof mode === 'function') (cb = mode), (mode = null)

      return go$open(path, flags, mode, cb)

      function go$open(path, flags, mode, cb) {
        return fs$open(path, flags, mode, function (err, fd) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$open, [path, flags, mode, cb]])
          else {
            if (typeof cb === 'function') cb.apply(this, arguments)
            retry()
          }
        })
      }
    }

    return fs
  }

  function enqueue(elem) {
    debug('ENQUEUE', elem[0].name, elem[1])
    fs__default['default'][gracefulQueue].push(elem)
  }

  function retry() {
    var elem = fs__default['default'][gracefulQueue].shift()
    if (elem) {
      debug('RETRY', elem[0].name, elem[1])
      elem[0].apply(null, elem[1])
    }
  }
})

const processFn = (fn, options, proxy, unwrapped) =>
  function (...arguments_) {
    const P = options.promiseModule

    return new P((resolve, reject) => {
      if (options.multiArgs) {
        arguments_.push((...result) => {
          if (options.errorFirst) {
            if (result[0]) {
              reject(result)
            } else {
              result.shift()
              resolve(result)
            }
          } else {
            resolve(result)
          }
        })
      } else if (options.errorFirst) {
        arguments_.push((error, result) => {
          if (error) {
            reject(error)
          } else {
            resolve(result)
          }
        })
      } else {
        arguments_.push(resolve)
      }

      const self = this === proxy ? unwrapped : this
      Reflect.apply(fn, self, arguments_)
    })
  }

const filterCache = new WeakMap()

var D__git_packageInherit_node_modules_pify = (input, options) => {
  options = {
    exclude: [/.+(?:Sync|Stream)$/],
    errorFirst: true,
    promiseModule: Promise,
    ...options,
  }

  const objectType = typeof input
  if (
    !(input !== null && (objectType === 'object' || objectType === 'function'))
  ) {
    throw new TypeError(
      `Expected \`input\` to be a \`Function\` or \`Object\`, got \`${
        input === null ? 'null' : objectType
      }\``,
    )
  }

  const filter = (target, key) => {
    let cached = filterCache.get(target)

    if (!cached) {
      cached = {}
      filterCache.set(target, cached)
    }

    if (key in cached) {
      return cached[key]
    }

    const match = (pattern) =>
      typeof pattern === 'string' || typeof key === 'symbol'
        ? key === pattern
        : pattern.test(key)
    const desc = Reflect.getOwnPropertyDescriptor(target, key)
    const writableOrConfigurableOwn =
      desc === undefined || desc.writable || desc.configurable
    const included = options.include
      ? options.include.some(match)
      : !options.exclude.some(match)
    const shouldFilter = included && writableOrConfigurableOwn
    cached[key] = shouldFilter
    return shouldFilter
  }

  const cache = new WeakMap()

  const proxy = new Proxy(input, {
    apply(target, thisArg, args) {
      const cached = cache.get(target)

      if (cached) {
        return Reflect.apply(cached, thisArg, args)
      }

      const pified = options.excludeMain
        ? target
        : processFn(target, options, proxy, target)
      cache.set(target, pified)
      return Reflect.apply(pified, thisArg, args)
    },

    get(target, key) {
      const property = target[key]

      // eslint-disable-next-line no-use-extend-native/no-use-extend-native
      if (!filter(target, key) || property === Function.prototype[key]) {
        return property
      }

      const cached = cache.get(property)

      if (cached) {
        return cached
      }

      if (typeof property === 'function') {
        const pified = processFn(property, options, proxy, target)
        cache.set(property, pified)
        return pified
      }

      return property
    },
  })

  return proxy
}

var stripBom = (string) => {
  if (typeof string !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof string}`)
  }

  // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string
  // conversion translates it to FEFF (UTF-16 BOM)
  if (string.charCodeAt(0) === 0xfeff) {
    return string.slice(1)
  }

  return string
}

function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null
}

function isObject(subject) {
  return typeof subject === 'object' && subject !== null
}

function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence
  else if (isNothing(sequence)) return []

  return [sequence]
}

function extend(target, source) {
  var index, length, key, sourceKeys

  if (source) {
    sourceKeys = Object.keys(source)

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index]
      target[key] = source[key]
    }
  }

  return target
}

function repeat(string, count) {
  var result = '',
    cycle

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string
  }

  return result
}

function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number
}

var isNothing_1 = isNothing
var isObject_1 = isObject
var toArray_1 = toArray
var repeat_1 = repeat
var isNegativeZero_1 = isNegativeZero
var extend_1 = extend

var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1,
}

// YAML error class. http://stackoverflow.com/questions/8458984

function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this)

  this.name = 'YAMLException'
  this.reason = reason
  this.mark = mark
  this.message =
    (this.reason || '(unknown reason)') +
    (this.mark ? ' ' + this.mark.toString() : '')

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor)
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || ''
  }
}

// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype)
YAMLException.prototype.constructor = YAMLException

YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': '

  result += this.reason || '(unknown reason)'

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString()
  }

  return result
}

var exception = YAMLException

function Mark(name, buffer, position, line, column) {
  this.name = name
  this.buffer = buffer
  this.position = position
  this.line = line
  this.column = column
}

Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet

  if (!this.buffer) return null

  indent = indent || 4
  maxLength = maxLength || 75

  head = ''
  start = this.position

  while (
    start > 0 &&
    '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1
  ) {
    start -= 1
    if (this.position - start > maxLength / 2 - 1) {
      head = ' ... '
      start += 5
      break
    }
  }

  tail = ''
  end = this.position

  while (
    end < this.buffer.length &&
    '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1
  ) {
    end += 1
    if (end - this.position > maxLength / 2 - 1) {
      tail = ' ... '
      end -= 5
      break
    }
  }

  snippet = this.buffer.slice(start, end)

  return (
    common.repeat(' ', indent) +
    head +
    snippet +
    tail +
    '\n' +
    common.repeat(' ', indent + this.position - start + head.length) +
    '^'
  )
}

Mark.prototype.toString = function toString(compact) {
  var snippet,
    where = ''

  if (this.name) {
    where += 'in "' + this.name + '" '
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1)

  if (!compact) {
    snippet = this.getSnippet()

    if (snippet) {
      where += ':\n' + snippet
    }
  }

  return where
}

var mark = Mark

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'defaultStyle',
  'styleAliases',
]

var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping']

function compileStyleAliases(map) {
  var result = {}

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style
      })
    })
  }

  return result
}

function Type(tag, options) {
  options = options || {}

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception(
        'Unknown option "' +
          name +
          '" is met in definition of "' +
          tag +
          '" YAML type.',
      )
    }
  })

  // TODO: Add tag format check.
  this.tag = tag
  this.kind = options['kind'] || null
  this.resolve =
    options['resolve'] ||
    function () {
      return true
    }
  this.construct =
    options['construct'] ||
    function (data) {
      return data
    }
  this.instanceOf = options['instanceOf'] || null
  this.predicate = options['predicate'] || null
  this.represent = options['represent'] || null
  this.defaultStyle = options['defaultStyle'] || null
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null)

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception(
      'Unknown kind "' +
        this.kind +
        '" is specified for "' +
        tag +
        '" YAML type.',
    )
  }
}

var type = Type

/*eslint-disable max-len*/

function compileList(schema, name, result) {
  var exclude = []

  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result)
  })

  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (
        previousType.tag === currentType.tag &&
        previousType.kind === currentType.kind
      ) {
        exclude.push(previousIndex)
      }
    })

    result.push(currentType)
  })

  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1
  })
}

function compileMap(/* lists... */) {
  var result = {
      scalar: {},
      sequence: {},
      mapping: {},
      fallback: {},
    },
    index,
    length

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType)
  }
  return result
}

function Schema(definition) {
  this.include = definition.include || []
  this.implicit = definition.implicit || []
  this.explicit = definition.explicit || []

  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new exception(
        'There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.',
      )
    }
  })

  this.compiledImplicit = compileList(this, 'implicit', [])
  this.compiledExplicit = compileList(this, 'explicit', [])
  this.compiledTypeMap = compileMap(
    this.compiledImplicit,
    this.compiledExplicit,
  )
}

Schema.DEFAULT = null

Schema.create = function createSchema() {
  var schemas, types

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT
      types = arguments[0]
      break

    case 2:
      schemas = arguments[0]
      types = arguments[1]
      break

    default:
      throw new exception(
        'Wrong number of arguments for Schema.create function',
      )
  }

  schemas = common.toArray(schemas)
  types = common.toArray(types)

  if (
    !schemas.every(function (schema) {
      return schema instanceof Schema
    })
  ) {
    throw new exception(
      'Specified list of super schemas (or a single Schema object) contains a non-Schema object.',
    )
  }

  if (
    !types.every(function (type$1) {
      return type$1 instanceof type
    })
  ) {
    throw new exception(
      'Specified list of YAML types (or a single Type object) contains a non-Type object.',
    )
  }

  return new Schema({
    include: schemas,
    explicit: types,
  })
}

var schema = Schema

var str = new type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) {
    return data !== null ? data : ''
  },
})

var seq = new type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) {
    return data !== null ? data : []
  },
})

var map = new type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) {
    return data !== null ? data : {}
  },
})

var failsafe = new schema({
  explicit: [str, seq, map],
})

function resolveYamlNull(data) {
  if (data === null) return true

  var max = data.length

  return (
    (max === 1 && data === '~') ||
    (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'))
  )
}

function constructYamlNull() {
  return null
}

function isNull(object) {
  return object === null
}

var _null = new type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () {
      return '~'
    },
    lowercase: function () {
      return 'null'
    },
    uppercase: function () {
      return 'NULL'
    },
    camelcase: function () {
      return 'Null'
    },
  },
  defaultStyle: 'lowercase',
})

function resolveYamlBoolean(data) {
  if (data === null) return false

  var max = data.length

  return (
    (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
    (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'))
  )
}

function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE'
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]'
}

var bool = new type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) {
      return object ? 'true' : 'false'
    },
    uppercase: function (object) {
      return object ? 'TRUE' : 'FALSE'
    },
    camelcase: function (object) {
      return object ? 'True' : 'False'
    },
  },
  defaultStyle: 'lowercase',
})

function isHexCode(c) {
  return (
    (0x30 /* 0 */ <= c && c <= 0x39) /* 9 */ ||
    (0x41 /* A */ <= c && c <= 0x46) /* F */ ||
    (0x61 /* a */ <= c && c <= 0x66) /* f */
  )
}

function isOctCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */
}

function isDecCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */
}

function resolveYamlInteger(data) {
  if (data === null) return false

  var max = data.length,
    index = 0,
    hasDigits = false,
    ch

  if (!max) return false

  ch = data[index]

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index]
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true
    ch = data[++index]

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++

      for (; index < max; index++) {
        ch = data[index]
        if (ch === '_') continue
        if (ch !== '0' && ch !== '1') return false
        hasDigits = true
      }
      return hasDigits && ch !== '_'
    }

    if (ch === 'x') {
      // base 16
      index++

      for (; index < max; index++) {
        ch = data[index]
        if (ch === '_') continue
        if (!isHexCode(data.charCodeAt(index))) return false
        hasDigits = true
      }
      return hasDigits && ch !== '_'
    }

    // base 8
    for (; index < max; index++) {
      ch = data[index]
      if (ch === '_') continue
      if (!isOctCode(data.charCodeAt(index))) return false
      hasDigits = true
    }
    return hasDigits && ch !== '_'
  }

  // base 10 (except 0) or base 60

  // value should not start with `_`;
  if (ch === '_') return false

  for (; index < max; index++) {
    ch = data[index]
    if (ch === '_') continue
    if (ch === ':') break
    if (!isDecCode(data.charCodeAt(index))) {
      return false
    }
    hasDigits = true
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false

  // if !base60 - done;
  if (ch !== ':') return true

  // base60 almost not used, no needs to optimize
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index))
}

function constructYamlInteger(data) {
  var value = data,
    sign = 1,
    ch,
    base,
    digits = []

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '')
  }

  ch = value[0]

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1
    value = value.slice(1)
    ch = value[0]
  }

  if (value === '0') return 0

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2)
    if (value[1] === 'x') return sign * parseInt(value, 16)
    return sign * parseInt(value, 8)
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10))
    })

    value = 0
    base = 1

    digits.forEach(function (d) {
      value += d * base
      base *= 60
    })

    return sign * value
  }

  return sign * parseInt(value, 10)
}

function isInteger(object) {
  return (
    Object.prototype.toString.call(object) === '[object Number]' &&
    object % 1 === 0 &&
    !common.isNegativeZero(object)
  )
}

var int_1 = new type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function (obj) {
      return obj >= 0
        ? '0b' + obj.toString(2)
        : '-0b' + obj.toString(2).slice(1)
    },
    octal: function (obj) {
      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1)
    },
    decimal: function (obj) {
      return obj.toString(10)
    },
    /* eslint-disable max-len */
    hexadecimal: function (obj) {
      return obj >= 0
        ? '0x' + obj.toString(16).toUpperCase()
        : '-0x' + obj.toString(16).toUpperCase().slice(1)
    },
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex'],
  },
})

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
    // .2e4, .2
    // special case, seems not from spec
    '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
    // 20:59
    '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
    // .inf
    '|[-+]?\\.(?:inf|Inf|INF)' +
    // .nan
    '|\\.(?:nan|NaN|NAN))$',
)

function resolveYamlFloat(data) {
  if (data === null) return false

  if (
    !YAML_FLOAT_PATTERN.test(data) ||
    // Quick hack to not allow integers end with `_`
    // Probably should update regexp & check speed
    data[data.length - 1] === '_'
  ) {
    return false
  }

  return true
}

function constructYamlFloat(data) {
  var value, sign, base, digits

  value = data.replace(/_/g, '').toLowerCase()
  sign = value[0] === '-' ? -1 : 1
  digits = []

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1)
  }

  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY
  } else if (value === '.nan') {
    return NaN
  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10))
    })

    value = 0.0
    base = 1

    digits.forEach(function (d) {
      value += d * base
      base *= 60
    })

    return sign * value
  }
  return sign * parseFloat(value, 10)
}

var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/

function representYamlFloat(object, style) {
  var res

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan'
      case 'uppercase':
        return '.NAN'
      case 'camelcase':
        return '.NaN'
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf'
      case 'uppercase':
        return '.INF'
      case 'camelcase':
        return '.Inf'
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf'
      case 'uppercase':
        return '-.INF'
      case 'camelcase':
        return '-.Inf'
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0'
  }

  res = object.toString(10)

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res
}

function isFloat(object) {
  return (
    Object.prototype.toString.call(object) === '[object Number]' &&
    (object % 1 !== 0 || common.isNegativeZero(object))
  )
}

var float_1 = new type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase',
})

var json = new schema({
  include: [failsafe],
  implicit: [_null, bool, int_1, float_1],
})

var core = new schema({
  include: [json],
})

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])' + // [1] year
    '-([0-9][0-9])' + // [2] month
    '-([0-9][0-9])$',
) // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])' + // [1] year
    '-([0-9][0-9]?)' + // [2] month
    '-([0-9][0-9]?)' + // [3] day
    '(?:[Tt]|[ \\t]+)' + // ...
    '([0-9][0-9]?)' + // [4] hour
    ':([0-9][0-9])' + // [5] minute
    ':([0-9][0-9])' + // [6] second
    '(?:\\.([0-9]*))?' + // [7] fraction
    '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
    '(?::([0-9][0-9]))?))?$',
) // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false
  if (YAML_DATE_REGEXP.exec(data) !== null) return true
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true
  return false
}

function constructYamlTimestamp(data) {
  var match,
    year,
    month,
    day,
    hour,
    minute,
    second,
    fraction = 0,
    delta = null,
    tz_hour,
    tz_minute,
    date

  match = YAML_DATE_REGEXP.exec(data)
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data)

  if (match === null) throw new Error('Date resolve error')

  // match: [1] year [2] month [3] day

  year = +match[1]
  month = +match[2] - 1 // JS month starts with 0
  day = +match[3]

  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day))
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +match[4]
  minute = +match[5]
  second = +match[6]

  if (match[7]) {
    fraction = match[7].slice(0, 3)
    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0'
    }
    fraction = +fraction
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +match[10]
    tz_minute = +(match[11] || 0)
    delta = (tz_hour * 60 + tz_minute) * 60000 // delta in mili-seconds
    if (match[9] === '-') delta = -delta
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction))

  if (delta) date.setTime(date.getTime() - delta)

  return date
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString()
}

var timestamp = new type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp,
})

function resolveYamlMerge(data) {
  return data === '<<' || data === null
}

var merge = new type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge,
})

/*eslint-disable no-bitwise*/

var NodeBuffer

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = commonjsRequire
  NodeBuffer = _require('buffer').Buffer
} catch (__) {}

// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r'

function resolveYamlBinary(data) {
  if (data === null) return false

  var code,
    idx,
    bitlen = 0,
    max = data.length,
    map = BASE64_MAP

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx))

    // Skip CR/LF
    if (code > 64) continue

    // Fail on illegal characters
    if (code < 0) return false

    bitlen += 6
  }

  // If there are any bits left, source was corrupted
  return bitlen % 8 === 0
}

function constructYamlBinary(data) {
  var idx,
    tailbits,
    input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
    max = input.length,
    map = BASE64_MAP,
    bits = 0,
    result = []

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push((bits >> 16) & 0xff)
      result.push((bits >> 8) & 0xff)
      result.push(bits & 0xff)
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx))
  }

  // Dump tail

  tailbits = (max % 4) * 6

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xff)
    result.push((bits >> 8) & 0xff)
    result.push(bits & 0xff)
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xff)
    result.push((bits >> 2) & 0xff)
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xff)
  }

  // Wrap into Buffer for NodeJS and leave Array for browser
  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result)
  }

  return result
}

function representYamlBinary(object /*, style*/) {
  var result = '',
    bits = 0,
    idx,
    tail,
    max = object.length,
    map = BASE64_MAP

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[(bits >> 18) & 0x3f]
      result += map[(bits >> 12) & 0x3f]
      result += map[(bits >> 6) & 0x3f]
      result += map[bits & 0x3f]
    }

    bits = (bits << 8) + object[idx]
  }

  // Dump tail

  tail = max % 3

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3f]
    result += map[(bits >> 12) & 0x3f]
    result += map[(bits >> 6) & 0x3f]
    result += map[bits & 0x3f]
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3f]
    result += map[(bits >> 4) & 0x3f]
    result += map[(bits << 2) & 0x3f]
    result += map[64]
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3f]
    result += map[(bits << 4) & 0x3f]
    result += map[64]
    result += map[64]
  }

  return result
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object)
}

var binary = new type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary,
})

var _hasOwnProperty = Object.prototype.hasOwnProperty
var _toString = Object.prototype.toString

function resolveYamlOmap(data) {
  if (data === null) return true

  var objectKeys = [],
    index,
    length,
    pair,
    pairKey,
    pairHasKey,
    object = data

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index]
    pairHasKey = false

    if (_toString.call(pair) !== '[object Object]') return false

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true
        else return false
      }
    }

    if (!pairHasKey) return false

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey)
    else return false
  }

  return true
}

function constructYamlOmap(data) {
  return data !== null ? data : []
}

var omap = new type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap,
})

var _toString$1 = Object.prototype.toString

function resolveYamlPairs(data) {
  if (data === null) return true

  var index,
    length,
    pair,
    keys,
    result,
    object = data

  result = new Array(object.length)

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index]

    if (_toString$1.call(pair) !== '[object Object]') return false

    keys = Object.keys(pair)

    if (keys.length !== 1) return false

    result[index] = [keys[0], pair[keys[0]]]
  }

  return true
}

function constructYamlPairs(data) {
  if (data === null) return []

  var index,
    length,
    pair,
    keys,
    result,
    object = data

  result = new Array(object.length)

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index]

    keys = Object.keys(pair)

    result[index] = [keys[0], pair[keys[0]]]
  }

  return result
}

var pairs = new type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs,
})

var _hasOwnProperty$1 = Object.prototype.hasOwnProperty

function resolveYamlSet(data) {
  if (data === null) return true

  var key,
    object = data

  for (key in object) {
    if (_hasOwnProperty$1.call(object, key)) {
      if (object[key] !== null) return false
    }
  }

  return true
}

function constructYamlSet(data) {
  return data !== null ? data : {}
}

var set = new type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet,
})

var default_safe = new schema({
  include: [core],
  implicit: [timestamp, merge],
  explicit: [binary, omap, pairs, set],
})

function resolveJavascriptUndefined() {
  return true
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined
}

function representJavascriptUndefined() {
  return ''
}

function isUndefined(object) {
  return typeof object === 'undefined'
}

var _undefined = new type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined,
})

function resolveJavascriptRegExp(data) {
  if (data === null) return false
  if (data.length === 0) return false

  var regexp = data,
    tail = /\/([gim]*)$/.exec(data),
    modifiers = ''

  // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1]

    if (modifiers.length > 3) return false
    // if expression starts with /, is should be properly terminated
    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false
  }

  return true
}

function constructJavascriptRegExp(data) {
  var regexp = data,
    tail = /\/([gim]*)$/.exec(data),
    modifiers = ''

  // `/foo/gim` - tail can be maximum 4 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1]
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1)
  }

  return new RegExp(regexp, modifiers)
}

function representJavascriptRegExp(object /*, style*/) {
  var result = '/' + object.source + '/'

  if (object.global) result += 'g'
  if (object.multiline) result += 'm'
  if (object.ignoreCase) result += 'i'

  return result
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]'
}

var regexp = new type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp,
})

var esprima

// Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//
try {
  // workaround to exclude package from browserify list.
  var _require$1 = commonjsRequire
  esprima = _require$1('esprima')
} catch (_) {
  /* eslint-disable no-redeclare */
  /* global window */
  if (typeof window !== 'undefined') esprima = window.esprima
}

function resolveJavascriptFunction(data) {
  if (data === null) return false

  try {
    var source = '(' + data + ')',
      ast = esprima.parse(source, { range: true })

    if (
      ast.type !== 'Program' ||
      ast.body.length !== 1 ||
      ast.body[0].type !== 'ExpressionStatement' ||
      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
        ast.body[0].expression.type !== 'FunctionExpression')
    ) {
      return false
    }

    return true
  } catch (err) {
    return false
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/

  var source = '(' + data + ')',
    ast = esprima.parse(source, { range: true }),
    params = [],
    body

  if (
    ast.type !== 'Program' ||
    ast.body.length !== 1 ||
    ast.body[0].type !== 'ExpressionStatement' ||
    (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
      ast.body[0].expression.type !== 'FunctionExpression')
  ) {
    throw new Error('Failed to resolve function')
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name)
  })

  body = ast.body[0].expression.body.range

  // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.
  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1))
  }
  // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.
  /*eslint-disable no-new-func*/
  return new Function(params, 'return ' + source.slice(body[0], body[1]))
}

function representJavascriptFunction(object /*, style*/) {
  return object.toString()
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]'
}

var _function = new type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction,
})

var default_full = (schema.DEFAULT = new schema({
  include: [default_safe],
  explicit: [_undefined, regexp, _function],
}))

/*eslint-disable max-len,no-use-before-define*/

var _hasOwnProperty$2 = Object.prototype.hasOwnProperty

var CONTEXT_FLOW_IN = 1
var CONTEXT_FLOW_OUT = 2
var CONTEXT_BLOCK_IN = 3
var CONTEXT_BLOCK_OUT = 4

var CHOMPING_CLIP = 1
var CHOMPING_STRIP = 2
var CHOMPING_KEEP = 3

var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i

function _class(obj) {
  return Object.prototype.toString.call(obj)
}

function is_EOL(c) {
  return c === 0x0a /* LF */ || c === 0x0d /* CR */
}

function is_WHITE_SPACE(c) {
  return c === 0x09 /* Tab */ || c === 0x20 /* Space */
}

function is_WS_OR_EOL(c) {
  return (
    c === 0x09 /* Tab */ ||
    c === 0x20 /* Space */ ||
    c === 0x0a /* LF */ ||
    c === 0x0d /* CR */
  )
}

function is_FLOW_INDICATOR(c) {
  return (
    c === 0x2c /* , */ ||
    c === 0x5b /* [ */ ||
    c === 0x5d /* ] */ ||
    c === 0x7b /* { */ ||
    c === 0x7d /* } */
  )
}

function fromHexCode(c) {
  var lc

  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20

  if (0x61 /* a */ <= lc && lc <= 0x66 /* f */) {
    return lc - 0x61 + 10
  }

  return -1
}

function escapedHexLen(c) {
  if (c === 0x78 /* x */) {
    return 2
  }
  if (c === 0x75 /* u */) {
    return 4
  }
  if (c === 0x55 /* U */) {
    return 8
  }
  return 0
}

function fromDecimalCode(c) {
  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30
  }

  return -1
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30 /* 0 */
    ? '\x00'
    : c === 0x61 /* a */
    ? '\x07'
    : c === 0x62 /* b */
    ? '\x08'
    : c === 0x74 /* t */
    ? '\x09'
    : c === 0x09 /* Tab */
    ? '\x09'
    : c === 0x6e /* n */
    ? '\x0A'
    : c === 0x76 /* v */
    ? '\x0B'
    : c === 0x66 /* f */
    ? '\x0C'
    : c === 0x72 /* r */
    ? '\x0D'
    : c === 0x65 /* e */
    ? '\x1B'
    : c === 0x20 /* Space */
    ? ' '
    : c === 0x22 /* " */
    ? '\x22'
    : c === 0x2f /* / */
    ? '/'
    : c === 0x5c /* \ */
    ? '\x5C'
    : c === 0x4e /* N */
    ? '\x85'
    : c === 0x5f /* _ */
    ? '\xA0'
    : c === 0x4c /* L */
    ? '\u2028'
    : c === 0x50 /* P */
    ? '\u2029'
    : ''
}

function charFromCodepoint(c) {
  if (c <= 0xffff) {
    return String.fromCharCode(c)
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xd800,
    ((c - 0x010000) & 0x03ff) + 0xdc00,
  )
}

var simpleEscapeCheck = new Array(256) // integer, for fast access
var simpleEscapeMap = new Array(256)
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0
  simpleEscapeMap[i] = simpleEscapeSequence(i)
}

function State(input, options) {
  this.input = input

  this.filename = options['filename'] || null
  this.schema = options['schema'] || default_full
  this.onWarning = options['onWarning'] || null
  this.legacy = options['legacy'] || false
  this.json = options['json'] || false
  this.listener = options['listener'] || null

  this.implicitTypes = this.schema.compiledImplicit
  this.typeMap = this.schema.compiledTypeMap

  this.length = input.length
  this.position = 0
  this.line = 0
  this.lineStart = 0
  this.lineIndent = 0

  this.documents = []

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  return new exception(
    message,
    new mark(
      state.filename,
      state.input,
      state.position,
      state.line,
      state.position - state.lineStart,
    ),
  )
}

function throwError(state, message) {
  throw generateError(state, message)
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message))
  }
}

var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive')
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument')
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0])

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive')
    }

    major = parseInt(match[1], 10)
    minor = parseInt(match[2], 10)

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document')
    }

    state.version = args[0]
    state.checkLineBreaks = minor < 2

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document')
    }
  },

  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments')
    }

    handle = args[0]
    prefix = args[1]

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(
        state,
        'ill-formed tag handle (first argument) of the TAG directive',
      )
    }

    if (_hasOwnProperty$2.call(state.tagMap, handle)) {
      throwError(
        state,
        'there is a previously declared suffix for "' + handle + '" tag handle',
      )
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(
        state,
        'ill-formed tag prefix (second argument) of the TAG directive',
      )
    }

    state.tagMap[handle] = prefix
  },
}

function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result

  if (start < end) {
    _result = state.input.slice(start, end)

    if (checkJson) {
      for (
        _position = 0, _length = _result.length;
        _position < _length;
        _position += 1
      ) {
        _character = _result.charCodeAt(_position)
        if (
          !(
            _character === 0x09 ||
            (0x20 <= _character && _character <= 0x10ffff)
          )
        ) {
          throwError(state, 'expected valid JSON character')
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters')
    }

    state.result += _result
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity

  if (!common.isObject(source)) {
    throwError(
      state,
      'cannot merge mappings; the provided source object is unacceptable',
    )
  }

  sourceKeys = Object.keys(source)

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index]

    if (!_hasOwnProperty$2.call(destination, key)) {
      destination[key] = source[key]
      overridableKeys[key] = true
    }
  }
}

function storeMappingPair(
  state,
  _result,
  overridableKeys,
  keyTag,
  keyNode,
  valueNode,
  startLine,
  startPos,
) {
  var index, quantity

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode)

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys')
      }

      if (
        typeof keyNode === 'object' &&
        _class(keyNode[index]) === '[object Object]'
      ) {
        keyNode[index] = '[object Object]'
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]'
  }

  keyNode = String(keyNode)

  if (_result === null) {
    _result = {}
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (
        index = 0, quantity = valueNode.length;
        index < quantity;
        index += 1
      ) {
        mergeMappings(state, _result, valueNode[index], overridableKeys)
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys)
    }
  } else {
    if (
      !state.json &&
      !_hasOwnProperty$2.call(overridableKeys, keyNode) &&
      _hasOwnProperty$2.call(_result, keyNode)
    ) {
      state.line = startLine || state.line
      state.position = startPos || state.position
      throwError(state, 'duplicated mapping key')
    }
    _result[keyNode] = valueNode
    delete overridableKeys[keyNode]
  }

  return _result
}

function readLineBreak(state) {
  var ch

  ch = state.input.charCodeAt(state.position)

  if (ch === 0x0a /* LF */) {
    state.position++
  } else if (ch === 0x0d /* CR */) {
    state.position++
    if (state.input.charCodeAt(state.position) === 0x0a /* LF */) {
      state.position++
    }
  } else {
    throwError(state, 'a line break is expected')
  }

  state.line += 1
  state.lineStart = state.position
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
    ch = state.input.charCodeAt(state.position)

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position)
    }

    if (allowComments && ch === 0x23 /* # */) {
      do {
        ch = state.input.charCodeAt(++state.position)
      } while (ch !== 0x0a /* LF */ && ch !== 0x0d /* CR */ && ch !== 0)
    }

    if (is_EOL(ch)) {
      readLineBreak(state)

      ch = state.input.charCodeAt(state.position)
      lineBreaks++
      state.lineIndent = 0

      while (ch === 0x20 /* Space */) {
        state.lineIndent++
        ch = state.input.charCodeAt(++state.position)
      }
    } else {
      break
    }
  }

  if (
    checkIndent !== -1 &&
    lineBreaks !== 0 &&
    state.lineIndent < checkIndent
  ) {
    throwWarning(state, 'deficient indentation')
  }

  return lineBreaks
}

function testDocumentSeparator(state) {
  var _position = state.position,
    ch

  ch = state.input.charCodeAt(_position)

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if (
    (ch === 0x2d /* - */ || ch === 0x2e) /* . */ &&
    ch === state.input.charCodeAt(_position + 1) &&
    ch === state.input.charCodeAt(_position + 2)
  ) {
    _position += 3

    ch = state.input.charCodeAt(_position)

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true
    }
  }

  return false
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' '
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1)
  }
}

function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
    following,
    captureStart,
    captureEnd,
    hasPendingContent,
    _line,
    _lineStart,
    _lineIndent,
    _kind = state.kind,
    _result = state.result,
    ch

  ch = state.input.charCodeAt(state.position)

  if (
    is_WS_OR_EOL(ch) ||
    is_FLOW_INDICATOR(ch) ||
    ch === 0x23 /* # */ ||
    ch === 0x26 /* & */ ||
    ch === 0x2a /* * */ ||
    ch === 0x21 /* ! */ ||
    ch === 0x7c /* | */ ||
    ch === 0x3e /* > */ ||
    ch === 0x27 /* ' */ ||
    ch === 0x22 /* " */ ||
    ch === 0x25 /* % */ ||
    ch === 0x40 /* @ */ ||
    ch === 0x60 /* ` */
  ) {
    return false
  }

  if (ch === 0x3f /* ? */ || ch === 0x2d /* - */) {
    following = state.input.charCodeAt(state.position + 1)

    if (
      is_WS_OR_EOL(following) ||
      (withinFlowCollection && is_FLOW_INDICATOR(following))
    ) {
      return false
    }
  }

  state.kind = 'scalar'
  state.result = ''
  captureStart = captureEnd = state.position
  hasPendingContent = false

  while (ch !== 0) {
    if (ch === 0x3a /* : */) {
      following = state.input.charCodeAt(state.position + 1)

      if (
        is_WS_OR_EOL(following) ||
        (withinFlowCollection && is_FLOW_INDICATOR(following))
      ) {
        break
      }
    } else if (ch === 0x23 /* # */) {
      preceding = state.input.charCodeAt(state.position - 1)

      if (is_WS_OR_EOL(preceding)) {
        break
      }
    } else if (
      (state.position === state.lineStart && testDocumentSeparator(state)) ||
      (withinFlowCollection && is_FLOW_INDICATOR(ch))
    ) {
      break
    } else if (is_EOL(ch)) {
      _line = state.line
      _lineStart = state.lineStart
      _lineIndent = state.lineIndent
      skipSeparationSpace(state, false, -1)

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true
        ch = state.input.charCodeAt(state.position)
        continue
      } else {
        state.position = captureEnd
        state.line = _line
        state.lineStart = _lineStart
        state.lineIndent = _lineIndent
        break
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false)
      writeFoldedLines(state, state.line - _line)
      captureStart = captureEnd = state.position
      hasPendingContent = false
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1
    }

    ch = state.input.charCodeAt(++state.position)
  }

  captureSegment(state, captureStart, captureEnd, false)

  if (state.result) {
    return true
  }

  state.kind = _kind
  state.result = _result
  return false
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd

  ch = state.input.charCodeAt(state.position)

  if (ch !== 0x27 /* ' */) {
    return false
  }

  state.kind = 'scalar'
  state.result = ''
  state.position++
  captureStart = captureEnd = state.position

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27 /* ' */) {
      captureSegment(state, captureStart, state.position, true)
      ch = state.input.charCodeAt(++state.position)

      if (ch === 0x27 /* ' */) {
        captureStart = state.position
        state.position++
        captureEnd = state.position
      } else {
        return true
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true)
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent))
      captureStart = captureEnd = state.position
    } else if (
      state.position === state.lineStart &&
      testDocumentSeparator(state)
    ) {
      throwError(
        state,
        'unexpected end of the document within a single quoted scalar',
      )
    } else {
      state.position++
      captureEnd = state.position
    }
  }

  throwError(
    state,
    'unexpected end of the stream within a single quoted scalar',
  )
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch

  ch = state.input.charCodeAt(state.position)

  if (ch !== 0x22 /* " */) {
    return false
  }

  state.kind = 'scalar'
  state.result = ''
  state.position++
  captureStart = captureEnd = state.position

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22 /* " */) {
      captureSegment(state, captureStart, state.position, true)
      state.position++
      return true
    } else if (ch === 0x5c /* \ */) {
      captureSegment(state, captureStart, state.position, true)
      ch = state.input.charCodeAt(++state.position)

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent)

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch]
        state.position++
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp
        hexResult = 0

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position)

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp
          } else {
            throwError(state, 'expected hexadecimal character')
          }
        }

        state.result += charFromCodepoint(hexResult)

        state.position++
      } else {
        throwError(state, 'unknown escape sequence')
      }

      captureStart = captureEnd = state.position
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true)
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent))
      captureStart = captureEnd = state.position
    } else if (
      state.position === state.lineStart &&
      testDocumentSeparator(state)
    ) {
      throwError(
        state,
        'unexpected end of the document within a double quoted scalar',
      )
    } else {
      state.position++
      captureEnd = state.position
    }
  }

  throwError(
    state,
    'unexpected end of the stream within a double quoted scalar',
  )
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
    _line,
    _tag = state.tag,
    _result,
    _anchor = state.anchor,
    following,
    terminator,
    isPair,
    isExplicitPair,
    isMapping,
    overridableKeys = {},
    keyNode,
    keyTag,
    valueNode,
    ch

  ch = state.input.charCodeAt(state.position)

  if (ch === 0x5b /* [ */) {
    terminator = 0x5d /* ] */
    isMapping = false
    _result = []
  } else if (ch === 0x7b /* { */) {
    terminator = 0x7d /* } */
    isMapping = true
    _result = {}
  } else {
    return false
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result
  }

  ch = state.input.charCodeAt(++state.position)

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent)

    ch = state.input.charCodeAt(state.position)

    if (ch === terminator) {
      state.position++
      state.tag = _tag
      state.anchor = _anchor
      state.kind = isMapping ? 'mapping' : 'sequence'
      state.result = _result
      return true
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries')
    }

    keyTag = keyNode = valueNode = null
    isPair = isExplicitPair = false

    if (ch === 0x3f /* ? */) {
      following = state.input.charCodeAt(state.position + 1)

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true
        state.position++
        skipSeparationSpace(state, true, nodeIndent)
      }
    }

    _line = state.line
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true)
    keyTag = state.tag
    keyNode = state.result
    skipSeparationSpace(state, true, nodeIndent)

    ch = state.input.charCodeAt(state.position)

    if ((isExplicitPair || state.line === _line) && ch === 0x3a /* : */) {
      isPair = true
      ch = state.input.charCodeAt(++state.position)
      skipSeparationSpace(state, true, nodeIndent)
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true)
      valueNode = state.result
    }

    if (isMapping) {
      storeMappingPair(
        state,
        _result,
        overridableKeys,
        keyTag,
        keyNode,
        valueNode,
      )
    } else if (isPair) {
      _result.push(
        storeMappingPair(
          state,
          null,
          overridableKeys,
          keyTag,
          keyNode,
          valueNode,
        ),
      )
    } else {
      _result.push(keyNode)
    }

    skipSeparationSpace(state, true, nodeIndent)

    ch = state.input.charCodeAt(state.position)

    if (ch === 0x2c /* , */) {
      readNext = true
      ch = state.input.charCodeAt(++state.position)
    } else {
      readNext = false
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection')
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
    folding,
    chomping = CHOMPING_CLIP,
    didReadContent = false,
    detectedIndent = false,
    textIndent = nodeIndent,
    emptyLines = 0,
    atMoreIndented = false,
    tmp,
    ch

  ch = state.input.charCodeAt(state.position)

  if (ch === 0x7c /* | */) {
    folding = false
  } else if (ch === 0x3e /* > */) {
    folding = true
  } else {
    return false
  }

  state.kind = 'scalar'
  state.result = ''

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position)

    if (ch === 0x2b /* + */ || ch === 0x2d /* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 0x2b /* + */ ? CHOMPING_KEEP : CHOMPING_STRIP
      } else {
        throwError(state, 'repeat of a chomping mode identifier')
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(
          state,
          'bad explicit indentation width of a block scalar; it cannot be less than one',
        )
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1
        detectedIndent = true
      } else {
        throwError(state, 'repeat of an indentation width identifier')
      }
    } else {
      break
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position)
    } while (is_WHITE_SPACE(ch))

    if (ch === 0x23 /* # */) {
      do {
        ch = state.input.charCodeAt(++state.position)
      } while (!is_EOL(ch) && ch !== 0)
    }
  }

  while (ch !== 0) {
    readLineBreak(state)
    state.lineIndent = 0

    ch = state.input.charCodeAt(state.position)

    while (
      (!detectedIndent || state.lineIndent < textIndent) &&
      ch === 0x20 /* Space */
    ) {
      state.lineIndent++
      ch = state.input.charCodeAt(++state.position)
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent
    }

    if (is_EOL(ch)) {
      emptyLines++
      continue
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {
      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat(
          '\n',
          didReadContent ? 1 + emptyLines : emptyLines,
        )
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n'
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {
      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat(
          '\n',
          didReadContent ? 1 + emptyLines : emptyLines,
        )

        // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false
        state.result += common.repeat('\n', emptyLines + 1)

        // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' '
        }

        // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines)
      }

      // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat(
        '\n',
        didReadContent ? 1 + emptyLines : emptyLines,
      )
    }

    didReadContent = true
    detectedIndent = true
    emptyLines = 0
    captureStart = state.position

    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position)
    }

    captureSegment(state, captureStart, state.position, false)
  }

  return true
}

function readBlockSequence(state, nodeIndent) {
  var _line,
    _tag = state.tag,
    _anchor = state.anchor,
    _result = [],
    following,
    detected = false,
    ch

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result
  }

  ch = state.input.charCodeAt(state.position)

  while (ch !== 0) {
    if (ch !== 0x2d /* - */) {
      break
    }

    following = state.input.charCodeAt(state.position + 1)

    if (!is_WS_OR_EOL(following)) {
      break
    }

    detected = true
    state.position++

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null)
        ch = state.input.charCodeAt(state.position)
        continue
      }
    }

    _line = state.line
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true)
    _result.push(state.result)
    skipSeparationSpace(state, true, -1)

    ch = state.input.charCodeAt(state.position)

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry')
    } else if (state.lineIndent < nodeIndent) {
      break
    }
  }

  if (detected) {
    state.tag = _tag
    state.anchor = _anchor
    state.kind = 'sequence'
    state.result = _result
    return true
  }
  return false
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
    allowCompact,
    _line,
    _pos,
    _tag = state.tag,
    _anchor = state.anchor,
    _result = {},
    overridableKeys = {},
    keyTag = null,
    keyNode = null,
    valueNode = null,
    atExplicitKey = false,
    detected = false,
    ch

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result
  }

  ch = state.input.charCodeAt(state.position)

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1)
    _line = state.line // Save the current line.
    _pos = state.position

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if (
      (ch === 0x3f /* ? */ || ch === 0x3a /*: */) &&
      is_WS_OR_EOL(following)
    ) {
      if (ch === 0x3f /* ? */) {
        if (atExplicitKey) {
          storeMappingPair(
            state,
            _result,
            overridableKeys,
            keyTag,
            keyNode,
            null,
          )
          keyTag = keyNode = valueNode = null
        }

        detected = true
        atExplicitKey = true
        allowCompact = true
      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false
        allowCompact = true
      } else {
        throwError(
          state,
          'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line',
        )
      }

      state.position += 1
      ch = following

      //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position)

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position)
        }

        if (ch === 0x3a /* : */) {
          ch = state.input.charCodeAt(++state.position)

          if (!is_WS_OR_EOL(ch)) {
            throwError(
              state,
              'a whitespace character is expected after the key-value separator within a block mapping',
            )
          }

          if (atExplicitKey) {
            storeMappingPair(
              state,
              _result,
              overridableKeys,
              keyTag,
              keyNode,
              null,
            )
            keyTag = keyNode = valueNode = null
          }

          detected = true
          atExplicitKey = false
          allowCompact = false
          keyTag = state.tag
          keyNode = state.result
        } else if (detected) {
          throwError(
            state,
            'can not read an implicit mapping pair; a colon is missed',
          )
        } else {
          state.tag = _tag
          state.anchor = _anchor
          return true // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(
          state,
          'can not read a block mapping entry; a multiline key may not be an implicit key',
        )
      } else {
        state.tag = _tag
        state.anchor = _anchor
        return true // Keep the result of `composeNode`.
      }
    } else {
      break // Reading is done. Go to the epilogue.
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (
        composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)
      ) {
        if (atExplicitKey) {
          keyNode = state.result
        } else {
          valueNode = state.result
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(
          state,
          _result,
          overridableKeys,
          keyTag,
          keyNode,
          valueNode,
          _line,
          _pos,
        )
        keyTag = keyNode = valueNode = null
      }

      skipSeparationSpace(state, true, -1)
      ch = state.input.charCodeAt(state.position)
    }

    if (state.lineIndent > nodeIndent && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry')
    } else if (state.lineIndent < nodeIndent) {
      break
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null)
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag
    state.anchor = _anchor
    state.kind = 'mapping'
    state.result = _result
  }

  return detected
}

function readTagProperty(state) {
  var _position,
    isVerbatim = false,
    isNamed = false,
    tagHandle,
    tagName,
    ch

  ch = state.input.charCodeAt(state.position)

  if (ch !== 0x21 /* ! */) return false

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property')
  }

  ch = state.input.charCodeAt(++state.position)

  if (ch === 0x3c /* < */) {
    isVerbatim = true
    ch = state.input.charCodeAt(++state.position)
  } else if (ch === 0x21 /* ! */) {
    isNamed = true
    tagHandle = '!!'
    ch = state.input.charCodeAt(++state.position)
  } else {
    tagHandle = '!'
  }

  _position = state.position

  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position)
    } while (ch !== 0 && ch !== 0x3e /* > */)

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position)
      ch = state.input.charCodeAt(++state.position)
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag')
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 0x21 /* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1)

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters')
          }

          isNamed = true
          _position = state.position + 1
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks')
        }
      }

      ch = state.input.charCodeAt(++state.position)
    }

    tagName = state.input.slice(_position, state.position)

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters')
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName)
  }

  if (isVerbatim) {
    state.tag = tagName
  } else if (_hasOwnProperty$2.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"')
  }

  return true
}

function readAnchorProperty(state) {
  var _position, ch

  ch = state.input.charCodeAt(state.position)

  if (ch !== 0x26 /* & */) return false

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property')
  }

  ch = state.input.charCodeAt(++state.position)
  _position = state.position

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position)
  }

  if (state.position === _position) {
    throwError(
      state,
      'name of an anchor node must contain at least one character',
    )
  }

  state.anchor = state.input.slice(_position, state.position)
  return true
}

function readAlias(state) {
  var _position, alias, ch

  ch = state.input.charCodeAt(state.position)

  if (ch !== 0x2a /* * */) return false

  ch = state.input.charCodeAt(++state.position)
  _position = state.position

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position)
  }

  if (state.position === _position) {
    throwError(
      state,
      'name of an alias node must contain at least one character',
    )
  }

  alias = state.input.slice(_position, state.position)

  if (!state.anchorMap.hasOwnProperty(alias)) {
    throwError(state, 'unidentified alias "' + alias + '"')
  }

  state.result = state.anchorMap[alias]
  skipSeparationSpace(state, true, -1)
  return true
}

function composeNode(
  state,
  parentIndent,
  nodeContext,
  allowToSeek,
  allowCompact,
) {
  var allowBlockStyles,
    allowBlockScalars,
    allowBlockCollections,
    indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
    atNewLine = false,
    hasContent = false,
    typeIndex,
    typeQuantity,
    type,
    flowIndent,
    blockIndent

  if (state.listener !== null) {
    state.listener('open', state)
  }

  state.tag = null
  state.anchor = null
  state.kind = null
  state.result = null

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true

      if (state.lineIndent > parentIndent) {
        indentStatus = 1
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true
        allowBlockCollections = allowBlockStyles

        if (state.lineIndent > parentIndent) {
          indentStatus = 1
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1
        }
      } else {
        allowBlockCollections = false
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent
    } else {
      flowIndent = parentIndent + 1
    }

    blockIndent = state.position - state.lineStart

    if (indentStatus === 1) {
      if (
        (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
            readBlockMapping(state, blockIndent, flowIndent))) ||
        readFlowCollection(state, flowIndent)
      ) {
        hasContent = true
      } else {
        if (
          (allowBlockScalars && readBlockScalar(state, flowIndent)) ||
          readSingleQuotedScalar(state, flowIndent) ||
          readDoubleQuotedScalar(state, flowIndent)
        ) {
          hasContent = true
        } else if (readAlias(state)) {
          hasContent = true

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties')
          }
        } else if (
          readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)
        ) {
          hasContent = true

          if (state.tag === null) {
            state.tag = '?'
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent =
        allowBlockCollections && readBlockSequence(state, blockIndent)
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      // Implicit resolving is not allowed for non-scalar types, and '?'
      // non-specific tag is only automatically assigned to plain scalars.
      //
      // We only need to check kind conformity in case user explicitly assigns '?'
      // tag, for example like this: "!<?> [0]"
      //
      if (state.result !== null && state.kind !== 'scalar') {
        throwError(
          state,
          'unacceptable node kind for !<?> tag; it should be "scalar", not "' +
            state.kind +
            '"',
        )
      }

      for (
        typeIndex = 0, typeQuantity = state.implicitTypes.length;
        typeIndex < typeQuantity;
        typeIndex += 1
      ) {
        type = state.implicitTypes[typeIndex]

        if (type.resolve(state.result)) {
          // `state.result` updated in resolver if matched
          state.result = type.construct(state.result)
          state.tag = type.tag
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result
          }
          break
        }
      }
    } else if (
      _hasOwnProperty$2.call(state.typeMap[state.kind || 'fallback'], state.tag)
    ) {
      type = state.typeMap[state.kind || 'fallback'][state.tag]

      if (state.result !== null && type.kind !== state.kind) {
        throwError(
          state,
          'unacceptable node kind for !<' +
            state.tag +
            '> tag; it should be "' +
            type.kind +
            '", not "' +
            state.kind +
            '"',
        )
      }

      if (!type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        throwError(
          state,
          'cannot resolve a node with !<' + state.tag + '> explicit tag',
        )
      } else {
        state.result = type.construct(state.result)
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>')
    }
  }

  if (state.listener !== null) {
    state.listener('close', state)
  }
  return state.tag !== null || state.anchor !== null || hasContent
}

function readDocument(state) {
  var documentStart = state.position,
    _position,
    directiveName,
    directiveArgs,
    hasDirectives = false,
    ch

  state.version = null
  state.checkLineBreaks = state.legacy
  state.tagMap = {}
  state.anchorMap = {}

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1)

    ch = state.input.charCodeAt(state.position)

    if (state.lineIndent > 0 || ch !== 0x25 /* % */) {
      break
    }

    hasDirectives = true
    ch = state.input.charCodeAt(++state.position)
    _position = state.position

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position)
    }

    directiveName = state.input.slice(_position, state.position)
    directiveArgs = []

    if (directiveName.length < 1) {
      throwError(
        state,
        'directive name must not be less than one character in length',
      )
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position)
      }

      if (ch === 0x23 /* # */) {
        do {
          ch = state.input.charCodeAt(++state.position)
        } while (ch !== 0 && !is_EOL(ch))
        break
      }

      if (is_EOL(ch)) break

      _position = state.position

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position)
      }

      directiveArgs.push(state.input.slice(_position, state.position))
    }

    if (ch !== 0) readLineBreak(state)

    if (_hasOwnProperty$2.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs)
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"')
    }
  }

  skipSeparationSpace(state, true, -1)

  if (
    state.lineIndent === 0 &&
    state.input.charCodeAt(state.position) === 0x2d /* - */ &&
    state.input.charCodeAt(state.position + 1) === 0x2d /* - */ &&
    state.input.charCodeAt(state.position + 2) === 0x2d /* - */
  ) {
    state.position += 3
    skipSeparationSpace(state, true, -1)
  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected')
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true)
  skipSeparationSpace(state, true, -1)

  if (
    state.checkLineBreaks &&
    PATTERN_NON_ASCII_LINE_BREAKS.test(
      state.input.slice(documentStart, state.position),
    )
  ) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content')
  }

  state.documents.push(state.result)

  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 0x2e /* . */) {
      state.position += 3
      skipSeparationSpace(state, true, -1)
    }
    return
  }

  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected')
  } else {
    return
  }
}

function loadDocuments(input, options) {
  input = String(input)
  options = options || {}

  if (input.length !== 0) {
    // Add tailing `\n` if not exists
    if (
      input.charCodeAt(input.length - 1) !== 0x0a /* LF */ &&
      input.charCodeAt(input.length - 1) !== 0x0d /* CR */
    ) {
      input += '\n'
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xfeff) {
      input = input.slice(1)
    }
  }

  var state = new State(input, options)

  var nullpos = input.indexOf('\0')

  if (nullpos !== -1) {
    state.position = nullpos
    throwError(state, 'null byte is not allowed in input')
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0'

  while (state.input.charCodeAt(state.position) === 0x20 /* Space */) {
    state.lineIndent += 1
    state.position += 1
  }

  while (state.position < state.length - 1) {
    readDocument(state)
  }

  return state.documents
}

function loadAll(input, iterator, options) {
  if (
    iterator !== null &&
    typeof iterator === 'object' &&
    typeof options === 'undefined'
  ) {
    options = iterator
    iterator = null
  }

  var documents = loadDocuments(input, options)

  if (typeof iterator !== 'function') {
    return documents
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index])
  }
}

function load(input, options) {
  var documents = loadDocuments(input, options)

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined
  } else if (documents.length === 1) {
    return documents[0]
  }
  throw new exception(
    'expected a single document in the stream, but found more',
  )
}

function safeLoadAll(input, iterator, options) {
  if (
    typeof iterator === 'object' &&
    iterator !== null &&
    typeof options === 'undefined'
  ) {
    options = iterator
    iterator = null
  }

  return loadAll(
    input,
    iterator,
    common.extend({ schema: default_safe }, options),
  )
}

function safeLoad(input, options) {
  return load(input, common.extend({ schema: default_safe }, options))
}

var loadAll_1 = loadAll
var load_1 = load
var safeLoadAll_1 = safeLoadAll
var safeLoad_1 = safeLoad

var loader = {
  loadAll: loadAll_1,
  load: load_1,
  safeLoadAll: safeLoadAll_1,
  safeLoad: safeLoad_1,
}

/*eslint-disable no-use-before-define*/

var _toString$2 = Object.prototype.toString
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty

var CHAR_TAB = 0x09 /* Tab */
var CHAR_LINE_FEED = 0x0a /* LF */
var CHAR_CARRIAGE_RETURN = 0x0d /* CR */
var CHAR_SPACE = 0x20 /* Space */
var CHAR_EXCLAMATION = 0x21 /* ! */
var CHAR_DOUBLE_QUOTE = 0x22 /* " */
var CHAR_SHARP = 0x23 /* # */
var CHAR_PERCENT = 0x25 /* % */
var CHAR_AMPERSAND = 0x26 /* & */
var CHAR_SINGLE_QUOTE = 0x27 /* ' */
var CHAR_ASTERISK = 0x2a /* * */
var CHAR_COMMA = 0x2c /* , */
var CHAR_MINUS = 0x2d /* - */
var CHAR_COLON = 0x3a /* : */
var CHAR_EQUALS = 0x3d /* = */
var CHAR_GREATER_THAN = 0x3e /* > */
var CHAR_QUESTION = 0x3f /* ? */
var CHAR_COMMERCIAL_AT = 0x40 /* @ */
var CHAR_LEFT_SQUARE_BRACKET = 0x5b /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5d /* ] */
var CHAR_GRAVE_ACCENT = 0x60 /* ` */
var CHAR_LEFT_CURLY_BRACKET = 0x7b /* { */
var CHAR_VERTICAL_LINE = 0x7c /* | */
var CHAR_RIGHT_CURLY_BRACKET = 0x7d /* } */

var ESCAPE_SEQUENCES = {}

ESCAPE_SEQUENCES[0x00] = '\\0'
ESCAPE_SEQUENCES[0x07] = '\\a'
ESCAPE_SEQUENCES[0x08] = '\\b'
ESCAPE_SEQUENCES[0x09] = '\\t'
ESCAPE_SEQUENCES[0x0a] = '\\n'
ESCAPE_SEQUENCES[0x0b] = '\\v'
ESCAPE_SEQUENCES[0x0c] = '\\f'
ESCAPE_SEQUENCES[0x0d] = '\\r'
ESCAPE_SEQUENCES[0x1b] = '\\e'
ESCAPE_SEQUENCES[0x22] = '\\"'
ESCAPE_SEQUENCES[0x5c] = '\\\\'
ESCAPE_SEQUENCES[0x85] = '\\N'
ESCAPE_SEQUENCES[0xa0] = '\\_'
ESCAPE_SEQUENCES[0x2028] = '\\L'
ESCAPE_SEQUENCES[0x2029] = '\\P'

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y',
  'Y',
  'yes',
  'Yes',
  'YES',
  'on',
  'On',
  'ON',
  'n',
  'N',
  'no',
  'No',
  'NO',
  'off',
  'Off',
  'OFF',
]

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type

  if (map === null) return {}

  result = {}
  keys = Object.keys(map)

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index]
    style = String(map[tag])

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2)
    }
    type = schema.compiledTypeMap['fallback'][tag]

    if (type && _hasOwnProperty$3.call(type.styleAliases, style)) {
      style = type.styleAliases[style]
    }

    result[tag] = style
  }

  return result
}

function encodeHex(character) {
  var string, handle, length

  string = character.toString(16).toUpperCase()

  if (character <= 0xff) {
    handle = 'x'
    length = 2
  } else if (character <= 0xffff) {
    handle = 'u'
    length = 4
  } else if (character <= 0xffffffff) {
    handle = 'U'
    length = 8
  } else {
    throw new exception(
      'code point within a string may not be greater than 0xFFFFFFFF',
    )
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string
}

function State$1(options) {
  this.schema = options['schema'] || default_full
  this.indent = Math.max(1, options['indent'] || 2)
  this.noArrayIndent = options['noArrayIndent'] || false
  this.skipInvalid = options['skipInvalid'] || false
  this.flowLevel = common.isNothing(options['flowLevel'])
    ? -1
    : options['flowLevel']
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null)
  this.sortKeys = options['sortKeys'] || false
  this.lineWidth = options['lineWidth'] || 80
  this.noRefs = options['noRefs'] || false
  this.noCompatMode = options['noCompatMode'] || false
  this.condenseFlow = options['condenseFlow'] || false

  this.implicitTypes = this.schema.compiledImplicit
  this.explicitTypes = this.schema.compiledExplicit

  this.tag = null
  this.result = ''

  this.duplicates = []
  this.usedDuplicates = null
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
    position = 0,
    next = -1,
    result = '',
    line,
    length = string.length

  while (position < length) {
    next = string.indexOf('\n', position)
    if (next === -1) {
      line = string.slice(position)
      position = length
    } else {
      line = string.slice(position, next + 1)
      position = next + 1
    }

    if (line.length && line !== '\n') result += ind

    result += line
  }

  return result
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level)
}

function testImplicitResolving(state, str) {
  var index, length, type

  for (
    index = 0, length = state.implicitTypes.length;
    index < length;
    index += 1
  ) {
    type = state.implicitTypes[index]

    if (type.resolve(str)) {
      return true
    }
  }

  return false
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return (
    (0x00020 <= c && c <= 0x00007e) ||
    (0x000a1 <= c && c <= 0x00d7ff && c !== 0x2028 && c !== 0x2029) ||
    (0x0e000 <= c && c <= 0x00fffd && c !== 0xfeff) /* BOM */ ||
    (0x10000 <= c && c <= 0x10ffff)
  )
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// [24] b-line-feed       ::=     #xA    /* LF */
// [25] b-carriage-return ::=     #xD    /* CR */
// [3]  c-byte-order-mark ::=     #xFEFF
function isNsChar(c) {
  return (
    isPrintable(c) &&
    !isWhitespace(c) &&
    // byte-order-mark
    c !== 0xfeff &&
    // b-char
    c !== CHAR_CARRIAGE_RETURN &&
    c !== CHAR_LINE_FEED
  )
}

// Simplified test for values allowed after the first character in plain style.
function isPlainSafe(c, prev) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return (
    isPrintable(c) &&
    c !== 0xfeff &&
    // - c-flow-indicator
    c !== CHAR_COMMA &&
    c !== CHAR_LEFT_SQUARE_BRACKET &&
    c !== CHAR_RIGHT_SQUARE_BRACKET &&
    c !== CHAR_LEFT_CURLY_BRACKET &&
    c !== CHAR_RIGHT_CURLY_BRACKET &&
    // - ":" - "#"
    // /* An ns-char preceding */ "#"
    c !== CHAR_COLON &&
    (c !== CHAR_SHARP || (prev && isNsChar(prev)))
  )
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return (
    isPrintable(c) &&
    c !== 0xfeff &&
    !isWhitespace(c) && // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    c !== CHAR_MINUS &&
    c !== CHAR_QUESTION &&
    c !== CHAR_COLON &&
    c !== CHAR_COMMA &&
    c !== CHAR_LEFT_SQUARE_BRACKET &&
    c !== CHAR_RIGHT_SQUARE_BRACKET &&
    c !== CHAR_LEFT_CURLY_BRACKET &&
    c !== CHAR_RIGHT_CURLY_BRACKET &&
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    c !== CHAR_SHARP &&
    c !== CHAR_AMPERSAND &&
    c !== CHAR_ASTERISK &&
    c !== CHAR_EXCLAMATION &&
    c !== CHAR_VERTICAL_LINE &&
    c !== CHAR_EQUALS &&
    c !== CHAR_GREATER_THAN &&
    c !== CHAR_SINGLE_QUOTE &&
    c !== CHAR_DOUBLE_QUOTE &&
    // | “%” | “@” | “`”)
    c !== CHAR_PERCENT &&
    c !== CHAR_COMMERCIAL_AT &&
    c !== CHAR_GRAVE_ACCENT
  )
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /
  return leadingSpaceRe.test(string)
}

var STYLE_PLAIN = 1,
  STYLE_SINGLE = 2,
  STYLE_LITERAL = 3,
  STYLE_FOLDED = 4,
  STYLE_DOUBLE = 5

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(
  string,
  singleLineOnly,
  indentPerLevel,
  lineWidth,
  testAmbiguousType,
) {
  var i
  var char, prev_char
  var hasLineBreak = false
  var hasFoldableLine = false // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1
  var previousLineBreak = -1 // count the first line correctly
  var plain =
    isPlainSafeFirst(string.charCodeAt(0)) &&
    !isWhitespace(string.charCodeAt(string.length - 1))

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i)
      if (!isPrintable(char)) {
        return STYLE_DOUBLE
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null
      plain = plain && isPlainSafe(char, prev_char)
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i)
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine =
            hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
              string[previousLineBreak + 1] !== ' ')
          previousLineBreak = i
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null
      plain = plain && isPlainSafe(char, prev_char)
    }
    // in case the end is missing a \n
    hasFoldableLine =
      hasFoldableLine ||
      (shouldTrackWidth &&
        i - previousLineBreak - 1 > lineWidth &&
        string[previousLineBreak + 1] !== ' ')
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey) {
  state.dump = (function () {
    if (string.length === 0) {
      return "''"
    }
    if (
      !state.noCompatMode &&
      DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1
    ) {
      return "'" + string + "'"
    }

    var indent = state.indent * Math.max(1, level) // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth =
      state.lineWidth === -1
        ? -1
        : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent)

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly =
      iskey ||
      // No block styles in flow mode.
      (state.flowLevel > -1 && level >= state.flowLevel)
    function testAmbiguity(string) {
      return testImplicitResolving(state, string)
    }

    switch (
      chooseScalarStyle(
        string,
        singleLineOnly,
        state.indent,
        lineWidth,
        testAmbiguity,
      )
    ) {
      case STYLE_PLAIN:
        return string
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'"
      case STYLE_LITERAL:
        return (
          '|' +
          blockHeader(string, state.indent) +
          dropEndingNewline(indentString(string, indent))
        )
      case STYLE_FOLDED:
        return (
          '>' +
          blockHeader(string, state.indent) +
          dropEndingNewline(indentString(foldString(string, lineWidth), indent))
        )
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"'
      default:
        throw new exception('impossible error: invalid scalar style')
    }
  })()
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string)
    ? String(indentPerLevel)
    : ''

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip = string[string.length - 1] === '\n'
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n')
  var chomp = keep ? '+' : clip ? '' : '-'

  return indentIndicator + chomp + '\n'
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n')
    nextLF = nextLF !== -1 ? nextLF : string.length
    lineRe.lastIndex = nextLF
    return foldLine(string.slice(0, nextLF), width)
  })()
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' '
  var moreIndented

  // rest of the lines
  var match
  while ((match = lineRe.exec(string))) {
    var prefix = match[1],
      line = match[2]
    moreIndented = line[0] === ' '
    result +=
      prefix +
      (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') +
      foldLine(line, width)
    prevMoreIndented = moreIndented
  }

  return result
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g // note: the match index will always be <= length-2.
  var match
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0,
    end,
    curr = 0,
    next = 0
  var result = ''

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = curr > start ? curr : next // derive end <= length-2
      result += '\n' + line.slice(start, end)
      // skip the space that was output as \n
      start = end + 1 // derive start <= length-1
    }
    curr = next
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n'
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1)
  } else {
    result += line.slice(start)
  }

  return result.slice(1) // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = ''
  var char, nextChar
  var escapeSeq

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i)
    // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
    if (char >= 0xd800 && char <= 0xdbff /* high surrogate */) {
      nextChar = string.charCodeAt(i + 1)
      if (nextChar >= 0xdc00 && nextChar <= 0xdfff /* low surrogate */) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex(
          (char - 0xd800) * 0x400 + nextChar - 0xdc00 + 0x10000,
        )
        // Advance index one extra since we already used that char here.
        i++
        continue
      }
    }
    escapeSeq = ESCAPE_SEQUENCES[char]
    result +=
      !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char)
  }

  return result
}

function writeFlowSequence(state, level, object) {
  var _result = '',
    _tag = state.tag,
    index,
    length

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '')
      _result += state.dump
    }
  }

  state.tag = _tag
  state.dump = '[' + _result + ']'
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
    _tag = state.tag,
    index,
    length

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level)
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-'
      } else {
        _result += '- '
      }

      _result += state.dump
    }
  }

  state.tag = _tag
  state.dump = _result || '[]' // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
    _tag = state.tag,
    objectKeyList = Object.keys(object),
    index,
    length,
    objectKey,
    objectValue,
    pairBuffer

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = ''
    if (index !== 0) pairBuffer += ', '

    if (state.condenseFlow) pairBuffer += '"'

    objectKey = objectKeyList[index]
    objectValue = object[objectKey]

    if (!writeNode(state, level, objectKey, false, false)) {
      continue // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? '

    pairBuffer +=
      state.dump +
      (state.condenseFlow ? '"' : '') +
      ':' +
      (state.condenseFlow ? '' : ' ')

    if (!writeNode(state, level, objectValue, false, false)) {
      continue // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump

    // Both key and value are valid.
    _result += pairBuffer
  }

  state.tag = _tag
  state.dump = '{' + _result + '}'
}

function writeBlockMapping(state, level, object, compact) {
  var _result = '',
    _tag = state.tag,
    objectKeyList = Object.keys(object),
    index,
    length,
    objectKey,
    objectValue,
    explicitPair,
    pairBuffer

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort()
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys)
  } else if (state.sortKeys) {
    // Something is wrong
    throw new exception('sortKeys must be a boolean or a function')
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = ''

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level)
    }

    objectKey = objectKeyList[index]
    objectValue = object[objectKey]

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue // Skip this pair because of invalid key.
    }

    explicitPair =
      (state.tag !== null && state.tag !== '?') ||
      (state.dump && state.dump.length > 1024)

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?'
      } else {
        pairBuffer += '? '
      }
    }

    pairBuffer += state.dump

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level)
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':'
    } else {
      pairBuffer += ': '
    }

    pairBuffer += state.dump

    // Both key and value are valid.
    _result += pairBuffer
  }

  state.tag = _tag
  state.dump = _result || '{}' // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style

  typeList = explicit ? state.explicitTypes : state.implicitTypes

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index]

    if (
      (type.instanceOf || type.predicate) &&
      (!type.instanceOf ||
        (typeof object === 'object' && object instanceof type.instanceOf)) &&
      (!type.predicate || type.predicate(object))
    ) {
      state.tag = explicit ? type.tag : '?'

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle

        if (_toString$2.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style)
        } else if (_hasOwnProperty$3.call(type.represent, style)) {
          _result = type.represent[style](object, style)
        } else {
          throw new exception(
            '!<' +
              type.tag +
              '> tag resolver accepts not "' +
              style +
              '" style',
          )
        }

        state.dump = _result
      }

      return true
    }
  }

  return false
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null
  state.dump = object

  if (!detectType(state, object, false)) {
    detectType(state, object, true)
  }

  var type = _toString$2.call(state.dump)

  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
    duplicateIndex,
    duplicate

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object)
    duplicate = duplicateIndex !== -1
  }

  if (
    (state.tag !== null && state.tag !== '?') ||
    duplicate ||
    (state.indent !== 2 && level > 0)
  ) {
    compact = false
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true
    }
    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact)
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump
        }
      } else {
        writeFlowMapping(state, level, state.dump)
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level
      if (block && state.dump.length !== 0) {
        writeBlockSequence(state, arrayLevel, state.dump, compact)
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump)
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey)
      }
    } else {
      if (state.skipInvalid) return false
      throw new exception('unacceptable kind of an object to dump ' + type)
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump
    }
  }

  return true
}

function getDuplicateReferences(object, state) {
  var objects = [],
    duplicatesIndexes = [],
    index,
    length

  inspectNode(object, objects, duplicatesIndexes)

  for (
    index = 0, length = duplicatesIndexes.length;
    index < length;
    index += 1
  ) {
    state.duplicates.push(objects[duplicatesIndexes[index]])
  }
  state.usedDuplicates = new Array(length)
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object)
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index)
      }
    } else {
      objects.push(object)

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes)
        }
      } else {
        objectKeyList = Object.keys(object)

        for (
          index = 0, length = objectKeyList.length;
          index < length;
          index += 1
        ) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes)
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {}

  var state = new State$1(options)

  if (!state.noRefs) getDuplicateReferences(input, state)

  if (writeNode(state, 0, input, true, true)) return state.dump + '\n'

  return ''
}

function safeDump(input, options) {
  return dump(input, common.extend({ schema: default_safe }, options))
}

var dump_1 = dump
var safeDump_1 = safeDump

var dumper = {
  dump: dump_1,
  safeDump: safeDump_1,
}

function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.')
  }
}

var Type$1 = type
var Schema$1 = schema
var FAILSAFE_SCHEMA = failsafe
var JSON_SCHEMA = json
var CORE_SCHEMA = core
var DEFAULT_SAFE_SCHEMA = default_safe
var DEFAULT_FULL_SCHEMA = default_full
var load$1 = loader.load
var loadAll$1 = loader.loadAll
var safeLoad$1 = loader.safeLoad
var safeLoadAll$1 = loader.safeLoadAll
var dump$1 = dumper.dump
var safeDump$1 = dumper.safeDump
var YAMLException$1 = exception

// Deprecated schema names from JS-YAML 2.0.x
var MINIMAL_SCHEMA = failsafe
var SAFE_SCHEMA = default_safe
var DEFAULT_SCHEMA = default_full

// Deprecated functions from JS-YAML 1.x.x
var scan = deprecated('scan')
var parse = deprecated('parse')
var compose = deprecated('compose')
var addConstructor = deprecated('addConstructor')

var jsYaml = {
  Type: Type$1,
  Schema: Schema$1,
  FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
  JSON_SCHEMA: JSON_SCHEMA,
  CORE_SCHEMA: CORE_SCHEMA,
  DEFAULT_SAFE_SCHEMA: DEFAULT_SAFE_SCHEMA,
  DEFAULT_FULL_SCHEMA: DEFAULT_FULL_SCHEMA,
  load: load$1,
  loadAll: loadAll$1,
  safeLoad: safeLoad$1,
  safeLoadAll: safeLoadAll$1,
  dump: dump$1,
  safeDump: safeDump$1,
  YAMLException: YAMLException$1,
  MINIMAL_SCHEMA: MINIMAL_SCHEMA,
  SAFE_SCHEMA: SAFE_SCHEMA,
  DEFAULT_SCHEMA: DEFAULT_SCHEMA,
  scan: scan,
  parse: parse,
  compose: compose,
  addConstructor: addConstructor,
}

var D__git_packageInherit_node_modules_jsYaml = jsYaml

const parse$1 = (data) =>
  D__git_packageInherit_node_modules_jsYaml.safeLoad(stripBom(data))

const readYamlFile = (fp) =>
  D__git_packageInherit_node_modules_pify(gracefulFs.readFile)(
    fp,
    'utf8',
  ).then((data) => parse$1(data))

var readYamlFile_1 = readYamlFile
var _default$3 = readYamlFile
var sync$2 = (fp) => parse$1(gracefulFs.readFileSync(fp, 'utf8'))
readYamlFile_1.default = _default$3
readYamlFile_1.sync = sync$2

var arrayUnion = (...arguments_) => {
  return [...new Set([].concat(...arguments_))]
}

/*
 * merge2
 * https://github.com/teambition/merge2
 *
 * Copyright (c) 2014-2020 Teambition
 * Licensed under the MIT license.
 */

const PassThrough = stream_1__default['default'].PassThrough
const slice = Array.prototype.slice

var D__git_packageInherit_node_modules_merge2 = merge2

function merge2() {
  const streamsQueue = []
  const args = slice.call(arguments)
  let merging = false
  let options = args[args.length - 1]

  if (options && !Array.isArray(options) && options.pipe == null) {
    args.pop()
  } else {
    options = {}
  }

  const doEnd = options.end !== false
  const doPipeError = options.pipeError === true
  if (options.objectMode == null) {
    options.objectMode = true
  }
  if (options.highWaterMark == null) {
    options.highWaterMark = 64 * 1024
  }
  const mergedStream = PassThrough(options)

  function addStream() {
    for (let i = 0, len = arguments.length; i < len; i++) {
      streamsQueue.push(pauseStreams(arguments[i], options))
    }
    mergeStream()
    return this
  }

  function mergeStream() {
    if (merging) {
      return
    }
    merging = true

    let streams = streamsQueue.shift()
    if (!streams) {
      process.nextTick(endStream)
      return
    }
    if (!Array.isArray(streams)) {
      streams = [streams]
    }

    let pipesCount = streams.length + 1

    function next() {
      if (--pipesCount > 0) {
        return
      }
      merging = false
      mergeStream()
    }

    function pipe(stream) {
      function onend() {
        stream.removeListener('merge2UnpipeEnd', onend)
        stream.removeListener('end', onend)
        if (doPipeError) {
          stream.removeListener('error', onerror)
        }
        next()
      }
      function onerror(err) {
        mergedStream.emit('error', err)
      }
      // skip ended stream
      if (stream._readableState.endEmitted) {
        return next()
      }

      stream.on('merge2UnpipeEnd', onend)
      stream.on('end', onend)

      if (doPipeError) {
        stream.on('error', onerror)
      }

      stream.pipe(mergedStream, { end: false })
      // compatible for old stream
      stream.resume()
    }

    for (let i = 0; i < streams.length; i++) {
      pipe(streams[i])
    }

    next()
  }

  function endStream() {
    merging = false
    // emit 'queueDrain' when all streams merged.
    mergedStream.emit('queueDrain')
    if (doEnd) {
      mergedStream.end()
    }
  }

  mergedStream.setMaxListeners(0)
  mergedStream.add = addStream
  mergedStream.on('unpipe', function (stream) {
    stream.emit('merge2UnpipeEnd')
  })

  if (args.length) {
    addStream.apply(null, args)
  }
  return mergedStream
}

// check and pause streams for pipe.
function pauseStreams(streams, options) {
  if (!Array.isArray(streams)) {
    // Backwards-compat with old-style streams
    if (!streams._readableState && streams.pipe) {
      streams = streams.pipe(PassThrough(options))
    }
    if (!streams._readableState || !streams.pause || !streams.pipe) {
      throw new Error('Only readable stream can be merged.')
    }
    streams.pause()
  } else {
    for (let i = 0, len = streams.length; i < len; i++) {
      streams[i] = pauseStreams(streams[i], options)
    }
  }
  return streams
}

var array = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.splitWhen = exports.flatten = void 0
  function flatten(items) {
    return items.reduce((collection, item) => [].concat(collection, item), [])
  }
  exports.flatten = flatten
  function splitWhen(items, predicate) {
    const result = [[]]
    let groupIndex = 0
    for (const item of items) {
      if (predicate(item)) {
        groupIndex++
        result[groupIndex] = []
      } else {
        result[groupIndex].push(item)
      }
    }
    return result
  }
  exports.splitWhen = splitWhen
})

var errno = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.isEnoentCodeError = void 0
  function isEnoentCodeError(error) {
    return error.code === 'ENOENT'
  }
  exports.isEnoentCodeError = isEnoentCodeError
})

var fs = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.createDirentFromStats = void 0
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name
      this.isBlockDevice = stats.isBlockDevice.bind(stats)
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats)
      this.isDirectory = stats.isDirectory.bind(stats)
      this.isFIFO = stats.isFIFO.bind(stats)
      this.isFile = stats.isFile.bind(stats)
      this.isSocket = stats.isSocket.bind(stats)
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats)
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats)
  }
  exports.createDirentFromStats = createDirentFromStats
})

var path_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0

  const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2 // ./ or .\\
  const UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g
  /**
   * Designed to work only with simple paths: `dir\\file`.
   */
  function unixify(filepath) {
    return filepath.replace(/\\/g, '/')
  }
  exports.unixify = unixify
  function makeAbsolute(cwd, filepath) {
    return path__default['default'].resolve(cwd, filepath)
  }
  exports.makeAbsolute = makeAbsolute
  function escape(pattern) {
    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\$2')
  }
  exports.escape = escape
  function removeLeadingDotSegment(entry) {
    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.
    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
    if (entry.charAt(0) === '.') {
      const secondCharactery = entry.charAt(1)
      if (secondCharactery === '/' || secondCharactery === '\\') {
        return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT)
      }
    }
    return entry
  }
  exports.removeLeadingDotSegment = removeLeadingDotSegment
})

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var D__git_packageInherit_node_modules_isExtglob = function isExtglob(str) {
  if (typeof str !== 'string' || str === '') {
    return false
  }

  var match
  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
    if (match[2]) return true
    str = str.slice(match.index + match[0].length)
  }

  return false
}

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var chars = { '{': '}', '(': ')', '[': ']' }
var strictRegex = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/
var relaxedRegex = /\\(.)|(^!|[*?{}()[\]]|\(\?)/

var D__git_packageInherit_node_modules_isGlob = function isGlob(str, options) {
  if (typeof str !== 'string' || str === '') {
    return false
  }

  if (D__git_packageInherit_node_modules_isExtglob(str)) {
    return true
  }

  var regex = strictRegex
  var match

  // optionally relax regex
  if (options && options.strict === false) {
    regex = relaxedRegex
  }

  while ((match = regex.exec(str))) {
    if (match[2]) return true
    var idx = match.index + match[0].length

    // if an open bracket/brace/paren is escaped,
    // set the index to the next closing character
    var open = match[1]
    var close = open ? chars[open] : null
    if (open && close) {
      var n = str.indexOf(close, idx)
      if (n !== -1) {
        idx = n + 1
      }
    }

    str = str.slice(idx)
  }
  return false
}

var pathPosixDirname = path__default['default'].posix.dirname
var isWin32 = os__default['default'].platform() === 'win32'

var slash = '/'
var backslash = /\\/g
var enclosure = /[\{\[].*[\/]*.*[\}\]]$/
var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/
var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 */
var D__git_packageInherit_node_modules_globParent = function globParent(
  str,
  opts,
) {
  var options = Object.assign({ flipBackslashes: true }, opts)

  // flip windows path separators
  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
    str = str.replace(backslash, slash)
  }

  // special case for strings ending in enclosure containing path separator
  if (enclosure.test(str)) {
    str += slash
  }

  // preserves full path in case of trailing path separator
  str += 'a'

  // remove path parts that are globby
  do {
    str = pathPosixDirname(str)
  } while (D__git_packageInherit_node_modules_isGlob(str) || globby.test(str))

  // remove escape chars and return result
  return str.replace(escaped, '$1')
}

var utils = createCommonjsModule(function (module, exports) {
  exports.isInteger = (num) => {
    if (typeof num === 'number') {
      return Number.isInteger(num)
    }
    if (typeof num === 'string' && num.trim() !== '') {
      return Number.isInteger(Number(num))
    }
    return false
  }

  /**
   * Find a node of the given type
   */

  exports.find = (node, type) => node.nodes.find((node) => node.type === type)

  /**
   * Find a node of the given type
   */

  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false) return false
    if (!exports.isInteger(min) || !exports.isInteger(max)) return false
    return (Number(max) - Number(min)) / Number(step) >= limit
  }

  /**
   * Escape the given node with '\\' before node.value
   */

  exports.escapeNode = (block, n = 0, type) => {
    let node = block.nodes[n]
    if (!node) return

    if (
      (type && node.type === type) ||
      node.type === 'open' ||
      node.type === 'close'
    ) {
      if (node.escaped !== true) {
        node.value = '\\' + node.value
        node.escaped = true
      }
    }
  }

  /**
   * Returns true if the given brace node should be enclosed in literal braces
   */

  exports.encloseBrace = (node) => {
    if (node.type !== 'brace') return false
    if ((node.commas >> (0 + node.ranges)) >> 0 === 0) {
      node.invalid = true
      return true
    }
    return false
  }

  /**
   * Returns true if a brace node is invalid.
   */

  exports.isInvalidBrace = (block) => {
    if (block.type !== 'brace') return false
    if (block.invalid === true || block.dollar) return true
    if ((block.commas >> (0 + block.ranges)) >> 0 === 0) {
      block.invalid = true
      return true
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true
      return true
    }
    return false
  }

  /**
   * Returns true if a node is an open or close node
   */

  exports.isOpenOrClose = (node) => {
    if (node.type === 'open' || node.type === 'close') {
      return true
    }
    return node.open === true || node.close === true
  }

  /**
   * Reduce an array of text nodes.
   */

  exports.reduce = (nodes) =>
    nodes.reduce((acc, node) => {
      if (node.type === 'text') acc.push(node.value)
      if (node.type === 'range') node.type = 'text'
      return acc
    }, [])

  /**
   * Flatten an array
   */

  exports.flatten = (...args) => {
    const result = []
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i]
        Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele)
      }
      return result
    }
    flat(args)
    return result
  }
})

var stringify = (ast, options = {}) => {
  let stringify = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent)
    let invalidNode = node.invalid === true && options.escapeInvalid === true
    let output = ''

    if (node.value) {
      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
        return '\\' + node.value
      }
      return node.value
    }

    if (node.value) {
      return node.value
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify(child)
      }
    }
    return output
  }

  return stringify(ast)
}

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

var D__git_packageInherit_node_modules_fastGlob_node_modules_isNumber = function (
  num,
) {
  if (typeof num === 'number') {
    return num - num === 0
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num)
  }
  return false
}

const toRegexRange = (min, max, options) => {
  if (
    D__git_packageInherit_node_modules_fastGlob_node_modules_isNumber(min) ===
    false
  ) {
    throw new TypeError(
      'toRegexRange: expected the first argument to be a number',
    )
  }

  if (max === void 0 || min === max) {
    return String(min)
  }

  if (
    D__git_packageInherit_node_modules_fastGlob_node_modules_isNumber(max) ===
    false
  ) {
    throw new TypeError(
      'toRegexRange: expected the second argument to be a number.',
    )
  }

  let opts = { relaxZeros: true, ...options }
  if (typeof opts.strictZeros === 'boolean') {
    opts.relaxZeros = opts.strictZeros === false
  }

  let relax = String(opts.relaxZeros)
  let shorthand = String(opts.shorthand)
  let capture = String(opts.capture)
  let wrap = String(opts.wrap)
  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap

  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange.cache[cacheKey].result
  }

  let a = Math.min(min, max)
  let b = Math.max(min, max)

  if (Math.abs(a - b) === 1) {
    let result = min + '|' + max
    if (opts.capture) {
      return `(${result})`
    }
    if (opts.wrap === false) {
      return result
    }
    return `(?:${result})`
  }

  let isPadded = hasPadding(min) || hasPadding(max)
  let state = { min, max, a, b }
  let positives = []
  let negatives = []

  if (isPadded) {
    state.isPadded = isPadded
    state.maxLen = String(state.max).length
  }

  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts)
    a = state.a = 0
  }

  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts)
  }

  state.negatives = negatives
  state.positives = positives
  state.result = collatePatterns(negatives, positives)

  if (opts.capture === true) {
    state.result = `(${state.result})`
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`
  }

  toRegexRange.cache[cacheKey] = state
  return state.result
}

function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, '-', false) || []
  let onlyPositive = filterPatterns(pos, neg, '', false) || []
  let intersected = filterPatterns(neg, pos, '-?', true) || []
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive)
  return subpatterns.join('|')
}

function splitToRanges(min, max) {
  let nines = 1
  let zeros = 1

  let stop = countNines(min, nines)
  let stops = new Set([max])

  while (min <= stop && stop <= max) {
    stops.add(stop)
    nines += 1
    stop = countNines(min, nines)
  }

  stop = countZeros(max + 1, zeros) - 1

  while (min < stop && stop <= max) {
    stops.add(stop)
    zeros += 1
    stop = countZeros(max + 1, zeros) - 1
  }

  stops = [...stops]
  stops.sort(compare)
  return stops
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 }
  }

  let zipped = zip(start, stop)
  let digits = zipped.length
  let pattern = ''
  let count = 0

  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i]

    if (startDigit === stopDigit) {
      pattern += startDigit
    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass(startDigit, stopDigit)
    } else {
      count++
    }
  }

  if (count) {
    pattern += options.shorthand === true ? '\\d' : '[0-9]'
  }

  return { pattern, count: [count], digits }
}

function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max)
  let tokens = []
  let start = min
  let prev

  for (let i = 0; i < ranges.length; i++) {
    let max = ranges[i]
    let obj = rangeToPattern(String(start), String(max), options)
    let zeros = ''

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop()
      }

      prev.count.push(obj.count[0])
      prev.string = prev.pattern + toQuantifier(prev.count)
      start = max + 1
      continue
    }

    if (tok.isPadded) {
      zeros = padZeros(max, tok, options)
    }

    obj.string = zeros + obj.pattern + toQuantifier(obj.count)
    tokens.push(obj)
    start = max + 1
    prev = obj
  }

  return tokens
}

function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = []

  for (let ele of arr) {
    let { string } = ele

    // only push if _both_ are negative...
    if (!intersection && !contains(comparison, 'string', string)) {
      result.push(prefix + string)
    }

    // or _both_ are positive
    if (intersection && contains(comparison, 'string', string)) {
      result.push(prefix + string)
    }
  }
  return result
}

/**
 * Zip strings
 */

function zip(a, b) {
  let arr = []
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]])
  return arr
}

function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0
}

function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val)
}

function countNines(min, len) {
  return Number(String(min).slice(0, -len) + '9'.repeat(len))
}

function countZeros(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros))
}

function toQuantifier(digits) {
  let [start = 0, stop = ''] = digits
  if (stop || start > 1) {
    return `{${start + (stop ? ',' + stop : '')}}`
  }
  return ''
}

function toCharacterClass(a, b, options) {
  return `[${a}${b - a === 1 ? '' : '-'}${b}]`
}

function hasPadding(str) {
  return /^-?(0+)\d/.test(str)
}

function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value
  }

  let diff = Math.abs(tok.maxLen - String(value).length)
  let relax = options.relaxZeros !== false

  switch (diff) {
    case 0:
      return ''
    case 1:
      return relax ? '0?' : '0'
    case 2:
      return relax ? '0{0,2}' : '00'
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`
    }
  }
}

/**
 * Cache
 */

toRegexRange.cache = {}
toRegexRange.clearCache = () => (toRegexRange.cache = {})

/**
 * Expose `toRegexRange`
 */

var D__git_packageInherit_node_modules_fastGlob_node_modules_toRegexRange = toRegexRange

const isObject$1 = (val) =>
  val !== null && typeof val === 'object' && !Array.isArray(val)

const transform = (toNumber) => {
  return (value) => (toNumber === true ? Number(value) : String(value))
}

const isValidValue = (value) => {
  return (
    typeof value === 'number' || (typeof value === 'string' && value !== '')
  )
}

const isNumber = (num) => Number.isInteger(+num)

const zeros = (input) => {
  let value = `${input}`
  let index = -1
  if (value[0] === '-') value = value.slice(1)
  if (value === '0') return false
  while (value[++index] === '0');
  return index > 0
}

const stringify$1 = (start, end, options) => {
  if (typeof start === 'string' || typeof end === 'string') {
    return true
  }
  return options.stringify === true
}

const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === '-' ? '-' : ''
    if (dash) input = input.slice(1)
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, '0')
  }
  if (toNumber === false) {
    return String(input)
  }
  return input
}

const toMaxLen = (input, maxLength) => {
  let negative = input[0] === '-' ? '-' : ''
  if (negative) {
    input = input.slice(1)
    maxLength--
  }
  while (input.length < maxLength) input = '0' + input
  return negative ? '-' + input : input
}

const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0))
  parts.positives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0))

  let prefix = options.capture ? '' : '?:'
  let positives = ''
  let negatives = ''
  let result

  if (parts.positives.length) {
    positives = parts.positives.join('|')
  }

  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join('|')})`
  }

  if (positives && negatives) {
    result = `${positives}|${negatives}`
  } else {
    result = positives || negatives
  }

  if (options.wrap) {
    return `(${prefix}${result})`
  }

  return result
}

const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return D__git_packageInherit_node_modules_fastGlob_node_modules_toRegexRange(
      a,
      b,
      { wrap: false, ...options },
    )
  }

  let start = String.fromCharCode(a)
  if (a === b) return start

  let stop = String.fromCharCode(b)
  return `[${start}-${stop}]`
}

const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true
    let prefix = options.capture ? '' : '?:'
    return wrap ? `(${prefix}${start.join('|')})` : start.join('|')
  }
  return D__git_packageInherit_node_modules_fastGlob_node_modules_toRegexRange(
    start,
    end,
    options,
  )
}

const rangeError = (...args) => {
  return new RangeError(
    'Invalid range arguments: ' + util__default['default'].inspect(...args),
  )
}

const invalidRange = (start, end, options) => {
  if (options.strictRanges === true) throw rangeError([start, end])
  return []
}

const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`)
  }
  return []
}

const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start)
  let b = Number(end)

  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true) throw rangeError([start, end])
    return []
  }

  // fix negative zero
  if (a === 0) a = 0
  if (b === 0) b = 0

  let descending = a > b
  let startString = String(start)
  let endString = String(end)
  let stepString = String(step)
  step = Math.max(Math.abs(step), 1)

  let padded = zeros(startString) || zeros(endString) || zeros(stepString)
  let maxLen = padded
    ? Math.max(startString.length, endString.length, stepString.length)
    : 0
  let toNumber = padded === false && stringify$1(start, end, options) === false
  let format = options.transform || transform(toNumber)

  if (options.toRegex && step === 1) {
    return toRange(
      toMaxLen(start, maxLen),
      toMaxLen(end, maxLen),
      true,
      options,
    )
  }

  let parts = { negatives: [], positives: [] }
  let push = (num) =>
    parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num))
  let range = []
  let index = 0

  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a)
    } else {
      range.push(pad(format(a, index), maxLen, toNumber))
    }
    a = descending ? a - step : a + step
    index++
  }

  if (options.toRegex === true) {
    return step > 1
      ? toSequence(parts, options)
      : toRegex(range, null, { wrap: false, ...options })
  }

  return range
}

const fillLetters = (start, end, step = 1, options = {}) => {
  if (
    (!isNumber(start) && start.length > 1) ||
    (!isNumber(end) && end.length > 1)
  ) {
    return invalidRange(start, end, options)
  }

  let format = options.transform || ((val) => String.fromCharCode(val))
  let a = `${start}`.charCodeAt(0)
  let b = `${end}`.charCodeAt(0)

  let descending = a > b
  let min = Math.min(a, b)
  let max = Math.max(a, b)

  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options)
  }

  let range = []
  let index = 0

  while (descending ? a >= b : a <= b) {
    range.push(format(a, index))
    a = descending ? a - step : a + step
    index++
  }

  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options })
  }

  return range
}

const fill = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start]
  }

  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options)
  }

  if (typeof step === 'function') {
    return fill(start, end, 1, { transform: step })
  }

  if (isObject$1(step)) {
    return fill(start, end, 0, step)
  }

  let opts = { ...options }
  if (opts.capture === true) opts.wrap = true
  step = step || opts.step || 1

  if (!isNumber(step)) {
    if (step != null && !isObject$1(step)) return invalidStep(step, opts)
    return fill(start, end, 1, step)
  }

  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts)
  }

  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts)
}

var D__git_packageInherit_node_modules_fastGlob_node_modules_fillRange = fill

const compile = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils.isInvalidBrace(parent)
    let invalidNode = node.invalid === true && options.escapeInvalid === true
    let invalid = invalidBlock === true || invalidNode === true
    let prefix = options.escapeInvalid === true ? '\\' : ''
    let output = ''

    if (node.isOpen === true) {
      return prefix + node.value
    }
    if (node.isClose === true) {
      return prefix + node.value
    }

    if (node.type === 'open') {
      return invalid ? prefix + node.value : '('
    }

    if (node.type === 'close') {
      return invalid ? prefix + node.value : ')'
    }

    if (node.type === 'comma') {
      return node.prev.type === 'comma' ? '' : invalid ? node.value : '|'
    }

    if (node.value) {
      return node.value
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes)
      let range = D__git_packageInherit_node_modules_fastGlob_node_modules_fillRange(
        ...args,
        { ...options, wrap: false, toRegex: true },
      )

      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range
      }
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node)
      }
    }
    return output
  }

  return walk(ast)
}

var compile_1 = compile

const append = (queue = '', stash = '', enclose = false) => {
  let result = []

  queue = [].concat(queue)
  stash = [].concat(stash)

  if (!stash.length) return queue
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash
  }

  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append(value, stash, enclose))
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`
        result.push(
          Array.isArray(ele) ? append(item, ele, enclose) : item + ele,
        )
      }
    }
  }
  return utils.flatten(result)
}

const expand = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit

  let walk = (node, parent = {}) => {
    node.queue = []

    let p = parent
    let q = parent.queue

    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
      p = p.parent
      q = p.queue
    }

    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify(node, options)))
      return
    }

    if (
      node.type === 'brace' &&
      node.invalid !== true &&
      node.nodes.length === 2
    ) {
      q.push(append(q.pop(), ['{}']))
      return
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes)

      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError(
          'expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.',
        )
      }

      let range = D__git_packageInherit_node_modules_fastGlob_node_modules_fillRange(
        ...args,
        options,
      )
      if (range.length === 0) {
        range = stringify(node, options)
      }

      q.push(append(q.pop(), range))
      node.nodes = []
      return
    }

    let enclose = utils.encloseBrace(node)
    let queue = node.queue
    let block = node

    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
      block = block.parent
      queue = block.queue
    }

    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i]

      if (child.type === 'comma' && node.type === 'brace') {
        if (i === 1) queue.push('')
        queue.push('')
        continue
      }

      if (child.type === 'close') {
        q.push(append(q.pop(), queue, enclose))
        continue
      }

      if (child.value && child.type !== 'open') {
        queue.push(append(queue.pop(), child.value))
        continue
      }

      if (child.nodes) {
        walk(child, node)
      }
    }

    return queue
  }

  return utils.flatten(walk(ast))
}

var expand_1 = expand

var constants = {
  MAX_LENGTH: 1024 * 64,

  // Digits
  CHAR_0: '0' /* 0 */,
  CHAR_9: '9' /* 9 */,

  // Alphabet chars.
  CHAR_UPPERCASE_A: 'A' /* A */,
  CHAR_LOWERCASE_A: 'a' /* a */,
  CHAR_UPPERCASE_Z: 'Z' /* Z */,
  CHAR_LOWERCASE_Z: 'z' /* z */,

  CHAR_LEFT_PARENTHESES: '(' /* ( */,
  CHAR_RIGHT_PARENTHESES: ')' /* ) */,

  CHAR_ASTERISK: '*' /* * */,

  // Non-alphabetic chars.
  CHAR_AMPERSAND: '&' /* & */,
  CHAR_AT: '@' /* @ */,
  CHAR_BACKSLASH: '\\' /* \ */,
  CHAR_BACKTICK: '`' /* ` */,
  CHAR_CARRIAGE_RETURN: '\r' /* \r */,
  CHAR_CIRCUMFLEX_ACCENT: '^' /* ^ */,
  CHAR_COLON: ':' /* : */,
  CHAR_COMMA: ',' /* , */,
  CHAR_DOLLAR: '$' /* . */,
  CHAR_DOT: '.' /* . */,
  CHAR_DOUBLE_QUOTE: '"' /* " */,
  CHAR_EQUAL: '=' /* = */,
  CHAR_EXCLAMATION_MARK: '!' /* ! */,
  CHAR_FORM_FEED: '\f' /* \f */,
  CHAR_FORWARD_SLASH: '/' /* / */,
  CHAR_HASH: '#' /* # */,
  CHAR_HYPHEN_MINUS: '-' /* - */,
  CHAR_LEFT_ANGLE_BRACKET: '<' /* < */,
  CHAR_LEFT_CURLY_BRACE: '{' /* { */,
  CHAR_LEFT_SQUARE_BRACKET: '[' /* [ */,
  CHAR_LINE_FEED: '\n' /* \n */,
  CHAR_NO_BREAK_SPACE: '\u00A0' /* \u00A0 */,
  CHAR_PERCENT: '%' /* % */,
  CHAR_PLUS: '+' /* + */,
  CHAR_QUESTION_MARK: '?' /* ? */,
  CHAR_RIGHT_ANGLE_BRACKET: '>' /* > */,
  CHAR_RIGHT_CURLY_BRACE: '}' /* } */,
  CHAR_RIGHT_SQUARE_BRACKET: ']' /* ] */,
  CHAR_SEMICOLON: ';' /* ; */,
  CHAR_SINGLE_QUOTE: "'" /* ' */,
  CHAR_SPACE: ' ' /*   */,
  CHAR_TAB: '\t' /* \t */,
  CHAR_UNDERSCORE: '_' /* _ */,
  CHAR_VERTICAL_LINE: '|' /* | */,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */,
}

/**
 * Constants
 */

const {
  MAX_LENGTH,
  CHAR_BACKSLASH /* \ */,
  CHAR_BACKTICK /* ` */,
  CHAR_COMMA: CHAR_COMMA$1 /* , */,
  CHAR_DOT /* . */,
  CHAR_LEFT_PARENTHESES /* ( */,
  CHAR_RIGHT_PARENTHESES /* ) */,
  CHAR_LEFT_CURLY_BRACE /* { */,
  CHAR_RIGHT_CURLY_BRACE /* } */,
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1 /* [ */,
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1 /* ] */,
  CHAR_DOUBLE_QUOTE: CHAR_DOUBLE_QUOTE$1 /* " */,
  CHAR_SINGLE_QUOTE: CHAR_SINGLE_QUOTE$1 /* ' */,
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE,
} = constants

/**
 * parse
 */

const parse$2 = (input, options = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string')
  }

  let opts = options || {}
  let max =
    typeof opts.maxLength === 'number'
      ? Math.min(MAX_LENGTH, opts.maxLength)
      : MAX_LENGTH
  if (input.length > max) {
    throw new SyntaxError(
      `Input length (${input.length}), exceeds max characters (${max})`,
    )
  }

  let ast = { type: 'root', input, nodes: [] }
  let stack = [ast]
  let block = ast
  let prev = ast
  let brackets = 0
  let length = input.length
  let index = 0
  let depth = 0
  let value

  /**
   * Helpers
   */

  const advance = () => input[index++]
  const push = (node) => {
    if (node.type === 'text' && prev.type === 'dot') {
      prev.type = 'text'
    }

    if (prev && prev.type === 'text' && node.type === 'text') {
      prev.value += node.value
      return
    }

    block.nodes.push(node)
    node.parent = block
    node.prev = prev
    prev = node
    return node
  }

  push({ type: 'bos' })

  while (index < length) {
    block = stack[stack.length - 1]
    value = advance()

    /**
     * Invalid chars
     */

    if (
      value === CHAR_ZERO_WIDTH_NOBREAK_SPACE ||
      value === CHAR_NO_BREAK_SPACE
    ) {
      continue
    }

    /**
     * Escaped chars
     */

    if (value === CHAR_BACKSLASH) {
      push({
        type: 'text',
        value: (options.keepEscaping ? value : '') + advance(),
      })
      continue
    }

    /**
     * Right square bracket (literal): ']'
     */

    if (value === CHAR_RIGHT_SQUARE_BRACKET$1) {
      push({ type: 'text', value: '\\' + value })
      continue
    }

    /**
     * Left square bracket: '['
     */

    if (value === CHAR_LEFT_SQUARE_BRACKET$1) {
      brackets++
      let next

      while (index < length && (next = advance())) {
        value += next

        if (next === CHAR_LEFT_SQUARE_BRACKET$1) {
          brackets++
          continue
        }

        if (next === CHAR_BACKSLASH) {
          value += advance()
          continue
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          brackets--

          if (brackets === 0) {
            break
          }
        }
      }

      push({ type: 'text', value })
      continue
    }

    /**
     * Parentheses
     */

    if (value === CHAR_LEFT_PARENTHESES) {
      block = push({ type: 'paren', nodes: [] })
      stack.push(block)
      push({ type: 'text', value })
      continue
    }

    if (value === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== 'paren') {
        push({ type: 'text', value })
        continue
      }
      block = stack.pop()
      push({ type: 'text', value })
      block = stack[stack.length - 1]
      continue
    }

    /**
     * Quotes: '|"|`
     */

    if (
      value === CHAR_DOUBLE_QUOTE$1 ||
      value === CHAR_SINGLE_QUOTE$1 ||
      value === CHAR_BACKTICK
    ) {
      let open = value
      let next

      if (options.keepQuotes !== true) {
        value = ''
      }

      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance()
          continue
        }

        if (next === open) {
          if (options.keepQuotes === true) value += next
          break
        }

        value += next
      }

      push({ type: 'text', value })
      continue
    }

    /**
     * Left curly brace: '{'
     */

    if (value === CHAR_LEFT_CURLY_BRACE) {
      depth++

      let dollar =
        (prev.value && prev.value.slice(-1) === '$') || block.dollar === true
      let brace = {
        type: 'brace',
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: [],
      }

      block = push(brace)
      stack.push(block)
      push({ type: 'open', value })
      continue
    }

    /**
     * Right curly brace: '}'
     */

    if (value === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== 'brace') {
        push({ type: 'text', value })
        continue
      }

      let type = 'close'
      block = stack.pop()
      block.close = true

      push({ type, value })
      depth--

      block = stack[stack.length - 1]
      continue
    }

    /**
     * Comma: ','
     */

    if (value === CHAR_COMMA$1 && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0
        let open = block.nodes.shift()
        block.nodes = [open, { type: 'text', value: stringify(block) }]
      }

      push({ type: 'comma', value })
      block.commas++
      continue
    }

    /**
     * Dot: '.'
     */

    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
      let siblings = block.nodes

      if (depth === 0 || siblings.length === 0) {
        push({ type: 'text', value })
        continue
      }

      if (prev.type === 'dot') {
        block.range = []
        prev.value += value
        prev.type = 'range'

        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true
          block.ranges = 0
          prev.type = 'text'
          continue
        }

        block.ranges++
        block.args = []
        continue
      }

      if (prev.type === 'range') {
        siblings.pop()

        let before = siblings[siblings.length - 1]
        before.value += prev.value + value
        prev = before
        block.ranges--
        continue
      }

      push({ type: 'dot', value })
      continue
    }

    /**
     * Text
     */

    push({ type: 'text', value })
  }

  // Mark imbalanced braces and brackets as invalid
  do {
    block = stack.pop()

    if (block.type !== 'root') {
      block.nodes.forEach((node) => {
        if (!node.nodes) {
          if (node.type === 'open') node.isOpen = true
          if (node.type === 'close') node.isClose = true
          if (!node.nodes) node.type = 'text'
          node.invalid = true
        }
      })

      // get the location of the block on parent.nodes (block's siblings)
      let parent = stack[stack.length - 1]
      let index = parent.nodes.indexOf(block)
      // replace the (invalid) block with it's nodes
      parent.nodes.splice(index, 1, ...block.nodes)
    }
  } while (stack.length > 0)

  push({ type: 'eos' })
  return ast
}

var parse_1 = parse$2

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = []

  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces.create(pattern, options)
      if (Array.isArray(result)) {
        output.push(...result)
      } else {
        output.push(result)
      }
    }
  } else {
    output = [].concat(braces.create(input, options))
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)]
  }
  return output
}

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse_1(input, options)

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options)
  }
  return stringify(input, options)
}

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options)
  }
  return compile_1(input, options)
}

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options)
  }

  let result = expand_1(input, options)

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean)
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)]
  }

  return result
}

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input]
  }

  return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options)
}

/**
 * Expose "braces"
 */

var D__git_packageInherit_node_modules_fastGlob_node_modules_braces = braces

const WIN_SLASH = '\\\\/'
const WIN_NO_SLASH = `[^${WIN_SLASH}]`

/**
 * Posix glob regex
 */

const DOT_LITERAL = '\\.'
const PLUS_LITERAL = '\\+'
const QMARK_LITERAL = '\\?'
const SLASH_LITERAL = '\\/'
const ONE_CHAR = '(?=.)'
const QMARK = '[^/]'
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`
const NO_DOT = `(?!${DOT_LITERAL})`
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`
const STAR = `${QMARK}*?`

const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR,
}

/**
 * Windows glob regex
 */

const WINDOWS_CHARS = {
  ...POSIX_CHARS,

  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,
}

/**
 * POSIX Bracket Regex
 */

const POSIX_REGEX_SOURCE = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9',
}

var constants$1 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE,

  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    '***': '*',
    '**/**': '**',
    '**/**/**': '**',
  },

  // Digits
  CHAR_0: 48 /* 0 */,
  CHAR_9: 57 /* 9 */,

  // Alphabet chars.
  CHAR_UPPERCASE_A: 65 /* A */,
  CHAR_LOWERCASE_A: 97 /* a */,
  CHAR_UPPERCASE_Z: 90 /* Z */,
  CHAR_LOWERCASE_Z: 122 /* z */,

  CHAR_LEFT_PARENTHESES: 40 /* ( */,
  CHAR_RIGHT_PARENTHESES: 41 /* ) */,

  CHAR_ASTERISK: 42 /* * */,

  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38 /* & */,
  CHAR_AT: 64 /* @ */,
  CHAR_BACKWARD_SLASH: 92 /* \ */,
  CHAR_CARRIAGE_RETURN: 13 /* \r */,
  CHAR_CIRCUMFLEX_ACCENT: 94 /* ^ */,
  CHAR_COLON: 58 /* : */,
  CHAR_COMMA: 44 /* , */,
  CHAR_DOT: 46 /* . */,
  CHAR_DOUBLE_QUOTE: 34 /* " */,
  CHAR_EQUAL: 61 /* = */,
  CHAR_EXCLAMATION_MARK: 33 /* ! */,
  CHAR_FORM_FEED: 12 /* \f */,
  CHAR_FORWARD_SLASH: 47 /* / */,
  CHAR_GRAVE_ACCENT: 96 /* ` */,
  CHAR_HASH: 35 /* # */,
  CHAR_HYPHEN_MINUS: 45 /* - */,
  CHAR_LEFT_ANGLE_BRACKET: 60 /* < */,
  CHAR_LEFT_CURLY_BRACE: 123 /* { */,
  CHAR_LEFT_SQUARE_BRACKET: 91 /* [ */,
  CHAR_LINE_FEED: 10 /* \n */,
  CHAR_NO_BREAK_SPACE: 160 /* \u00A0 */,
  CHAR_PERCENT: 37 /* % */,
  CHAR_PLUS: 43 /* + */,
  CHAR_QUESTION_MARK: 63 /* ? */,
  CHAR_RIGHT_ANGLE_BRACKET: 62 /* > */,
  CHAR_RIGHT_CURLY_BRACE: 125 /* } */,
  CHAR_RIGHT_SQUARE_BRACKET: 93 /* ] */,
  CHAR_SEMICOLON: 59 /* ; */,
  CHAR_SINGLE_QUOTE: 39 /* ' */,
  CHAR_SPACE: 32 /*   */,
  CHAR_TAB: 9 /* \t */,
  CHAR_UNDERSCORE: 95 /* _ */,
  CHAR_VERTICAL_LINE: 124 /* | */,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279 /* \uFEFF */,

  SEP: path__default['default'].sep,

  /**
   * Create EXTGLOB_CHARS
   */

  extglobChars(chars) {
    return {
      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
      '?': { type: 'qmark', open: '(?:', close: ')?' },
      '+': { type: 'plus', open: '(?:', close: ')+' },
      '*': { type: 'star', open: '(?:', close: ')*' },
      '@': { type: 'at', open: '(?:', close: ')' },
    }
  },

  /**
   * Create GLOB_CHARS
   */

  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS
  },
}

var utils$1 = createCommonjsModule(function (module, exports) {
  const win32 = process.platform === 'win32'
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL,
  } = constants$1

  exports.isObject = (val) =>
    val !== null && typeof val === 'object' && !Array.isArray(val)
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str)
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str)
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1')
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, '/')

  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === '\\' ? '' : match
    })
  }

  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split('.').map(Number)
    if (
      (segs.length === 3 && segs[0] >= 9) ||
      (segs[0] === 8 && segs[1] >= 10)
    ) {
      return true
    }
    return false
  }

  exports.isWindows = (options) => {
    if (options && typeof options.windows === 'boolean') {
      return options.windows
    }
    return win32 === true || path__default['default'].sep === '\\'
  }

  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx)
    if (idx === -1) return input
    if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1)
    return `${input.slice(0, idx)}\\${input.slice(idx)}`
  }

  exports.removePrefix = (input, state = {}) => {
    let output = input
    if (output.startsWith('./')) {
      output = output.slice(2)
      state.prefix = './'
    }
    return output
  }

  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? '' : '^'
    const append = options.contains ? '' : '$'

    let output = `${prepend}(?:${input})${append}`
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`
    }
    return output
  }
})

const {
  CHAR_ASTERISK: CHAR_ASTERISK$1 /* * */,
  CHAR_AT /* @ */,
  CHAR_BACKWARD_SLASH /* \ */,
  CHAR_COMMA: CHAR_COMMA$2 /* , */,
  CHAR_DOT: CHAR_DOT$1 /* . */,
  CHAR_EXCLAMATION_MARK /* ! */,
  CHAR_FORWARD_SLASH /* / */,
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1 /* { */,
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1 /* ( */,
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$2 /* [ */,
  CHAR_PLUS /* + */,
  CHAR_QUESTION_MARK /* ? */,
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1 /* } */,
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1 /* ) */,
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$2 /* ] */,
} = constants$1

const isPathSeparator = (code) => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH
}

const depth = (token) => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1
  }
}

/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), and `negated` (true if the path starts with `!`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */

const scan$1 = (input, options) => {
  const opts = options || {}

  const length = input.length - 1
  const scanToEnd = opts.parts === true || opts.scanToEnd === true
  const slashes = []
  const tokens = []
  const parts = []

  let str = input
  let index = -1
  let start = 0
  let lastIndex = 0
  let isBrace = false
  let isBracket = false
  let isGlob = false
  let isExtglob = false
  let isGlobstar = false
  let braceEscaped = false
  let backslashes = false
  let negated = false
  let finished = false
  let braces = 0
  let prev
  let code
  let token = { value: '', depth: 0, isGlob: false }

  const eos = () => index >= length
  const peek = () => str.charCodeAt(index + 1)
  const advance = () => {
    prev = code
    return str.charCodeAt(++index)
  }

  while (index < length) {
    code = advance()
    let next

    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true
      code = advance()

      if (code === CHAR_LEFT_CURLY_BRACE$1) {
        braceEscaped = true
      }
      continue
    }

    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE$1) {
      braces++

      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true
          advance()
          continue
        }

        if (code === CHAR_LEFT_CURLY_BRACE$1) {
          braces++
          continue
        }

        if (
          braceEscaped !== true &&
          code === CHAR_DOT$1 &&
          (code = advance()) === CHAR_DOT$1
        ) {
          isBrace = token.isBrace = true
          isGlob = token.isGlob = true
          finished = true

          if (scanToEnd === true) {
            continue
          }

          break
        }

        if (braceEscaped !== true && code === CHAR_COMMA$2) {
          isBrace = token.isBrace = true
          isGlob = token.isGlob = true
          finished = true

          if (scanToEnd === true) {
            continue
          }

          break
        }

        if (code === CHAR_RIGHT_CURLY_BRACE$1) {
          braces--

          if (braces === 0) {
            braceEscaped = false
            isBrace = token.isBrace = true
            finished = true
            break
          }
        }
      }

      if (scanToEnd === true) {
        continue
      }

      break
    }

    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index)
      tokens.push(token)
      token = { value: '', depth: 0, isGlob: false }

      if (finished === true) continue
      if (prev === CHAR_DOT$1 && index === start + 1) {
        start += 2
        continue
      }

      lastIndex = index + 1
      continue
    }

    if (opts.noext !== true) {
      const isExtglobChar =
        code === CHAR_PLUS ||
        code === CHAR_AT ||
        code === CHAR_ASTERISK$1 ||
        code === CHAR_QUESTION_MARK ||
        code === CHAR_EXCLAMATION_MARK

      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES$1) {
        isGlob = token.isGlob = true
        isExtglob = token.isExtglob = true
        finished = true

        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true
              code = advance()
              continue
            }

            if (code === CHAR_RIGHT_PARENTHESES$1) {
              isGlob = token.isGlob = true
              finished = true
              break
            }
          }
          continue
        }
        break
      }
    }

    if (code === CHAR_ASTERISK$1) {
      if (prev === CHAR_ASTERISK$1) isGlobstar = token.isGlobstar = true
      isGlob = token.isGlob = true
      finished = true

      if (scanToEnd === true) {
        continue
      }
      break
    }

    if (code === CHAR_QUESTION_MARK) {
      isGlob = token.isGlob = true
      finished = true

      if (scanToEnd === true) {
        continue
      }
      break
    }

    if (code === CHAR_LEFT_SQUARE_BRACKET$2) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true
          advance()
          continue
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET$2) {
          isBracket = token.isBracket = true
          isGlob = token.isGlob = true
          finished = true

          if (scanToEnd === true) {
            continue
          }
          break
        }
      }
    }

    if (
      opts.nonegate !== true &&
      code === CHAR_EXCLAMATION_MARK &&
      index === start
    ) {
      negated = token.negated = true
      start++
      continue
    }

    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES$1) {
      isGlob = token.isGlob = true

      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES$1) {
            backslashes = token.backslashes = true
            code = advance()
            continue
          }

          if (code === CHAR_RIGHT_PARENTHESES$1) {
            finished = true
            break
          }
        }
        continue
      }
      break
    }

    if (isGlob === true) {
      finished = true

      if (scanToEnd === true) {
        continue
      }

      break
    }
  }

  if (opts.noext === true) {
    isExtglob = false
    isGlob = false
  }

  let base = str
  let prefix = ''
  let glob = ''

  if (start > 0) {
    prefix = str.slice(0, start)
    str = str.slice(start)
    lastIndex -= start
  }

  if (base && isGlob === true && lastIndex > 0) {
    base = str.slice(0, lastIndex)
    glob = str.slice(lastIndex)
  } else if (isGlob === true) {
    base = ''
    glob = str
  } else {
    base = str
  }

  if (base && base !== '' && base !== '/' && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1)
    }
  }

  if (opts.unescape === true) {
    if (glob) glob = utils$1.removeBackslashes(glob)

    if (base && backslashes === true) {
      base = utils$1.removeBackslashes(base)
    }
  }

  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob,
    isExtglob,
    isGlobstar,
    negated,
  }

  if (opts.tokens === true) {
    state.maxDepth = 0
    if (!isPathSeparator(code)) {
      tokens.push(token)
    }
    state.tokens = tokens
  }

  if (opts.parts === true || opts.tokens === true) {
    let prevIndex

    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start
      const i = slashes[idx]
      const value = input.slice(n, i)
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true
          tokens[idx].value = prefix
        } else {
          tokens[idx].value = value
        }
        depth(tokens[idx])
        state.maxDepth += tokens[idx].depth
      }
      if (idx !== 0 || value !== '') {
        parts.push(value)
      }
      prevIndex = i
    }

    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1)
      parts.push(value)

      if (opts.tokens) {
        tokens[tokens.length - 1].value = value
        depth(tokens[tokens.length - 1])
        state.maxDepth += tokens[tokens.length - 1].depth
      }
    }

    state.slashes = slashes
    state.parts = parts
  }

  return state
}

var scan_1 = scan$1

/**
 * Constants
 */

const {
  MAX_LENGTH: MAX_LENGTH$1,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS,
} = constants$1

/**
 * Helpers
 */

const expandRange = (args, options) => {
  if (typeof options.expandRange === 'function') {
    return options.expandRange(...args, options)
  }

  args.sort()
  const value = `[${args.join('-')}]`

  try {
    /* eslint-disable-next-line no-new */
    new RegExp(value)
  } catch (ex) {
    return args.map((v) => utils$1.escapeRegex(v)).join('..')
  }

  return value
}

/**
 * Create the message for a syntax error
 */

const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`
}

/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */

const parse$3 = (input, options) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string')
  }

  input = REPLACEMENTS[input] || input

  const opts = { ...options }
  const max =
    typeof opts.maxLength === 'number'
      ? Math.min(MAX_LENGTH$1, opts.maxLength)
      : MAX_LENGTH$1

  let len = input.length
  if (len > max) {
    throw new SyntaxError(
      `Input length: ${len}, exceeds maximum allowed length: ${max}`,
    )
  }

  const bos = { type: 'bos', value: '', output: opts.prepend || '' }
  const tokens = [bos]

  const capture = opts.capture ? '' : '?:'
  const win32 = utils$1.isWindows(options)

  // create constants based on platform, for windows or posix
  const PLATFORM_CHARS = constants$1.globChars(win32)
  const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS)

  const {
    DOT_LITERAL,
    PLUS_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR,
  } = PLATFORM_CHARS

  const globstar = (opts) => {
    return `(${capture}(?:(?!${START_ANCHOR}${
      opts.dot ? DOTS_SLASH : DOT_LITERAL
    }).)*?)`
  }

  const nodot = opts.dot ? '' : NO_DOT
  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT
  let star = opts.bash === true ? globstar(opts) : STAR

  if (opts.capture) {
    star = `(${star})`
  }

  // minimatch options support
  if (typeof opts.noext === 'boolean') {
    opts.noextglob = opts.noext
  }

  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: '',
    output: '',
    prefix: '',
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens,
  }

  input = utils$1.removePrefix(input, state)
  len = input.length

  const extglobs = []
  const braces = []
  const stack = []
  let prev = bos
  let value

  /**
   * Tokenizing helpers
   */

  const eos = () => state.index === len - 1
  const peek = (state.peek = (n = 1) => input[state.index + n])
  const advance = (state.advance = () => input[++state.index])
  const remaining = () => input.slice(state.index + 1)
  const consume = (value = '', num = 0) => {
    state.consumed += value
    state.index += num
  }
  const append = (token) => {
    state.output += token.output != null ? token.output : token.value
    consume(token.value)
  }

  const negate = () => {
    let count = 1

    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
      advance()
      state.start++
      count++
    }

    if (count % 2 === 0) {
      return false
    }

    state.negated = true
    state.start++
    return true
  }

  const increment = (type) => {
    state[type]++
    stack.push(type)
  }

  const decrement = (type) => {
    state[type]--
    stack.pop()
  }

  /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */

  const push = (tok) => {
    if (prev.type === 'globstar') {
      const isBrace =
        state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace')
      const isExtglob =
        tok.extglob === true ||
        (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'))

      if (
        tok.type !== 'slash' &&
        tok.type !== 'paren' &&
        !isBrace &&
        !isExtglob
      ) {
        state.output = state.output.slice(0, -prev.output.length)
        prev.type = 'star'
        prev.value = '*'
        prev.output = star
        state.output += prev.output
      }
    }

    if (extglobs.length && tok.type !== 'paren' && !EXTGLOB_CHARS[tok.value]) {
      extglobs[extglobs.length - 1].inner += tok.value
    }

    if (tok.value || tok.output) append(tok)
    if (prev && prev.type === 'text' && tok.type === 'text') {
      prev.value += tok.value
      prev.output = (prev.output || '') + tok.value
      return
    }

    tok.prev = prev
    tokens.push(tok)
    prev = tok
  }

  const extglobOpen = (type, value) => {
    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' }

    token.prev = prev
    token.parens = state.parens
    token.output = state.output
    const output = (opts.capture ? '(' : '') + token.open

    increment('parens')
    push({ type, value, output: state.output ? '' : ONE_CHAR })
    push({ type: 'paren', extglob: true, value: advance(), output })
    extglobs.push(token)
  }

  const extglobClose = (token) => {
    let output = token.close + (opts.capture ? ')' : '')

    if (token.type === 'negate') {
      let extglobStar = star

      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
        extglobStar = globstar(opts)
      }

      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`
      }

      if (token.prev.type === 'bos' && eos()) {
        state.negatedExtglob = true
      }
    }

    push({ type: 'paren', extglob: true, value, output })
    decrement('parens')
  }

  /**
   * Fast paths
   */

  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false

    let output = input.replace(
      REGEX_SPECIAL_CHARS_BACKREF,
      (m, esc, chars, first, rest, index) => {
        if (first === '\\') {
          backslashes = true
          return m
        }

        if (first === '?') {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : '')
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '')
          }
          return QMARK.repeat(chars.length)
        }

        if (first === '.') {
          return DOT_LITERAL.repeat(chars.length)
        }

        if (first === '*') {
          if (esc) {
            return esc + first + (rest ? star : '')
          }
          return star
        }
        return esc ? m : `\\${m}`
      },
    )

    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, '')
      } else {
        output = output.replace(/\\+/g, (m) => {
          return m.length % 2 === 0 ? '\\\\' : m ? '\\' : ''
        })
      }
    }

    if (output === input && opts.contains === true) {
      state.output = input
      return state
    }

    state.output = utils$1.wrapOutput(output, state, options)
    return state
  }

  /**
   * Tokenize input until we reach end-of-string
   */

  while (!eos()) {
    value = advance()

    if (value === '\u0000') {
      continue
    }

    /**
     * Escaped characters
     */

    if (value === '\\') {
      const next = peek()

      if (next === '/' && opts.bash !== true) {
        continue
      }

      if (next === '.' || next === ';') {
        continue
      }

      if (!next) {
        value += '\\'
        push({ type: 'text', value })
        continue
      }

      // collapse slashes to reduce potential for exploits
      const match = /^\\+/.exec(remaining())
      let slashes = 0

      if (match && match[0].length > 2) {
        slashes = match[0].length
        state.index += slashes
        if (slashes % 2 !== 0) {
          value += '\\'
        }
      }

      if (opts.unescape === true) {
        value = advance() || ''
      } else {
        value += advance() || ''
      }

      if (state.brackets === 0) {
        push({ type: 'text', value })
        continue
      }
    }

    /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

    if (
      state.brackets > 0 &&
      (value !== ']' || prev.value === '[' || prev.value === '[^')
    ) {
      if (opts.posix !== false && value === ':') {
        const inner = prev.value.slice(1)
        if (inner.includes('[')) {
          prev.posix = true

          if (inner.includes(':')) {
            const idx = prev.value.lastIndexOf('[')
            const pre = prev.value.slice(0, idx)
            const rest = prev.value.slice(idx + 2)
            const posix = POSIX_REGEX_SOURCE$1[rest]
            if (posix) {
              prev.value = pre + posix
              state.backtrack = true
              advance()

              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR
              }
              continue
            }
          }
        }
      }

      if (
        (value === '[' && peek() !== ':') ||
        (value === '-' && peek() === ']')
      ) {
        value = `\\${value}`
      }

      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
        value = `\\${value}`
      }

      if (opts.posix === true && value === '!' && prev.value === '[') {
        value = '^'
      }

      prev.value += value
      append({ value })
      continue
    }

    /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

    if (state.quotes === 1 && value !== '"') {
      value = utils$1.escapeRegex(value)
      prev.value += value
      append({ value })
      continue
    }

    /**
     * Double quotes
     */

    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1
      if (opts.keepQuotes === true) {
        push({ type: 'text', value })
      }
      continue
    }

    /**
     * Parentheses
     */

    if (value === '(') {
      increment('parens')
      push({ type: 'paren', value })
      continue
    }

    if (value === ')') {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError('opening', '('))
      }

      const extglob = extglobs[extglobs.length - 1]
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop())
        continue
      }

      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' })
      decrement('parens')
      continue
    }

    /**
     * Square brackets
     */

    if (value === '[') {
      if (opts.nobracket === true || !remaining().includes(']')) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('closing', ']'))
        }

        value = `\\${value}`
      } else {
        increment('brackets')
      }

      push({ type: 'bracket', value })
      continue
    }

    if (value === ']') {
      if (
        opts.nobracket === true ||
        (prev && prev.type === 'bracket' && prev.value.length === 1)
      ) {
        push({ type: 'text', value, output: `\\${value}` })
        continue
      }

      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('opening', '['))
        }

        push({ type: 'text', value, output: `\\${value}` })
        continue
      }

      decrement('brackets')

      const prevValue = prev.value.slice(1)
      if (
        prev.posix !== true &&
        prevValue[0] === '^' &&
        !prevValue.includes('/')
      ) {
        value = `/${value}`
      }

      prev.value += value
      append({ value })

      // when literal brackets are explicitly disabled
      // assume we should match with a regex character class
      if (opts.literalBrackets === false || utils$1.hasRegexChars(prevValue)) {
        continue
      }

      const escaped = utils$1.escapeRegex(prev.value)
      state.output = state.output.slice(0, -prev.value.length)

      // when literal brackets are explicitly enabled
      // assume we should escape the brackets to match literal characters
      if (opts.literalBrackets === true) {
        state.output += escaped
        prev.value = escaped
        continue
      }

      // when the user specifies nothing, try to match both
      prev.value = `(${capture}${escaped}|${prev.value})`
      state.output += prev.value
      continue
    }

    /**
     * Braces
     */

    if (value === '{' && opts.nobrace !== true) {
      increment('braces')

      const open = {
        type: 'brace',
        value,
        output: '(',
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length,
      }

      braces.push(open)
      push(open)
      continue
    }

    if (value === '}') {
      const brace = braces[braces.length - 1]

      if (opts.nobrace === true || !brace) {
        push({ type: 'text', value, output: value })
        continue
      }

      let output = ')'

      if (brace.dots === true) {
        const arr = tokens.slice()
        const range = []

        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop()
          if (arr[i].type === 'brace') {
            break
          }
          if (arr[i].type !== 'dots') {
            range.unshift(arr[i].value)
          }
        }

        output = expandRange(range, opts)
        state.backtrack = true
      }

      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex)
        const toks = state.tokens.slice(brace.tokensIndex)
        brace.value = brace.output = '\\{'
        value = output = '\\}'
        state.output = out
        for (const t of toks) {
          state.output += t.output || t.value
        }
      }

      push({ type: 'brace', value, output })
      decrement('braces')
      braces.pop()
      continue
    }

    /**
     * Pipes
     */

    if (value === '|') {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++
      }
      push({ type: 'text', value })
      continue
    }

    /**
     * Commas
     */

    if (value === ',') {
      let output = value

      const brace = braces[braces.length - 1]
      if (brace && stack[stack.length - 1] === 'braces') {
        brace.comma = true
        output = '|'
      }

      push({ type: 'comma', value, output })
      continue
    }

    /**
     * Slashes
     */

    if (value === '/') {
      // if the beginning of the glob is "./", advance the start
      // to the current index, and don't add the "./" characters
      // to the state. This greatly simplifies lookbehinds when
      // checking for BOS characters like "!" and "." (not "./")
      if (prev.type === 'dot' && state.index === state.start + 1) {
        state.start = state.index + 1
        state.consumed = ''
        state.output = ''
        tokens.pop()
        prev = bos // reset "prev" to the first token
        continue
      }

      push({ type: 'slash', value, output: SLASH_LITERAL })
      continue
    }

    /**
     * Dots
     */

    if (value === '.') {
      if (state.braces > 0 && prev.type === 'dot') {
        if (prev.value === '.') prev.output = DOT_LITERAL
        const brace = braces[braces.length - 1]
        prev.type = 'dots'
        prev.output += value
        prev.value += value
        brace.dots = true
        continue
      }

      if (
        state.braces + state.parens === 0 &&
        prev.type !== 'bos' &&
        prev.type !== 'slash'
      ) {
        push({ type: 'text', value, output: DOT_LITERAL })
        continue
      }

      push({ type: 'dot', value, output: DOT_LITERAL })
      continue
    }

    /**
     * Question marks
     */

    if (value === '?') {
      const isGroup = prev && prev.value === '('
      if (
        !isGroup &&
        opts.noextglob !== true &&
        peek() === '(' &&
        peek(2) !== '?'
      ) {
        extglobOpen('qmark', value)
        continue
      }

      if (prev && prev.type === 'paren') {
        const next = peek()
        let output = value

        if (next === '<' && !utils$1.supportsLookbehinds()) {
          throw new Error(
            'Node.js v10 or higher is required for regex lookbehinds',
          )
        }

        if (
          (prev.value === '(' && !/[!=<:]/.test(next)) ||
          (next === '<' && !/<([!=]|\w+>)/.test(remaining()))
        ) {
          output = `\\${value}`
        }

        push({ type: 'text', value, output })
        continue
      }

      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
        push({ type: 'qmark', value, output: QMARK_NO_DOT })
        continue
      }

      push({ type: 'qmark', value, output: QMARK })
      continue
    }

    /**
     * Exclamation
     */

    if (value === '!') {
      if (opts.noextglob !== true && peek() === '(') {
        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
          extglobOpen('negate', value)
          continue
        }
      }

      if (opts.nonegate !== true && state.index === 0) {
        negate()
        continue
      }
    }

    /**
     * Plus
     */

    if (value === '+') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('plus', value)
        continue
      }

      if ((prev && prev.value === '(') || opts.regex === false) {
        push({ type: 'plus', value, output: PLUS_LITERAL })
        continue
      }

      if (
        (prev &&
          (prev.type === 'bracket' ||
            prev.type === 'paren' ||
            prev.type === 'brace')) ||
        state.parens > 0
      ) {
        push({ type: 'plus', value })
        continue
      }

      push({ type: 'plus', value: PLUS_LITERAL })
      continue
    }

    /**
     * Plain text
     */

    if (value === '@') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        push({ type: 'at', extglob: true, value, output: '' })
        continue
      }

      push({ type: 'text', value })
      continue
    }

    /**
     * Plain text
     */

    if (value !== '*') {
      if (value === '$' || value === '^') {
        value = `\\${value}`
      }

      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining())
      if (match) {
        value += match[0]
        state.index += match[0].length
      }

      push({ type: 'text', value })
      continue
    }

    /**
     * Stars
     */

    if (prev && (prev.type === 'globstar' || prev.star === true)) {
      prev.type = 'star'
      prev.star = true
      prev.value += value
      prev.output = star
      state.backtrack = true
      state.globstar = true
      consume(value)
      continue
    }

    let rest = remaining()
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen('star', value)
      continue
    }

    if (prev.type === 'star') {
      if (opts.noglobstar === true) {
        consume(value)
        continue
      }

      const prior = prev.prev
      const before = prior.prev
      const isStart = prior.type === 'slash' || prior.type === 'bos'
      const afterStar =
        before && (before.type === 'star' || before.type === 'globstar')

      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
        push({ type: 'star', value, output: '' })
        continue
      }

      const isBrace =
        state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace')
      const isExtglob =
        extglobs.length && (prior.type === 'pipe' || prior.type === 'paren')
      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
        push({ type: 'star', value, output: '' })
        continue
      }

      // strip consecutive `/**/`
      while (rest.slice(0, 3) === '/**') {
        const after = input[state.index + 4]
        if (after && after !== '/') {
          break
        }
        rest = rest.slice(3)
        consume('/**', 3)
      }

      if (prior.type === 'bos' && eos()) {
        prev.type = 'globstar'
        prev.value += value
        prev.output = globstar(opts)
        state.output = prev.output
        state.globstar = true
        consume(value)
        continue
      }

      if (
        prior.type === 'slash' &&
        prior.prev.type !== 'bos' &&
        !afterStar &&
        eos()
      ) {
        state.output = state.output.slice(
          0,
          -(prior.output + prev.output).length,
        )
        prior.output = `(?:${prior.output}`

        prev.type = 'globstar'
        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)')
        prev.value += value
        state.globstar = true
        state.output += prior.output + prev.output
        consume(value)
        continue
      }

      if (
        prior.type === 'slash' &&
        prior.prev.type !== 'bos' &&
        rest[0] === '/'
      ) {
        const end = rest[1] !== void 0 ? '|$' : ''

        state.output = state.output.slice(
          0,
          -(prior.output + prev.output).length,
        )
        prior.output = `(?:${prior.output}`

        prev.type = 'globstar'
        prev.output = `${globstar(
          opts,
        )}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`
        prev.value += value

        state.output += prior.output + prev.output
        state.globstar = true

        consume(value + advance())

        push({ type: 'slash', value: '/', output: '' })
        continue
      }

      if (prior.type === 'bos' && rest[0] === '/') {
        prev.type = 'globstar'
        prev.value += value
        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`
        state.output = prev.output
        state.globstar = true
        consume(value + advance())
        push({ type: 'slash', value: '/', output: '' })
        continue
      }

      // remove single star from output
      state.output = state.output.slice(0, -prev.output.length)

      // reset previous token to globstar
      prev.type = 'globstar'
      prev.output = globstar(opts)
      prev.value += value

      // reset output with globstar
      state.output += prev.output
      state.globstar = true
      consume(value)
      continue
    }

    const token = { type: 'star', value, output: star }

    if (opts.bash === true) {
      token.output = '.*?'
      if (prev.type === 'bos' || prev.type === 'slash') {
        token.output = nodot + token.output
      }
      push(token)
      continue
    }

    if (
      prev &&
      (prev.type === 'bracket' || prev.type === 'paren') &&
      opts.regex === true
    ) {
      token.output = value
      push(token)
      continue
    }

    if (
      state.index === state.start ||
      prev.type === 'slash' ||
      prev.type === 'dot'
    ) {
      if (prev.type === 'dot') {
        state.output += NO_DOT_SLASH
        prev.output += NO_DOT_SLASH
      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH
        prev.output += NO_DOTS_SLASH
      } else {
        state.output += nodot
        prev.output += nodot
      }

      if (peek() !== '*') {
        state.output += ONE_CHAR
        prev.output += ONE_CHAR
      }
    }

    push(token)
  }

  while (state.brackets > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError('closing', ']'))
    state.output = utils$1.escapeLast(state.output, '[')
    decrement('brackets')
  }

  while (state.parens > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError('closing', ')'))
    state.output = utils$1.escapeLast(state.output, '(')
    decrement('parens')
  }

  while (state.braces > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError('closing', '}'))
    state.output = utils$1.escapeLast(state.output, '{')
    decrement('braces')
  }

  if (
    opts.strictSlashes !== true &&
    (prev.type === 'star' || prev.type === 'bracket')
  ) {
    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` })
  }

  // rebuild the output if we had to backtrack at any point
  if (state.backtrack === true) {
    state.output = ''

    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value

      if (token.suffix) {
        state.output += token.suffix
      }
    }
  }

  return state
}

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

parse$3.fastpaths = (input, options) => {
  const opts = { ...options }
  const max =
    typeof opts.maxLength === 'number'
      ? Math.min(MAX_LENGTH$1, opts.maxLength)
      : MAX_LENGTH$1
  const len = input.length
  if (len > max) {
    throw new SyntaxError(
      `Input length: ${len}, exceeds maximum allowed length: ${max}`,
    )
  }

  input = REPLACEMENTS[input] || input
  const win32 = utils$1.isWindows(options)

  // create constants based on platform, for windows or posix
  const {
    DOT_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOTS_SLASH,
    STAR,
    START_ANCHOR,
  } = constants$1.globChars(win32)

  const nodot = opts.dot ? NO_DOTS : NO_DOT
  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT
  const capture = opts.capture ? '' : '?:'
  const state = { negated: false, prefix: '' }
  let star = opts.bash === true ? '.*?' : STAR

  if (opts.capture) {
    star = `(${star})`
  }

  const globstar = (opts) => {
    if (opts.noglobstar === true) return star
    return `(${capture}(?:(?!${START_ANCHOR}${
      opts.dot ? DOTS_SLASH : DOT_LITERAL
    }).)*?)`
  }

  const create = (str) => {
    switch (str) {
      case '*':
        return `${nodot}${ONE_CHAR}${star}`

      case '.*':
        return `${DOT_LITERAL}${ONE_CHAR}${star}`

      case '*.*':
        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`

      case '*/*':
        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`

      case '**':
        return nodot + globstar(opts)

      case '**/*':
        return `(?:${nodot}${globstar(
          opts,
        )}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`

      case '**/*.*':
        return `(?:${nodot}${globstar(
          opts,
        )}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`

      case '**/.*':
        return `(?:${nodot}${globstar(
          opts,
        )}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`

      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str)
        if (!match) return

        const source = create(match[1])
        if (!source) return

        return source + DOT_LITERAL + match[2]
      }
    }
  }

  const output = utils$1.removePrefix(input, state)
  let source = create(output)

  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL}?`
  }

  return source
}

var parse_1$1 = parse$3

const isObject$2 = (val) =>
  val && typeof val === 'object' && !Array.isArray(val)

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

const picomatch = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map((input) => picomatch(input, options, returnState))
    const arrayMatcher = (str) => {
      for (const isMatch of fns) {
        const state = isMatch(str)
        if (state) return state
      }
      return false
    }
    return arrayMatcher
  }

  const isState = isObject$2(glob) && glob.tokens && glob.input

  if (glob === '' || (typeof glob !== 'string' && !isState)) {
    throw new TypeError('Expected pattern to be a non-empty string')
  }

  const opts = options || {}
  const posix = utils$1.isWindows(options)
  const regex = isState
    ? picomatch.compileRe(glob, options)
    : picomatch.makeRe(glob, options, false, true)

  const state = regex.state
  delete regex.state

  let isIgnored = () => false
  if (opts.ignore) {
    const ignoreOpts = {
      ...options,
      ignore: null,
      onMatch: null,
      onResult: null,
    }
    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState)
  }

  const matcher = (input, returnObject = false) => {
    const { isMatch, match, output } = picomatch.test(input, regex, options, {
      glob,
      posix,
    })
    const result = { glob, state, regex, posix, input, output, match, isMatch }

    if (typeof opts.onResult === 'function') {
      opts.onResult(result)
    }

    if (isMatch === false) {
      result.isMatch = false
      return returnObject ? result : false
    }

    if (isIgnored(input)) {
      if (typeof opts.onIgnore === 'function') {
        opts.onIgnore(result)
      }
      result.isMatch = false
      return returnObject ? result : false
    }

    if (typeof opts.onMatch === 'function') {
      opts.onMatch(result)
    }
    return returnObject ? result : true
  }

  if (returnState) {
    matcher.state = state
  }

  return matcher
}

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

picomatch.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected input to be a string')
  }

  if (input === '') {
    return { isMatch: false, output: '' }
  }

  const opts = options || {}
  const format = opts.format || (posix ? utils$1.toPosixSlashes : null)
  let match = input === glob
  let output = match && format ? format(input) : input

  if (match === false) {
    output = format ? format(input) : input
    match = output === glob
  }

  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch.matchBase(input, regex, options, posix)
    } else {
      match = regex.exec(output)
    }
  }

  return { isMatch: Boolean(match), match, output }
}

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

picomatch.matchBase = (
  input,
  glob,
  options,
  posix = utils$1.isWindows(options),
) => {
  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options)
  return regex.test(path__default['default'].basename(input))
}

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

picomatch.isMatch = (str, patterns, options) =>
  picomatch(patterns, options)(str)

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

picomatch.parse = (pattern, options) => {
  if (Array.isArray(pattern))
    return pattern.map((p) => picomatch.parse(p, options))
  return parse_1$1(pattern, { ...options, fastpaths: false })
}

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

picomatch.scan = (input, options) => scan_1(input, options)

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

picomatch.compileRe = (
  parsed,
  options,
  returnOutput = false,
  returnState = false,
) => {
  if (returnOutput === true) {
    return parsed.output
  }

  const opts = options || {}
  const prepend = opts.contains ? '' : '^'
  const append = opts.contains ? '' : '$'

  let source = `${prepend}(?:${parsed.output})${append}`
  if (parsed && parsed.negated === true) {
    source = `^(?!${source}).*$`
  }

  const regex = picomatch.toRegex(source, options)
  if (returnState === true) {
    regex.state = parsed
  }

  return regex
}

picomatch.makeRe = (
  input,
  options,
  returnOutput = false,
  returnState = false,
) => {
  if (!input || typeof input !== 'string') {
    throw new TypeError('Expected a non-empty string')
  }

  const opts = options || {}
  let parsed = { negated: false, fastpaths: true }
  let prefix = ''
  let output

  if (input.startsWith('./')) {
    input = input.slice(2)
    prefix = parsed.prefix = './'
  }

  if (opts.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
    output = parse_1$1.fastpaths(input, options)
  }

  if (output === undefined) {
    parsed = parse_1$1(input, options)
    parsed.prefix = prefix + (parsed.prefix || '')
  } else {
    parsed.output = output
  }

  return picomatch.compileRe(parsed, options, returnOutput, returnState)
}

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

picomatch.toRegex = (source, options) => {
  try {
    const opts = options || {}
    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''))
  } catch (err) {
    if (options && options.debug === true) throw err
    return /$^/
  }
}

/**
 * Picomatch constants.
 * @return {Object}
 */

picomatch.constants = constants$1

/**
 * Expose "picomatch"
 */

var picomatch_1 = picomatch

var D__git_packageInherit_node_modules_picomatch = picomatch_1

const isEmptyString = (val) =>
  typeof val === 'string' && (val === '' || val === './')

/**
 * Returns an array of strings that match one or more glob patterns.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm(list, patterns[, options]);
 *
 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {String|Array<string>} list List of strings to match.
 * @param {String|Array<string>} patterns One or more glob patterns to use for matching.
 * @param {Object} options See available [options](#options)
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

const micromatch = (list, patterns, options) => {
  patterns = [].concat(patterns)
  list = [].concat(list)

  let omit = new Set()
  let keep = new Set()
  let items = new Set()
  let negatives = 0

  let onResult = (state) => {
    items.add(state.output)
    if (options && options.onResult) {
      options.onResult(state)
    }
  }

  for (let i = 0; i < patterns.length; i++) {
    let isMatch = D__git_packageInherit_node_modules_picomatch(
      String(patterns[i]),
      { ...options, onResult },
      true,
    )
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob
    if (negated) negatives++

    for (let item of list) {
      let matched = isMatch(item, true)

      let match = negated ? !matched.isMatch : matched.isMatch
      if (!match) continue

      if (negated) {
        omit.add(matched.output)
      } else {
        omit.delete(matched.output)
        keep.add(matched.output)
      }
    }
  }

  let result = negatives === patterns.length ? [...items] : [...keep]
  let matches = result.filter((item) => !omit.has(item))

  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(', ')}"`)
    }

    if (options.nonull === true || options.nullglob === true) {
      return options.unescape
        ? patterns.map((p) => p.replace(/\\/g, ''))
        : patterns
    }
  }

  return matches
}

/**
 * Backwards compatibility
 */

micromatch.match = micromatch

/**
 * Returns a matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matcher(pattern[, options]);
 *
 * const isMatch = mm.matcher('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options`
 * @return {Function} Returns a matcher function.
 * @api public
 */

micromatch.matcher = (pattern, options) =>
  D__git_packageInherit_node_modules_picomatch(pattern, options)

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.isMatch(string, patterns[, options]);
 *
 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.isMatch = (str, patterns, options) =>
  D__git_packageInherit_node_modules_picomatch(patterns, options)(str)

/**
 * Backwards compatibility
 */

micromatch.any = micromatch.isMatch

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.not(list, patterns[, options]);
 *
 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

micromatch.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String)
  let result = new Set()
  let items = []

  let onResult = (state) => {
    if (options.onResult) options.onResult(state)
    items.push(state.output)
  }

  let matches = micromatch(list, patterns, { ...options, onResult })

  for (let item of items) {
    if (!matches.includes(item)) {
      result.add(item)
    }
  }
  return [...result]
}

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var mm = require('micromatch');
 * // mm.contains(string, pattern[, options]);
 *
 * console.log(mm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(mm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the patter matches any part of `str`.
 * @api public
 */

micromatch.contains = (str, pattern, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(
      `Expected a string: "${util__default['default'].inspect(str)}"`,
    )
  }

  if (Array.isArray(pattern)) {
    return pattern.some((p) => micromatch.contains(str, p, options))
  }

  if (typeof pattern === 'string') {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false
    }

    if (
      str.includes(pattern) ||
      (str.startsWith('./') && str.slice(2).includes(pattern))
    ) {
      return true
    }
  }

  return micromatch.isMatch(str, pattern, { ...options, contains: true })
}

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matchKeys(object, patterns[, options]);
 *
 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(mm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('Expected the first argument to be an object')
  }
  let keys = micromatch(Object.keys(obj), patterns, options)
  let res = {}
  for (let key of keys) res[key] = obj[key]
  return res
}

/**
 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.some(list, patterns[, options]);
 *
 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.some = (list, patterns, options) => {
  let items = [].concat(list)

  for (let pattern of [].concat(patterns)) {
    let isMatch = D__git_packageInherit_node_modules_picomatch(
      String(pattern),
      options,
    )
    if (items.some((item) => isMatch(item))) {
      return true
    }
  }
  return false
}

/**
 * Returns true if every string in the given `list` matches
 * any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.every(list, patterns[, options]);
 *
 * console.log(mm.every('foo.js', ['foo.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // false
 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.every = (list, patterns, options) => {
  let items = [].concat(list)

  for (let pattern of [].concat(patterns)) {
    let isMatch = D__git_packageInherit_node_modules_picomatch(
      String(pattern),
      options,
    )
    if (!items.every((item) => isMatch(item))) {
      return false
    }
  }
  return true
}

/**
 * Returns true if **all** of the given `patterns` match
 * the specified string.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.all(string, patterns[, options]);
 *
 * console.log(mm.all('foo.js', ['foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
 * // false
 *
 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
 * // true
 * ```
 * @param {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.all = (str, patterns, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(
      `Expected a string: "${util__default['default'].inspect(str)}"`,
    )
  }

  return []
    .concat(patterns)
    .every((p) => D__git_packageInherit_node_modules_picomatch(p, options)(str))
}

/**
 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.capture(pattern, string[, options]);
 *
 * console.log(mm.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `glob` Glob pattern to use for matching.
 * @param {String} `input` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
 * @api public
 */

micromatch.capture = (glob, input, options) => {
  let posix = utils$1.isWindows(options)
  let regex = D__git_packageInherit_node_modules_picomatch.makeRe(
    String(glob),
    { ...options, capture: true },
  )
  let match = regex.exec(posix ? utils$1.toPosixSlashes(input) : input)

  if (match) {
    return match.slice(1).map((v) => (v === void 0 ? '' : v))
  }
}

/**
 * Create a regular expression from the given glob `pattern`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.makeRe(pattern[, options]);
 *
 * console.log(mm.makeRe('*.js'));
 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
 * ```
 * @param {String} `pattern` A glob pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

micromatch.makeRe = (...args) =>
  D__git_packageInherit_node_modules_picomatch.makeRe(...args)

/**
 * Scan a glob pattern to separate the pattern into segments. Used
 * by the [split](#split) method.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm.scan(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

micromatch.scan = (...args) =>
  D__git_packageInherit_node_modules_picomatch.scan(...args)

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm(pattern[, options]);
 * ```
 * @param {String} `glob`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as regex source string.
 * @api public
 */

micromatch.parse = (patterns, options) => {
  let res = []
  for (let pattern of [].concat(patterns || [])) {
    for (let str of D__git_packageInherit_node_modules_fastGlob_node_modules_braces(
      String(pattern),
      options,
    )) {
      res.push(D__git_packageInherit_node_modules_picomatch.parse(str, options))
    }
  }
  return res
}

/**
 * Process the given brace `pattern`.
 *
 * ```js
 * const { braces } = require('micromatch');
 * console.log(braces('foo/{a,b,c}/bar'));
 * //=> [ 'foo/(a|b|c)/bar' ]
 *
 * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
 * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
 * ```
 * @param {String} `pattern` String with brace pattern to process.
 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
 * @return {Array}
 * @api public
 */

micromatch.braces = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string')
  if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
    return [pattern]
  }
  return D__git_packageInherit_node_modules_fastGlob_node_modules_braces(
    pattern,
    options,
  )
}

/**
 * Expand braces
 */

micromatch.braceExpand = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string')
  return micromatch.braces(pattern, { ...options, expand: true })
}

/**
 * Expose micromatch
 */

var D__git_packageInherit_node_modules_fastGlob_node_modules_micromatch = micromatch

var pattern = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0

  const GLOBSTAR = '**'
  const ESCAPE_SYMBOL = '\\'
  const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/
  const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[.*]/
  const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\(.*\|.*\)/
  const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\(.*\)/
  const BRACE_EXPANSIONS_SYMBOLS_RE = /{.*(?:,|\.\.).*}/
  function isStaticPattern(pattern, options = {}) {
    return !isDynamicPattern(pattern, options)
  }
  exports.isStaticPattern = isStaticPattern
  function isDynamicPattern(pattern, options = {}) {
    /**
     * A special case with an empty string is necessary for matching patterns that start with a forward slash.
     * An empty string cannot be a dynamic pattern.
     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.
     */
    if (pattern === '') {
      return false
    }
    /**
     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check
     * filepath directly (without read directory).
     */
    if (
      options.caseSensitiveMatch === false ||
      pattern.includes(ESCAPE_SYMBOL)
    ) {
      return true
    }
    if (
      COMMON_GLOB_SYMBOLS_RE.test(pattern) ||
      REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) ||
      REGEX_GROUP_SYMBOLS_RE.test(pattern)
    ) {
      return true
    }
    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
      return true
    }
    if (
      options.braceExpansion !== false &&
      BRACE_EXPANSIONS_SYMBOLS_RE.test(pattern)
    ) {
      return true
    }
    return false
  }
  exports.isDynamicPattern = isDynamicPattern
  function convertToPositivePattern(pattern) {
    return isNegativePattern(pattern) ? pattern.slice(1) : pattern
  }
  exports.convertToPositivePattern = convertToPositivePattern
  function convertToNegativePattern(pattern) {
    return '!' + pattern
  }
  exports.convertToNegativePattern = convertToNegativePattern
  function isNegativePattern(pattern) {
    return pattern.startsWith('!') && pattern[1] !== '('
  }
  exports.isNegativePattern = isNegativePattern
  function isPositivePattern(pattern) {
    return !isNegativePattern(pattern)
  }
  exports.isPositivePattern = isPositivePattern
  function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern)
  }
  exports.getNegativePatterns = getNegativePatterns
  function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern)
  }
  exports.getPositivePatterns = getPositivePatterns
  function getBaseDirectory(pattern) {
    return D__git_packageInherit_node_modules_globParent(pattern, {
      flipBackslashes: false,
    })
  }
  exports.getBaseDirectory = getBaseDirectory
  function hasGlobStar(pattern) {
    return pattern.includes(GLOBSTAR)
  }
  exports.hasGlobStar = hasGlobStar
  function endsWithSlashGlobStar(pattern) {
    return pattern.endsWith('/' + GLOBSTAR)
  }
  exports.endsWithSlashGlobStar = endsWithSlashGlobStar
  function isAffectDepthOfReadingPattern(pattern) {
    const basename = path__default['default'].basename(pattern)
    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename)
  }
  exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern
  function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern) => {
      return collection.concat(expandBraceExpansion(pattern))
    }, [])
  }
  exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion
  function expandBraceExpansion(pattern) {
    return D__git_packageInherit_node_modules_fastGlob_node_modules_micromatch.braces(
      pattern,
      {
        expand: true,
        nodupes: true,
      },
    )
  }
  exports.expandBraceExpansion = expandBraceExpansion
  function getPatternParts(pattern, options) {
    let { parts } = D__git_packageInherit_node_modules_picomatch.scan(
      pattern,
      Object.assign(Object.assign({}, options), { parts: true }),
    )
    /**
     * The scan method returns an empty array in some cases.
     * See micromatch/picomatch#58 for more details.
     */
    if (parts.length === 0) {
      parts = [pattern]
    }
    /**
     * The scan method does not return an empty part for the pattern with a forward slash.
     * This is another part of micromatch/picomatch#58.
     */
    if (parts[0].startsWith('/')) {
      parts[0] = parts[0].slice(1)
      parts.unshift('')
    }
    return parts
  }
  exports.getPatternParts = getPatternParts
  function makeRe(pattern, options) {
    return D__git_packageInherit_node_modules_fastGlob_node_modules_micromatch.makeRe(
      pattern,
      options,
    )
  }
  exports.makeRe = makeRe
  function convertPatternsToRe(patterns, options) {
    return patterns.map((pattern) => makeRe(pattern, options))
  }
  exports.convertPatternsToRe = convertPatternsToRe
  function matchAny(entry, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry))
  }
  exports.matchAny = matchAny
})

var stream = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.merge = void 0

  function merge(streams) {
    const mergedStream = D__git_packageInherit_node_modules_merge2(streams)
    streams.forEach((stream) => {
      stream.once('error', (error) => mergedStream.emit('error', error))
    })
    mergedStream.once('close', () => propagateCloseEventToSources(streams))
    mergedStream.once('end', () => propagateCloseEventToSources(streams))
    return mergedStream
  }
  exports.merge = merge
  function propagateCloseEventToSources(streams) {
    streams.forEach((stream) => stream.emit('close'))
  }
})

var string = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.isEmpty = exports.isString = void 0
  function isString(input) {
    return typeof input === 'string'
  }
  exports.isString = isString
  function isEmpty(input) {
    return input === ''
  }
  exports.isEmpty = isEmpty
})

var utils$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0

  exports.array = array

  exports.errno = errno

  exports.fs = fs

  exports.path = path_1

  exports.pattern = pattern

  exports.stream = stream

  exports.string = string
})

var tasks = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0

  function generate(patterns, settings) {
    const positivePatterns = getPositivePatterns(patterns)
    const negativePatterns = getNegativePatternsAsPositive(
      patterns,
      settings.ignore,
    )
    const staticPatterns = positivePatterns.filter((pattern) =>
      utils$2.pattern.isStaticPattern(pattern, settings),
    )
    const dynamicPatterns = positivePatterns.filter((pattern) =>
      utils$2.pattern.isDynamicPattern(pattern, settings),
    )
    const staticTasks = convertPatternsToTasks(
      staticPatterns,
      negativePatterns,
      /* dynamic */ false,
    )
    const dynamicTasks = convertPatternsToTasks(
      dynamicPatterns,
      negativePatterns,
      /* dynamic */ true,
    )
    return staticTasks.concat(dynamicTasks)
  }
  exports.generate = generate
  function convertPatternsToTasks(positive, negative, dynamic) {
    const positivePatternsGroup = groupPatternsByBaseDirectory(positive)
    // When we have a global group – there is no reason to divide the patterns into independent tasks.
    // In this case, the global task covers the rest.
    if ('.' in positivePatternsGroup) {
      const task = convertPatternGroupToTask('.', positive, negative, dynamic)
      return [task]
    }
    return convertPatternGroupsToTasks(positivePatternsGroup, negative, dynamic)
  }
  exports.convertPatternsToTasks = convertPatternsToTasks
  function getPositivePatterns(patterns) {
    return utils$2.pattern.getPositivePatterns(patterns)
  }
  exports.getPositivePatterns = getPositivePatterns
  function getNegativePatternsAsPositive(patterns, ignore) {
    const negative = utils$2.pattern
      .getNegativePatterns(patterns)
      .concat(ignore)
    const positive = negative.map(utils$2.pattern.convertToPositivePattern)
    return positive
  }
  exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive
  function groupPatternsByBaseDirectory(patterns) {
    const group = {}
    return patterns.reduce((collection, pattern) => {
      const base = utils$2.pattern.getBaseDirectory(pattern)
      if (base in collection) {
        collection[base].push(pattern)
      } else {
        collection[base] = [pattern]
      }
      return collection
    }, group)
  }
  exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory
  function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base) => {
      return convertPatternGroupToTask(base, positive[base], negative, dynamic)
    })
  }
  exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks
  function convertPatternGroupToTask(base, positive, negative, dynamic) {
    return {
      dynamic,
      positive,
      negative,
      base,
      patterns: [].concat(
        positive,
        negative.map(utils$2.pattern.convertToNegativePattern),
      ),
    }
  }
  exports.convertPatternGroupToTask = convertPatternGroupToTask
})

var async = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  function read(path, settings, callback) {
    settings.fs.lstat(path, (lstatError, lstat) => {
      if (lstatError !== null) {
        return callFailureCallback(callback, lstatError)
      }
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return callSuccessCallback(callback, lstat)
      }
      settings.fs.stat(path, (statError, stat) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            return callFailureCallback(callback, statError)
          }
          return callSuccessCallback(callback, lstat)
        }
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true
        }
        callSuccessCallback(callback, stat)
      })
    })
  }
  exports.read = read
  function callFailureCallback(callback, error) {
    callback(error)
  }
  function callSuccessCallback(callback, result) {
    callback(null, result)
  }
})

var sync$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  function read(path, settings) {
    const lstat = settings.fs.lstatSync(path)
    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
      return lstat
    }
    try {
      const stat = settings.fs.statSync(path)
      if (settings.markSymbolicLink) {
        stat.isSymbolicLink = () => true
      }
      return stat
    } catch (error) {
      if (!settings.throwErrorOnBrokenSymbolicLink) {
        return lstat
      }
      throw error
    }
  }
  exports.read = read
})

var fs_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs__default['default'].lstat,
    stat: fs__default['default'].stat,
    lstatSync: fs__default['default'].lstatSync,
    statSync: fs__default['default'].statSync,
  }
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
      return exports.FILE_SYSTEM_ADAPTER
    }
    return Object.assign(
      Object.assign({}, exports.FILE_SYSTEM_ADAPTER),
      fsMethods,
    )
  }
  exports.createFileSystemAdapter = createFileSystemAdapter
})

var settings = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Settings {
    constructor(_options = {}) {
      this._options = _options
      this.followSymbolicLink = this._getValue(
        this._options.followSymbolicLink,
        true,
      )
      this.fs = fs_1.createFileSystemAdapter(this._options.fs)
      this.markSymbolicLink = this._getValue(
        this._options.markSymbolicLink,
        false,
      )
      this.throwErrorOnBrokenSymbolicLink = this._getValue(
        this._options.throwErrorOnBrokenSymbolicLink,
        true,
      )
    }
    _getValue(option, value) {
      return option === undefined ? value : option
    }
  }
  exports.default = Settings
})

var out = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.Settings = settings.default
  function stat(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
      return async.read(path, getSettings(), optionsOrSettingsOrCallback)
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback)
  }
  exports.stat = stat
  function statSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings)
    return sync$3.read(path, settings)
  }
  exports.statSync = statSync
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings.default) {
      return settingsOrOptions
    }
    return new settings.default(settingsOrOptions)
  }
})

var D__git_packageInherit_node_modules_runParallel = runParallel

function runParallel(tasks, cb) {
  var results, pending, keys
  var isSync = true

  if (Array.isArray(tasks)) {
    results = []
    pending = tasks.length
  } else {
    keys = Object.keys(tasks)
    results = {}
    pending = keys.length
  }

  function done(err) {
    function end() {
      if (cb) cb(err, results)
      cb = null
    }
    if (isSync) process.nextTick(end)
    else end()
  }

  function each(i, err, result) {
    results[i] = result
    if (--pending === 0 || err) {
      done(err)
    }
  }

  if (!pending) {
    // empty
    done(null)
  } else if (keys) {
    // object
    keys.forEach(function (key) {
      tasks[key](function (err, result) {
        each(key, err, result)
      })
    })
  } else {
    // array
    tasks.forEach(function (task, i) {
      task(function (err, result) {
        each(i, err, result)
      })
    })
  }

  isSync = false
}

var constants$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.')
  const MAJOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[0], 10)
  const MINOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[1], 10)
  const SUPPORTED_MAJOR_VERSION = 10
  const SUPPORTED_MINOR_VERSION = 10
  const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION
  const IS_MATCHED_BY_MAJOR_AND_MINOR =
    MAJOR_VERSION === SUPPORTED_MAJOR_VERSION &&
    MINOR_VERSION >= SUPPORTED_MINOR_VERSION
  /**
   * IS `true` for Node.js 10.10 and greater.
   */
  exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES =
    IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR
})

var fs$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name
      this.isBlockDevice = stats.isBlockDevice.bind(stats)
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats)
      this.isDirectory = stats.isDirectory.bind(stats)
      this.isFIFO = stats.isFIFO.bind(stats)
      this.isFile = stats.isFile.bind(stats)
      this.isSocket = stats.isSocket.bind(stats)
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats)
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats)
  }
  exports.createDirentFromStats = createDirentFromStats
})

var utils$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.fs = fs$1
})

var async$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  function read(directory, settings, callback) {
    if (!settings.stats && constants$2.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings, callback)
    }
    return readdir(directory, settings, callback)
  }
  exports.read = read
  function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(
      directory,
      { withFileTypes: true },
      (readdirError, dirents) => {
        if (readdirError !== null) {
          return callFailureCallback(callback, readdirError)
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`,
        }))
        if (!settings.followSymbolicLinks) {
          return callSuccessCallback(callback, entries)
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings))
        D__git_packageInherit_node_modules_runParallel(
          tasks,
          (rplError, rplEntries) => {
            if (rplError !== null) {
              return callFailureCallback(callback, rplError)
            }
            callSuccessCallback(callback, rplEntries)
          },
        )
      },
    )
  }
  exports.readdirWithFileTypes = readdirWithFileTypes
  function makeRplTaskEntry(entry, settings) {
    return (done) => {
      if (!entry.dirent.isSymbolicLink()) {
        return done(null, entry)
      }
      settings.fs.stat(entry.path, (statError, stats) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            return done(statError)
          }
          return done(null, entry)
        }
        entry.dirent = utils$3.fs.createDirentFromStats(entry.name, stats)
        return done(null, entry)
      })
    }
  }
  function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
      if (readdirError !== null) {
        return callFailureCallback(callback, readdirError)
      }
      const filepaths = names.map(
        (name) => `${directory}${settings.pathSegmentSeparator}${name}`,
      )
      const tasks = filepaths.map((filepath) => {
        return (done) => out.stat(filepath, settings.fsStatSettings, done)
      })
      D__git_packageInherit_node_modules_runParallel(
        tasks,
        (rplError, results) => {
          if (rplError !== null) {
            return callFailureCallback(callback, rplError)
          }
          const entries = []
          names.forEach((name, index) => {
            const stats = results[index]
            const entry = {
              name,
              path: filepaths[index],
              dirent: utils$3.fs.createDirentFromStats(name, stats),
            }
            if (settings.stats) {
              entry.stats = stats
            }
            entries.push(entry)
          })
          callSuccessCallback(callback, entries)
        },
      )
    })
  }
  exports.readdir = readdir
  function callFailureCallback(callback, error) {
    callback(error)
  }
  function callSuccessCallback(callback, result) {
    callback(null, result)
  }
})

var sync$4 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  function read(directory, settings) {
    if (!settings.stats && constants$2.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings)
    }
    return readdir(directory, settings)
  }
  exports.read = read
  function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true })
    return dirents.map((dirent) => {
      const entry = {
        dirent,
        name: dirent.name,
        path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`,
      }
      if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
        try {
          const stats = settings.fs.statSync(entry.path)
          entry.dirent = utils$3.fs.createDirentFromStats(entry.name, stats)
        } catch (error) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            throw error
          }
        }
      }
      return entry
    })
  }
  exports.readdirWithFileTypes = readdirWithFileTypes
  function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory)
    return names.map((name) => {
      const entryPath = `${directory}${settings.pathSegmentSeparator}${name}`
      const stats = out.statSync(entryPath, settings.fsStatSettings)
      const entry = {
        name,
        path: entryPath,
        dirent: utils$3.fs.createDirentFromStats(name, stats),
      }
      if (settings.stats) {
        entry.stats = stats
      }
      return entry
    })
  }
  exports.readdir = readdir
})

var fs_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs__default['default'].lstat,
    stat: fs__default['default'].stat,
    lstatSync: fs__default['default'].lstatSync,
    statSync: fs__default['default'].statSync,
    readdir: fs__default['default'].readdir,
    readdirSync: fs__default['default'].readdirSync,
  }
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
      return exports.FILE_SYSTEM_ADAPTER
    }
    return Object.assign(
      Object.assign({}, exports.FILE_SYSTEM_ADAPTER),
      fsMethods,
    )
  }
  exports.createFileSystemAdapter = createFileSystemAdapter
})

var settings$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Settings {
    constructor(_options = {}) {
      this._options = _options
      this.followSymbolicLinks = this._getValue(
        this._options.followSymbolicLinks,
        false,
      )
      this.fs = fs_1$1.createFileSystemAdapter(this._options.fs)
      this.pathSegmentSeparator = this._getValue(
        this._options.pathSegmentSeparator,
        path__default['default'].sep,
      )
      this.stats = this._getValue(this._options.stats, false)
      this.throwErrorOnBrokenSymbolicLink = this._getValue(
        this._options.throwErrorOnBrokenSymbolicLink,
        true,
      )
      this.fsStatSettings = new out.Settings({
        followSymbolicLink: this.followSymbolicLinks,
        fs: this.fs,
        throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink,
      })
    }
    _getValue(option, value) {
      return option === undefined ? value : option
    }
  }
  exports.default = Settings
})

var out$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.Settings = settings$1.default
  function scandir(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
      return async$1.read(path, getSettings(), optionsOrSettingsOrCallback)
    }
    async$1.read(path, getSettings(optionsOrSettingsOrCallback), callback)
  }
  exports.scandir = scandir
  function scandirSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings)
    return sync$4.read(path, settings)
  }
  exports.scandirSync = scandirSync
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings$1.default) {
      return settingsOrOptions
    }
    return new settings$1.default(settingsOrOptions)
  }
})

function reusify(Constructor) {
  var head = new Constructor()
  var tail = head

  function get() {
    var current = head

    if (current.next) {
      head = current.next
    } else {
      head = new Constructor()
      tail = head
    }

    current.next = null

    return current
  }

  function release(obj) {
    tail.next = obj
    tail = obj
  }

  return {
    get: get,
    release: release,
  }
}

var reusify_1 = reusify

var common$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
      return true
    }
    return !settings.errorFilter(error)
  }
  exports.isFatalError = isFatalError
  function isAppliedFilter(filter, value) {
    return filter === null || filter(value)
  }
  exports.isAppliedFilter = isAppliedFilter
  function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[\\/]/).join(separator)
  }
  exports.replacePathSegmentSeparator = replacePathSegmentSeparator
  function joinPathSegments(a, b, separator) {
    if (a === '') {
      return b
    }
    return a + separator + b
  }
  exports.joinPathSegments = joinPathSegments
})

var reader = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Reader {
    constructor(_root, _settings) {
      this._root = _root
      this._settings = _settings
      this._root = common$1.replacePathSegmentSeparator(
        _root,
        _settings.pathSegmentSeparator,
      )
    }
  }
  exports.default = Reader
})

function fastqueue(context, worker, concurrency) {
  if (typeof context === 'function') {
    concurrency = worker
    worker = context
    context = null
  }

  var cache = reusify_1(Task)
  var queueHead = null
  var queueTail = null
  var _running = 0

  var self = {
    push: push,
    drain: noop,
    saturated: noop,
    pause: pause,
    paused: false,
    concurrency: concurrency,
    running: running,
    resume: resume,
    idle: idle,
    length: length,
    getQueue: getQueue,
    unshift: unshift,
    empty: noop,
    kill: kill,
    killAndDrain: killAndDrain,
  }

  return self

  function running() {
    return _running
  }

  function pause() {
    self.paused = true
  }

  function length() {
    var current = queueHead
    var counter = 0

    while (current) {
      current = current.next
      counter++
    }

    return counter
  }

  function getQueue() {
    var current = queueHead
    var tasks = []

    while (current) {
      tasks.push(current.value)
      current = current.next
    }

    return tasks
  }

  function resume() {
    if (!self.paused) return
    self.paused = false
    for (var i = 0; i < self.concurrency; i++) {
      _running++
      release()
    }
  }

  function idle() {
    return _running === 0 && self.length() === 0
  }

  function push(value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop

    if (_running === self.concurrency || self.paused) {
      if (queueTail) {
        queueTail.next = current
        queueTail = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function unshift(value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop

    if (_running === self.concurrency || self.paused) {
      if (queueHead) {
        current.next = queueHead
        queueHead = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function release(holder) {
    if (holder) {
      cache.release(holder)
    }
    var next = queueHead
    if (next) {
      if (!self.paused) {
        if (queueTail === queueHead) {
          queueTail = null
        }
        queueHead = next.next
        next.next = null
        worker.call(context, next.value, next.worked)
        if (queueTail === null) {
          self.empty()
        }
      } else {
        _running--
      }
    } else if (--_running === 0) {
      self.drain()
    }
  }

  function kill() {
    queueHead = null
    queueTail = null
    self.drain = noop
  }

  function killAndDrain() {
    queueHead = null
    queueTail = null
    self.drain()
    self.drain = noop
  }
}

function noop() {}

function Task() {
  this.value = null
  this.callback = noop
  this.next = null
  this.release = noop
  this.context = null

  var self = this

  this.worked = function worked(err, result) {
    var callback = self.callback
    self.value = null
    self.callback = noop
    callback.call(self.context, err, result)
    self.release(self)
  }
}

var queue = fastqueue

var async$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class AsyncReader extends reader.default {
    constructor(_root, _settings) {
      super(_root, _settings)
      this._settings = _settings
      this._scandir = out$1.scandir
      this._emitter = new events_1__default['default'].EventEmitter()
      this._queue = queue(this._worker.bind(this), this._settings.concurrency)
      this._isFatalError = false
      this._isDestroyed = false
      this._queue.drain = () => {
        if (!this._isFatalError) {
          this._emitter.emit('end')
        }
      }
    }
    read() {
      this._isFatalError = false
      this._isDestroyed = false
      setImmediate(() => {
        this._pushToQueue(this._root, this._settings.basePath)
      })
      return this._emitter
    }
    destroy() {
      if (this._isDestroyed) {
        throw new Error('The reader is already destroyed')
      }
      this._isDestroyed = true
      this._queue.killAndDrain()
    }
    onEntry(callback) {
      this._emitter.on('entry', callback)
    }
    onError(callback) {
      this._emitter.once('error', callback)
    }
    onEnd(callback) {
      this._emitter.once('end', callback)
    }
    _pushToQueue(directory, base) {
      const queueItem = { directory, base }
      this._queue.push(queueItem, (error) => {
        if (error !== null) {
          this._handleError(error)
        }
      })
    }
    _worker(item, done) {
      this._scandir(
        item.directory,
        this._settings.fsScandirSettings,
        (error, entries) => {
          if (error !== null) {
            return done(error, undefined)
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base)
          }
          done(null, undefined)
        },
      )
    }
    _handleError(error) {
      if (!common$1.isFatalError(this._settings, error)) {
        return
      }
      this._isFatalError = true
      this._isDestroyed = true
      this._emitter.emit('error', error)
    }
    _handleEntry(entry, base) {
      if (this._isDestroyed || this._isFatalError) {
        return
      }
      const fullpath = entry.path
      if (base !== undefined) {
        entry.path = common$1.joinPathSegments(
          base,
          entry.name,
          this._settings.pathSegmentSeparator,
        )
      }
      if (common$1.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._emitEntry(entry)
      }
      if (
        entry.dirent.isDirectory() &&
        common$1.isAppliedFilter(this._settings.deepFilter, entry)
      ) {
        this._pushToQueue(fullpath, entry.path)
      }
    }
    _emitEntry(entry) {
      this._emitter.emit('entry', entry)
    }
  }
  exports.default = AsyncReader
})

var async$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class AsyncProvider {
    constructor(_root, _settings) {
      this._root = _root
      this._settings = _settings
      this._reader = new async$2.default(this._root, this._settings)
      this._storage = new Set()
    }
    read(callback) {
      this._reader.onError((error) => {
        callFailureCallback(callback, error)
      })
      this._reader.onEntry((entry) => {
        this._storage.add(entry)
      })
      this._reader.onEnd(() => {
        callSuccessCallback(callback, [...this._storage])
      })
      this._reader.read()
    }
  }
  exports.default = AsyncProvider
  function callFailureCallback(callback, error) {
    callback(error)
  }
  function callSuccessCallback(callback, entries) {
    callback(null, entries)
  }
})

var stream$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class StreamProvider {
    constructor(_root, _settings) {
      this._root = _root
      this._settings = _settings
      this._reader = new async$2.default(this._root, this._settings)
      this._stream = new stream_1__default['default'].Readable({
        objectMode: true,
        read: () => {},
        destroy: this._reader.destroy.bind(this._reader),
      })
    }
    read() {
      this._reader.onError((error) => {
        this._stream.emit('error', error)
      })
      this._reader.onEntry((entry) => {
        this._stream.push(entry)
      })
      this._reader.onEnd(() => {
        this._stream.push(null)
      })
      this._reader.read()
      return this._stream
    }
  }
  exports.default = StreamProvider
})

var sync$5 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class SyncReader extends reader.default {
    constructor() {
      super(...arguments)
      this._scandir = out$1.scandirSync
      this._storage = new Set()
      this._queue = new Set()
    }
    read() {
      this._pushToQueue(this._root, this._settings.basePath)
      this._handleQueue()
      return [...this._storage]
    }
    _pushToQueue(directory, base) {
      this._queue.add({ directory, base })
    }
    _handleQueue() {
      for (const item of this._queue.values()) {
        this._handleDirectory(item.directory, item.base)
      }
    }
    _handleDirectory(directory, base) {
      try {
        const entries = this._scandir(
          directory,
          this._settings.fsScandirSettings,
        )
        for (const entry of entries) {
          this._handleEntry(entry, base)
        }
      } catch (error) {
        this._handleError(error)
      }
    }
    _handleError(error) {
      if (!common$1.isFatalError(this._settings, error)) {
        return
      }
      throw error
    }
    _handleEntry(entry, base) {
      const fullpath = entry.path
      if (base !== undefined) {
        entry.path = common$1.joinPathSegments(
          base,
          entry.name,
          this._settings.pathSegmentSeparator,
        )
      }
      if (common$1.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._pushToStorage(entry)
      }
      if (
        entry.dirent.isDirectory() &&
        common$1.isAppliedFilter(this._settings.deepFilter, entry)
      ) {
        this._pushToQueue(fullpath, entry.path)
      }
    }
    _pushToStorage(entry) {
      this._storage.add(entry)
    }
  }
  exports.default = SyncReader
})

var sync$6 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class SyncProvider {
    constructor(_root, _settings) {
      this._root = _root
      this._settings = _settings
      this._reader = new sync$5.default(this._root, this._settings)
    }
    read() {
      return this._reader.read()
    }
  }
  exports.default = SyncProvider
})

var settings$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Settings {
    constructor(_options = {}) {
      this._options = _options
      this.basePath = this._getValue(this._options.basePath, undefined)
      this.concurrency = this._getValue(this._options.concurrency, Infinity)
      this.deepFilter = this._getValue(this._options.deepFilter, null)
      this.entryFilter = this._getValue(this._options.entryFilter, null)
      this.errorFilter = this._getValue(this._options.errorFilter, null)
      this.pathSegmentSeparator = this._getValue(
        this._options.pathSegmentSeparator,
        path__default['default'].sep,
      )
      this.fsScandirSettings = new out$1.Settings({
        followSymbolicLinks: this._options.followSymbolicLinks,
        fs: this._options.fs,
        pathSegmentSeparator: this._options.pathSegmentSeparator,
        stats: this._options.stats,
        throwErrorOnBrokenSymbolicLink: this._options
          .throwErrorOnBrokenSymbolicLink,
      })
    }
    _getValue(option, value) {
      return option === undefined ? value : option
    }
  }
  exports.default = Settings
})

var out$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  exports.Settings = settings$2.default
  function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
      return new async$3.default(directory, getSettings()).read(
        optionsOrSettingsOrCallback,
      )
    }
    new async$3.default(
      directory,
      getSettings(optionsOrSettingsOrCallback),
    ).read(callback)
  }
  exports.walk = walk
  function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings)
    const provider = new sync$6.default(directory, settings)
    return provider.read()
  }
  exports.walkSync = walkSync
  function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings)
    const provider = new stream$1.default(directory, settings)
    return provider.read()
  }
  exports.walkStream = walkStream
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings$2.default) {
      return settingsOrOptions
    }
    return new settings$2.default(settingsOrOptions)
  }
})

var reader$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Reader {
    constructor(_settings) {
      this._settings = _settings
      this._fsStatSettings = new out.Settings({
        followSymbolicLink: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks,
      })
    }
    _getFullEntryPath(filepath) {
      return path__default['default'].resolve(this._settings.cwd, filepath)
    }
    _makeEntry(stats, pattern) {
      const entry = {
        name: pattern,
        path: pattern,
        dirent: utils$2.fs.createDirentFromStats(pattern, stats),
      }
      if (this._settings.stats) {
        entry.stats = stats
      }
      return entry
    }
    _isFatalError(error) {
      return (
        !utils$2.errno.isEnoentCodeError(error) &&
        !this._settings.suppressErrors
      )
    }
  }
  exports.default = Reader
})

var stream$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ReaderStream extends reader$1.default {
    constructor() {
      super(...arguments)
      this._walkStream = out$2.walkStream
      this._stat = out.stat
    }
    dynamic(root, options) {
      return this._walkStream(root, options)
    }
    static(patterns, options) {
      const filepaths = patterns.map(this._getFullEntryPath, this)
      const stream = new stream_1__default['default'].PassThrough({
        objectMode: true,
      })
      stream._write = (index, _enc, done) => {
        return this._getEntry(filepaths[index], patterns[index], options)
          .then((entry) => {
            if (entry !== null && options.entryFilter(entry)) {
              stream.push(entry)
            }
            if (index === filepaths.length - 1) {
              stream.end()
            }
            done()
          })
          .catch(done)
      }
      for (let i = 0; i < filepaths.length; i++) {
        stream.write(i)
      }
      return stream
    }
    _getEntry(filepath, pattern, options) {
      return this._getStat(filepath)
        .then((stats) => this._makeEntry(stats, pattern))
        .catch((error) => {
          if (options.errorFilter(error)) {
            return null
          }
          throw error
        })
    }
    _getStat(filepath) {
      return new Promise((resolve, reject) => {
        this._stat(filepath, this._fsStatSettings, (error, stats) => {
          return error === null ? resolve(stats) : reject(error)
        })
      })
    }
  }
  exports.default = ReaderStream
})

var matcher = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Matcher {
    constructor(_patterns, _settings, _micromatchOptions) {
      this._patterns = _patterns
      this._settings = _settings
      this._micromatchOptions = _micromatchOptions
      this._storage = []
      this._fillStorage()
    }
    _fillStorage() {
      /**
       * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).
       * So, before expand patterns with brace expansion into separated patterns.
       */
      const patterns = utils$2.pattern.expandPatternsWithBraceExpansion(
        this._patterns,
      )
      for (const pattern of patterns) {
        const segments = this._getPatternSegments(pattern)
        const sections = this._splitSegmentsIntoSections(segments)
        this._storage.push({
          complete: sections.length <= 1,
          pattern,
          segments,
          sections,
        })
      }
    }
    _getPatternSegments(pattern) {
      const parts = utils$2.pattern.getPatternParts(
        pattern,
        this._micromatchOptions,
      )
      return parts.map((part) => {
        const dynamic = utils$2.pattern.isDynamicPattern(part, this._settings)
        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part,
          }
        }
        return {
          dynamic: true,
          pattern: part,
          patternRe: utils$2.pattern.makeRe(part, this._micromatchOptions),
        }
      })
    }
    _splitSegmentsIntoSections(segments) {
      return utils$2.array.splitWhen(
        segments,
        (segment) =>
          segment.dynamic && utils$2.pattern.hasGlobStar(segment.pattern),
      )
    }
  }
  exports.default = Matcher
})

var partial = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class PartialMatcher extends matcher.default {
    match(filepath) {
      const parts = filepath.split('/')
      const levels = parts.length
      const patterns = this._storage.filter(
        (info) => !info.complete || info.segments.length > levels,
      )
      for (const pattern of patterns) {
        const section = pattern.sections[0]
        /**
         * In this case, the pattern has a globstar and we must read all directories unconditionally,
         * but only if the level has reached the end of the first group.
         *
         * fixtures/{a,b}/**
         *  ^ true/false  ^ always true
         */
        if (!pattern.complete && levels > section.length) {
          return true
        }
        const match = parts.every((part, index) => {
          const segment = pattern.segments[index]
          if (segment.dynamic && segment.patternRe.test(part)) {
            return true
          }
          if (!segment.dynamic && segment.pattern === part) {
            return true
          }
          return false
        })
        if (match) {
          return true
        }
      }
      return false
    }
  }
  exports.default = PartialMatcher
})

var deep = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class DeepFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings
      this._micromatchOptions = _micromatchOptions
    }
    getFilter(basePath, positive, negative) {
      const matcher = this._getMatcher(positive)
      const negativeRe = this._getNegativePatternsRe(negative)
      return (entry) => this._filter(basePath, entry, matcher, negativeRe)
    }
    _getMatcher(patterns) {
      return new partial.default(
        patterns,
        this._settings,
        this._micromatchOptions,
      )
    }
    _getNegativePatternsRe(patterns) {
      const affectDepthOfReadingPatterns = patterns.filter(
        utils$2.pattern.isAffectDepthOfReadingPattern,
      )
      return utils$2.pattern.convertPatternsToRe(
        affectDepthOfReadingPatterns,
        this._micromatchOptions,
      )
    }
    _filter(basePath, entry, matcher, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry.path)) {
        return false
      }
      if (this._isSkippedSymbolicLink(entry)) {
        return false
      }
      const filepath = utils$2.path.removeLeadingDotSegment(entry.path)
      if (this._isSkippedByPositivePatterns(filepath, matcher)) {
        return false
      }
      return this._isSkippedByNegativePatterns(filepath, negativeRe)
    }
    _isSkippedByDeep(basePath, entryPath) {
      /**
       * Avoid unnecessary depth calculations when it doesn't matter.
       */
      if (this._settings.deep === Infinity) {
        return false
      }
      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep
    }
    _getEntryLevel(basePath, entryPath) {
      const entryPathDepth = entryPath.split('/').length
      if (basePath === '') {
        return entryPathDepth
      }
      const basePathDepth = basePath.split('/').length
      return entryPathDepth - basePathDepth
    }
    _isSkippedSymbolicLink(entry) {
      return (
        !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink()
      )
    }
    _isSkippedByPositivePatterns(entryPath, matcher) {
      return !this._settings.baseNameMatch && !matcher.match(entryPath)
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils$2.pattern.matchAny(entryPath, patternsRe)
    }
  }
  exports.default = DeepFilter
})

var entry = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class EntryFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings
      this._micromatchOptions = _micromatchOptions
      this.index = new Map()
    }
    getFilter(positive, negative) {
      const positiveRe = utils$2.pattern.convertPatternsToRe(
        positive,
        this._micromatchOptions,
      )
      const negativeRe = utils$2.pattern.convertPatternsToRe(
        negative,
        this._micromatchOptions,
      )
      return (entry) => this._filter(entry, positiveRe, negativeRe)
    }
    _filter(entry, positiveRe, negativeRe) {
      if (this._settings.unique && this._isDuplicateEntry(entry)) {
        return false
      }
      if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
        return false
      }
      if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
        return false
      }
      const filepath = this._settings.baseNameMatch ? entry.name : entry.path
      const isMatched =
        this._isMatchToPatterns(filepath, positiveRe) &&
        !this._isMatchToPatterns(entry.path, negativeRe)
      if (this._settings.unique && isMatched) {
        this._createIndexRecord(entry)
      }
      return isMatched
    }
    _isDuplicateEntry(entry) {
      return this.index.has(entry.path)
    }
    _createIndexRecord(entry) {
      this.index.set(entry.path, undefined)
    }
    _onlyFileFilter(entry) {
      return this._settings.onlyFiles && !entry.dirent.isFile()
    }
    _onlyDirectoryFilter(entry) {
      return this._settings.onlyDirectories && !entry.dirent.isDirectory()
    }
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
      if (!this._settings.absolute) {
        return false
      }
      const fullpath = utils$2.path.makeAbsolute(this._settings.cwd, entryPath)
      return utils$2.pattern.matchAny(fullpath, patternsRe)
    }
    _isMatchToPatterns(entryPath, patternsRe) {
      const filepath = utils$2.path.removeLeadingDotSegment(entryPath)
      return utils$2.pattern.matchAny(filepath, patternsRe)
    }
  }
  exports.default = EntryFilter
})

var error = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ErrorFilter {
    constructor(_settings) {
      this._settings = _settings
    }
    getFilter() {
      return (error) => this._isNonFatalError(error)
    }
    _isNonFatalError(error) {
      return (
        utils$2.errno.isEnoentCodeError(error) || this._settings.suppressErrors
      )
    }
  }
  exports.default = ErrorFilter
})

var entry$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class EntryTransformer {
    constructor(_settings) {
      this._settings = _settings
    }
    getTransformer() {
      return (entry) => this._transform(entry)
    }
    _transform(entry) {
      let filepath = entry.path
      if (this._settings.absolute) {
        filepath = utils$2.path.makeAbsolute(this._settings.cwd, filepath)
        filepath = utils$2.path.unixify(filepath)
      }
      if (this._settings.markDirectories && entry.dirent.isDirectory()) {
        filepath += '/'
      }
      if (!this._settings.objectMode) {
        return filepath
      }
      return Object.assign(Object.assign({}, entry), { path: filepath })
    }
  }
  exports.default = EntryTransformer
})

var provider = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class Provider {
    constructor(_settings) {
      this._settings = _settings
      this.errorFilter = new error.default(this._settings)
      this.entryFilter = new entry.default(
        this._settings,
        this._getMicromatchOptions(),
      )
      this.deepFilter = new deep.default(
        this._settings,
        this._getMicromatchOptions(),
      )
      this.entryTransformer = new entry$1.default(this._settings)
    }
    _getRootDirectory(task) {
      return path__default['default'].resolve(this._settings.cwd, task.base)
    }
    _getReaderOptions(task) {
      const basePath = task.base === '.' ? '' : task.base
      return {
        basePath,
        pathSegmentSeparator: '/',
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(
          basePath,
          task.positive,
          task.negative,
        ),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings
          .throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer(),
      }
    }
    _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false,
      }
    }
  }
  exports.default = Provider
})

var async$4 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ProviderAsync extends provider.default {
    constructor() {
      super(...arguments)
      this._reader = new stream$2.default(this._settings)
    }
    read(task) {
      const root = this._getRootDirectory(task)
      const options = this._getReaderOptions(task)
      const entries = []
      return new Promise((resolve, reject) => {
        const stream = this.api(root, task, options)
        stream.once('error', reject)
        stream.on('data', (entry) => entries.push(options.transform(entry)))
        stream.once('end', () => resolve(entries))
      })
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options)
      }
      return this._reader.static(task.patterns, options)
    }
  }
  exports.default = ProviderAsync
})

var stream$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ProviderStream extends provider.default {
    constructor() {
      super(...arguments)
      this._reader = new stream$2.default(this._settings)
    }
    read(task) {
      const root = this._getRootDirectory(task)
      const options = this._getReaderOptions(task)
      const source = this.api(root, task, options)
      const destination = new stream_1__default['default'].Readable({
        objectMode: true,
        read: () => {},
      })
      source
        .once('error', (error) => destination.emit('error', error))
        .on('data', (entry) =>
          destination.emit('data', options.transform(entry)),
        )
        .once('end', () => destination.emit('end'))
      destination.once('close', () => source.destroy())
      return destination
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options)
      }
      return this._reader.static(task.patterns, options)
    }
  }
  exports.default = ProviderStream
})

var sync$7 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ReaderSync extends reader$1.default {
    constructor() {
      super(...arguments)
      this._walkSync = out$2.walkSync
      this._statSync = out.statSync
    }
    dynamic(root, options) {
      return this._walkSync(root, options)
    }
    static(patterns, options) {
      const entries = []
      for (const pattern of patterns) {
        const filepath = this._getFullEntryPath(pattern)
        const entry = this._getEntry(filepath, pattern, options)
        if (entry === null || !options.entryFilter(entry)) {
          continue
        }
        entries.push(entry)
      }
      return entries
    }
    _getEntry(filepath, pattern, options) {
      try {
        const stats = this._getStat(filepath)
        return this._makeEntry(stats, pattern)
      } catch (error) {
        if (options.errorFilter(error)) {
          return null
        }
        throw error
      }
    }
    _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings)
    }
  }
  exports.default = ReaderSync
})

var sync$8 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  class ProviderSync extends provider.default {
    constructor() {
      super(...arguments)
      this._reader = new sync$7.default(this._settings)
    }
    read(task) {
      const root = this._getRootDirectory(task)
      const options = this._getReaderOptions(task)
      const entries = this.api(root, task, options)
      return entries.map(options.transform)
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options)
      }
      return this._reader.static(task.patterns, options)
    }
  }
  exports.default = ProviderSync
})

var settings$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0

  const CPU_COUNT = os__default['default'].cpus().length
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: fs__default['default'].lstat,
    lstatSync: fs__default['default'].lstatSync,
    stat: fs__default['default'].stat,
    statSync: fs__default['default'].statSync,
    readdir: fs__default['default'].readdir,
    readdirSync: fs__default['default'].readdirSync,
  }
  class Settings {
    constructor(_options = {}) {
      this._options = _options
      this.absolute = this._getValue(this._options.absolute, false)
      this.baseNameMatch = this._getValue(this._options.baseNameMatch, false)
      this.braceExpansion = this._getValue(this._options.braceExpansion, true)
      this.caseSensitiveMatch = this._getValue(
        this._options.caseSensitiveMatch,
        true,
      )
      this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT)
      this.cwd = this._getValue(this._options.cwd, process.cwd())
      this.deep = this._getValue(this._options.deep, Infinity)
      this.dot = this._getValue(this._options.dot, false)
      this.extglob = this._getValue(this._options.extglob, true)
      this.followSymbolicLinks = this._getValue(
        this._options.followSymbolicLinks,
        true,
      )
      this.fs = this._getFileSystemMethods(this._options.fs)
      this.globstar = this._getValue(this._options.globstar, true)
      this.ignore = this._getValue(this._options.ignore, [])
      this.markDirectories = this._getValue(
        this._options.markDirectories,
        false,
      )
      this.objectMode = this._getValue(this._options.objectMode, false)
      this.onlyDirectories = this._getValue(
        this._options.onlyDirectories,
        false,
      )
      this.onlyFiles = this._getValue(this._options.onlyFiles, true)
      this.stats = this._getValue(this._options.stats, false)
      this.suppressErrors = this._getValue(this._options.suppressErrors, false)
      this.throwErrorOnBrokenSymbolicLink = this._getValue(
        this._options.throwErrorOnBrokenSymbolicLink,
        false,
      )
      this.unique = this._getValue(this._options.unique, true)
      if (this.onlyDirectories) {
        this.onlyFiles = false
      }
      if (this.stats) {
        this.objectMode = true
      }
    }
    _getValue(option, value) {
      return option === undefined ? value : option
    }
    _getFileSystemMethods(methods = {}) {
      return Object.assign(
        Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER),
        methods,
      )
    }
  }
  exports.default = Settings
})

async function FastGlob(source, options) {
  assertPatternsInput(source)
  const works = getWorks(source, async$4.default, options)
  const result = await Promise.all(works)
  return utils$2.array.flatten(result)
}
// https://github.com/typescript-eslint/typescript-eslint/issues/60
// eslint-disable-next-line no-redeclare
;(function (FastGlob) {
  function sync(source, options) {
    assertPatternsInput(source)
    const works = getWorks(source, sync$8.default, options)
    return utils$2.array.flatten(works)
  }
  FastGlob.sync = sync
  function stream(source, options) {
    assertPatternsInput(source)
    const works = getWorks(source, stream$3.default, options)
    /**
     * The stream returned by the provider cannot work with an asynchronous iterator.
     * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.
     * This affects performance (+25%). I don't see best solution right now.
     */
    return utils$2.stream.merge(works)
  }
  FastGlob.stream = stream
  function generateTasks(source, options) {
    assertPatternsInput(source)
    const patterns = [].concat(source)
    const settings = new settings$3.default(options)
    return tasks.generate(patterns, settings)
  }
  FastGlob.generateTasks = generateTasks
  function isDynamicPattern(source, options) {
    assertPatternsInput(source)
    const settings = new settings$3.default(options)
    return utils$2.pattern.isDynamicPattern(source, settings)
  }
  FastGlob.isDynamicPattern = isDynamicPattern
  function escapePath(source) {
    assertPatternsInput(source)
    return utils$2.path.escape(source)
  }
  FastGlob.escapePath = escapePath
})(FastGlob || (FastGlob = {}))
function getWorks(source, _Provider, options) {
  const patterns = [].concat(source)
  const settings = new settings$3.default(options)
  const tasks$1 = tasks.generate(patterns, settings)
  const provider = new _Provider(settings)
  return tasks$1.map(provider.read, provider)
}
function assertPatternsInput(input) {
  const source = [].concat(input)
  const isValidSource = source.every(
    (item) => utils$2.string.isString(item) && !utils$2.string.isEmpty(item),
  )
  if (!isValidSource) {
    throw new TypeError(
      'Patterns must be a string (non empty) or an array of strings',
    )
  }
}
var out$3 = FastGlob

const { promisify: promisify$2 } = util__default['default']

async function isType(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`)
  }

  try {
    const stats = await promisify$2(fs__default['default'][fsStatType])(
      filePath,
    )
    return stats[statsMethodName]()
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false
    }

    throw error
  }
}

function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`)
  }

  try {
    return fs__default['default'][fsStatType](filePath)[statsMethodName]()
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false
    }

    throw error
  }
}

var isFile = isType.bind(null, 'stat', 'isFile')
var isDirectory = isType.bind(null, 'stat', 'isDirectory')
var isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink')
var isFileSync = isTypeSync.bind(null, 'statSync', 'isFile')
var isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory')
var isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink')

var pathType = {
  isFile: isFile,
  isDirectory: isDirectory,
  isSymlink: isSymlink,
  isFileSync: isFileSync,
  isDirectorySync: isDirectorySync,
  isSymlinkSync: isSymlinkSync,
}

const getExtensions = (extensions) =>
  extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0]

const getPath = (filepath, cwd) => {
  const pth = filepath[0] === '!' ? filepath.slice(1) : filepath
  return path__default['default'].isAbsolute(pth)
    ? pth
    : path__default['default'].join(cwd, pth)
}

const addExtensions = (file, extensions) => {
  if (path__default['default'].extname(file)) {
    return `**/${file}`
  }

  return `**/${file}.${getExtensions(extensions)}`
}

const getGlob = (directory, options) => {
  if (options.files && !Array.isArray(options.files)) {
    throw new TypeError(
      `Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``,
    )
  }

  if (options.extensions && !Array.isArray(options.extensions)) {
    throw new TypeError(
      `Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``,
    )
  }

  if (options.files && options.extensions) {
    return options.files.map((x) =>
      path__default['default'].posix.join(
        directory,
        addExtensions(x, options.extensions),
      ),
    )
  }

  if (options.files) {
    return options.files.map((x) =>
      path__default['default'].posix.join(directory, `**/${x}`),
    )
  }

  if (options.extensions) {
    return [
      path__default['default'].posix.join(
        directory,
        `**/*.${getExtensions(options.extensions)}`,
      ),
    ]
  }

  return [path__default['default'].posix.join(directory, '**')]
}

var D__git_packageInherit_node_modules_dirGlob = async (input, options) => {
  options = {
    cwd: process.cwd(),
    ...options,
  }

  if (typeof options.cwd !== 'string') {
    throw new TypeError(
      `Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``,
    )
  }

  const globs = await Promise.all(
    [].concat(input).map(async (x) => {
      const isDirectory = await pathType.isDirectory(getPath(x, options.cwd))
      return isDirectory ? getGlob(x, options) : x
    }),
  )

  return [].concat.apply([], globs) // eslint-disable-line prefer-spread
}

var sync$9 = (input, options) => {
  options = {
    cwd: process.cwd(),
    ...options,
  }

  if (typeof options.cwd !== 'string') {
    throw new TypeError(
      `Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``,
    )
  }

  const globs = []
    .concat(input)
    .map((x) =>
      pathType.isDirectorySync(getPath(x, options.cwd))
        ? getGlob(x, options)
        : x,
    )

  return [].concat.apply([], globs) // eslint-disable-line prefer-spread
}
D__git_packageInherit_node_modules_dirGlob.sync = sync$9

// A simple implementation of make-array
function makeArray(subject) {
  return Array.isArray(subject) ? subject : [subject]
}

const EMPTY = ''
const SPACE = ' '
const ESCAPE = '\\'
const REGEX_TEST_BLANK_LINE = /^\s+$/
const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/
const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/
const REGEX_SPLITALL_CRLF = /\r?\n/g
// /foo,
// ./foo,
// ../foo,
// .
// ..
const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/

const SLASH = '/'
const KEY_IGNORE =
  typeof Symbol !== 'undefined'
    ? Symbol.for('node-ignore')
    : /* istanbul ignore next */
      'node-ignore'

const define = (object, key, value) =>
  Object.defineProperty(object, key, { value })

const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g

// Sanitize the range of a regular expression
// The cases are complicated, see test cases for details
const sanitizeRange = (range) =>
  range.replace(REGEX_REGEXP_RANGE, (match, from, to) =>
    from.charCodeAt(0) <= to.charCodeAt(0)
      ? match
      : // Invalid range (out of order) which is ok for gitignore rules but
        //   fatal for JavaScript regular expression, so eliminate it.
        EMPTY,
  )

// See fixtures #59
const cleanRangeBackSlash = (slashes) => {
  const { length } = slashes
  return slashes.slice(0, length - (length % 2))
}

// > If the pattern ends with a slash,
// > it is removed for the purpose of the following description,
// > but it would only find a match with a directory.
// > In other words, foo/ will match a directory foo and paths underneath it,
// > but will not match a regular file or a symbolic link foo
// >  (this is consistent with the way how pathspec works in general in Git).
// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'
// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call
//      you could use option `mark: true` with `glob`

// '`foo/`' should not continue with the '`..`'
const REPLACERS = [
  // > Trailing spaces are ignored unless they are quoted with backslash ("\")
  [
    // (a\ ) -> (a )
    // (a  ) -> (a)
    // (a \ ) -> (a  )
    /\\?\s+$/,
    (match) => (match.indexOf('\\') === 0 ? SPACE : EMPTY),
  ],

  // replace (\ ) with ' '
  [/\\\s/g, () => SPACE],

  // Escape metacharacters
  // which is written down by users but means special for regular expressions.

  // > There are 12 characters with special meanings:
  // > - the backslash \,
  // > - the caret ^,
  // > - the dollar sign $,
  // > - the period or dot .,
  // > - the vertical bar or pipe symbol |,
  // > - the question mark ?,
  // > - the asterisk or star *,
  // > - the plus sign +,
  // > - the opening parenthesis (,
  // > - the closing parenthesis ),
  // > - and the opening square bracket [,
  // > - the opening curly brace {,
  // > These special characters are often called "metacharacters".
  [/[\\$.|*+(){^]/g, (match) => `\\${match}`],

  [
    // > a question mark (?) matches a single character
    /(?!\\)\?/g,
    () => '[^/]',
  ],

  // leading slash
  [
    // > A leading slash matches the beginning of the pathname.
    // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
    // A leading slash matches the beginning of the pathname
    /^\//,
    () => '^',
  ],

  // replace special metacharacter slash after the leading slash
  [/\//g, () => '\\/'],

  [
    // > A leading "**" followed by a slash means match in all directories.
    // > For example, "**/foo" matches file or directory "foo" anywhere,
    // > the same as pattern "foo".
    // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
    // >   under directory "foo".
    // Notice that the '*'s have been replaced as '\\*'
    /^\^*\\\*\\\*\\\//,

    // '**/foo' <-> 'foo'
    () => '^(?:.*\\/)?',
  ],

  // starting
  [
    // there will be no leading '/'
    //   (which has been replaced by section "leading slash")
    // If starts with '**', adding a '^' to the regular expression also works
    /^(?=[^^])/,
    function startingReplacer() {
      // If has a slash `/` at the beginning or middle
      return !/\/(?!$)/.test(this)
        ? // > Prior to 2.22.1
          // > If the pattern does not contain a slash /,
          // >   Git treats it as a shell glob pattern
          // Actually, if there is only a trailing slash,
          //   git also treats it as a shell glob pattern

          // After 2.22.1 (compatible but clearer)
          // > If there is a separator at the beginning or middle (or both)
          // > of the pattern, then the pattern is relative to the directory
          // > level of the particular .gitignore file itself.
          // > Otherwise the pattern may also match at any level below
          // > the .gitignore level.
          '(?:^|\\/)'
        : // > Otherwise, Git treats the pattern as a shell glob suitable for
          // >   consumption by fnmatch(3)
          '^'
    },
  ],

  // two globstars
  [
    // Use lookahead assertions so that we could match more than one `'/**'`
    /\\\/\\\*\\\*(?=\\\/|$)/g,

    // Zero, one or several directories
    // should not use '*', or it will be replaced by the next replacer

    // Check if it is not the last `'/**'`
    (_, index, str) =>
      index + 6 < str.length
        ? // case: /**/
          // > A slash followed by two consecutive asterisks then a slash matches
          // >   zero or more directories.
          // > For example, "a/**/b" matches "a/b", "a/x/b", "a/x/y/b" and so on.
          // '/**/'
          '(?:\\/[^\\/]+)*'
        : // case: /**
          // > A trailing `"/**"` matches everything inside.

          // #21: everything inside but it should not include the current folder
          '\\/.+',
  ],

  // intermediate wildcards
  [
    // Never replace escaped '*'
    // ignore rule '\*' will match the path '*'

    // 'abc.*/' -> go
    // 'abc.*'  -> skip this rule
    /(^|[^\\]+)\\\*(?=.+)/g,

    // '*.js' matches '.js'
    // '*.js' doesn't match 'abc'
    (_, p1) => `${p1}[^\\/]*`,
  ],

  [
    // unescape, revert step 3 except for back slash
    // For example, if a user escape a '\\*',
    // after step 3, the result will be '\\\\\\*'
    /\\\\\\(?=[$.|*+(){^])/g,
    () => ESCAPE,
  ],

  [
    // '\\\\' -> '\\'
    /\\\\/g,
    () => ESCAPE,
  ],

  [
    // > The range notation, e.g. [a-zA-Z],
    // > can be used to match one of the characters in a range.

    // `\` is escaped by step 3
    /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
    (match, leadEscape, range, endEscape, close) =>
      leadEscape === ESCAPE
        ? // '\\[bar]' -> '\\\\[bar\\]'
          `\\[${range}${cleanRangeBackSlash(endEscape)}${close}`
        : close === ']'
        ? endEscape.length % 2 === 0
          ? // A normal case, and it is a range notation
            // '[bar]'
            // '[bar\\\\]'
            `[${sanitizeRange(range)}${endEscape}]`
          : // Invalid range notaton
            // '[bar\\]' -> '[bar\\\\]'
            '[]'
        : '[]',
  ],

  // ending
  [
    // 'js' will not match 'js.'
    // 'ab' will not match 'abc'
    /(?:[^*])$/,

    // WTF!
    // https://git-scm.com/docs/gitignore
    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
    // which re-fixes #24, #38

    // > If there is a separator at the end of the pattern then the pattern
    // > will only match directories, otherwise the pattern can match both
    // > files and directories.

    // 'js*' will not match 'a.js'
    // 'js/' will not match 'a.js'
    // 'js' will match 'a.js' and 'a.js/'
    (match) =>
      /\/$/.test(match)
        ? // foo/ will not match 'foo'
          `${match}$`
        : // foo matches 'foo' and 'foo/'
          `${match}(?=$|\\/$)`,
  ],

  // trailing wildcard
  [
    /(\^|\\\/)?\\\*$/,
    (_, p1) => {
      const prefix = p1
        ? // '\^':
          // '/*' does not match EMPTY
          // '/*' does not match everything

          // '\\\/':
          // 'abc/*' does not match 'abc/'
          `${p1}[^/]+`
        : // 'a*' matches 'a'
          // 'a*' matches 'aa'
          '[^/]*'

      return `${prefix}(?=$|\\/$)`
    },
  ],
]

// A simple cache, because an ignore rule only has only one certain meaning
const regexCache = Object.create(null)

// @param {pattern}
const makeRegex = (pattern, negative, ignorecase) => {
  const r = regexCache[pattern]
  if (r) {
    return r
  }

  // const replacers = negative
  //   ? NEGATIVE_REPLACERS
  //   : POSITIVE_REPLACERS

  const source = REPLACERS.reduce(
    (prev, current) => prev.replace(current[0], current[1].bind(pattern)),
    pattern,
  )

  return (regexCache[pattern] = ignorecase
    ? new RegExp(source, 'i')
    : new RegExp(source))
}

const isString = (subject) => typeof subject === 'string'

// > A blank line matches no files, so it can serve as a separator for readability.
const checkPattern = (pattern) =>
  pattern &&
  isString(pattern) &&
  !REGEX_TEST_BLANK_LINE.test(pattern) &&
  // > A line starting with # serves as a comment.
  pattern.indexOf('#') !== 0

const splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF)

class IgnoreRule {
  constructor(origin, pattern, negative, regex) {
    this.origin = origin
    this.pattern = pattern
    this.negative = negative
    this.regex = regex
  }
}

const createRule = (pattern, ignorecase) => {
  const origin = pattern
  let negative = false

  // > An optional prefix "!" which negates the pattern;
  if (pattern.indexOf('!') === 0) {
    negative = true
    pattern = pattern.substr(1)
  }

  pattern = pattern
    // > Put a backslash ("\") in front of the first "!" for patterns that
    // >   begin with a literal "!", for example, `"\!important!.txt"`.
    .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')
    // > Put a backslash ("\") in front of the first hash for patterns that
    // >   begin with a hash.
    .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')

  const regex = makeRegex(pattern, negative, ignorecase)

  return new IgnoreRule(origin, pattern, negative, regex)
}

const throwError$1 = (message, Ctor) => {
  throw new Ctor(message)
}

const checkPath = (path, originalPath, doThrow) => {
  if (!isString(path)) {
    return doThrow(
      `path must be a string, but got \`${originalPath}\``,
      TypeError,
    )
  }

  // We don't know if we should ignore EMPTY, so throw
  if (!path) {
    return doThrow(`path must not be empty`, TypeError)
  }

  // Check if it is a relative path
  if (checkPath.isNotRelative(path)) {
    const r = '`path.relative()`d'
    return doThrow(
      `path should be a ${r} string, but got "${originalPath}"`,
      RangeError,
    )
  }

  return true
}

const isNotRelative = (path) => REGEX_TEST_INVALID_PATH.test(path)

checkPath.isNotRelative = isNotRelative
checkPath.convert = (p) => p

class Ignore {
  constructor({ ignorecase = true } = {}) {
    this._rules = []
    this._ignorecase = ignorecase
    define(this, KEY_IGNORE, true)
    this._initCache()
  }

  _initCache() {
    this._ignoreCache = Object.create(null)
    this._testCache = Object.create(null)
  }

  _addPattern(pattern) {
    // #32
    if (pattern && pattern[KEY_IGNORE]) {
      this._rules = this._rules.concat(pattern._rules)
      this._added = true
      return
    }

    if (checkPattern(pattern)) {
      const rule = createRule(pattern, this._ignorecase)
      this._added = true
      this._rules.push(rule)
    }
  }

  // @param {Array<string> | string | Ignore} pattern
  add(pattern) {
    this._added = false

    makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(
      this._addPattern,
      this,
    )

    // Some rules have just added to the ignore,
    // making the behavior changed.
    if (this._added) {
      this._initCache()
    }

    return this
  }

  // legacy
  addPattern(pattern) {
    return this.add(pattern)
  }

  //          |           ignored : unignored
  // negative |   0:0   |   0:1   |   1:0   |   1:1
  // -------- | ------- | ------- | ------- | --------
  //     0    |  TEST   |  TEST   |  SKIP   |    X
  //     1    |  TESTIF |  SKIP   |  TEST   |    X

  // - SKIP: always skip
  // - TEST: always test
  // - TESTIF: only test if checkUnignored
  // - X: that never happen

  // @param {boolean} whether should check if the path is unignored,
  //   setting `checkUnignored` to `false` could reduce additional
  //   path matching.

  // @returns {TestResult} true if a file is ignored
  _testOne(path, checkUnignored) {
    let ignored = false
    let unignored = false

    this._rules.forEach((rule) => {
      const { negative } = rule
      if (
        (unignored === negative && ignored !== unignored) ||
        (negative && !ignored && !unignored && !checkUnignored)
      ) {
        return
      }

      const matched = rule.regex.test(path)

      if (matched) {
        ignored = !negative
        unignored = negative
      }
    })

    return {
      ignored,
      unignored,
    }
  }

  // @returns {TestResult}
  _test(originalPath, cache, checkUnignored, slices) {
    const path =
      originalPath &&
      // Supports nullable path
      checkPath.convert(originalPath)

    checkPath(path, originalPath, throwError$1)

    return this._t(path, cache, checkUnignored, slices)
  }

  _t(path, cache, checkUnignored, slices) {
    if (path in cache) {
      return cache[path]
    }

    if (!slices) {
      // path/to/a.js
      // ['path', 'to', 'a.js']
      slices = path.split(SLASH)
    }

    slices.pop()

    // If the path has no parent directory, just test it
    if (!slices.length) {
      return (cache[path] = this._testOne(path, checkUnignored))
    }

    const parent = this._t(
      slices.join(SLASH) + SLASH,
      cache,
      checkUnignored,
      slices,
    )

    // If the path contains a parent directory, check the parent first
    return (cache[path] = parent.ignored
      ? // > It is not possible to re-include a file if a parent directory of
        // >   that file is excluded.
        parent
      : this._testOne(path, checkUnignored))
  }

  ignores(path) {
    return this._test(path, this._ignoreCache, false).ignored
  }

  createFilter() {
    return (path) => !this.ignores(path)
  }

  filter(paths) {
    return makeArray(paths).filter(this.createFilter())
  }

  // @returns {TestResult}
  test(path) {
    return this._test(path, this._testCache, true)
  }
}

const factory = (options) => new Ignore(options)

const returnFalse = () => false

const isPathValid = (path) =>
  checkPath(path && checkPath.convert(path), path, returnFalse)

factory.isPathValid = isPathValid

// Fixes typescript
factory.default = factory

var ignore = factory

// Windows
// --------------------------------------------------------------
/* istanbul ignore if  */
if (
  // Detect `process` so that it can run in browsers.
  typeof process !== 'undefined' &&
  ((process.env && process.env.IGNORE_TEST_WIN32) ||
    process.platform === 'win32')
) {
  /* eslint no-control-regex: "off" */
  const makePosix = (str) =>
    /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str)
      ? str
      : str.replace(/\\/g, '/')

  checkPath.convert = makePosix

  // 'C:\\foo'     <- 'C:\\foo' has been converted to 'C:/'
  // 'd:\\foo'
  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i
  checkPath.isNotRelative = (path) =>
    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path)
}

var slash$1 = (path) => {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path)
  const hasNonAscii = /[^\u0000-\u0080]+/.test(path) // eslint-disable-line no-control-regex

  if (isExtendedLengthPath || hasNonAscii) {
    return path
  }

  return path.replace(/\\/g, '/')
}

const { promisify: promisify$3 } = util__default['default']

const DEFAULT_IGNORE = [
  '**/node_modules/**',
  '**/flow-typed/**',
  '**/coverage/**',
  '**/.git',
]

const readFileP = promisify$3(fs__default['default'].readFile)

const mapGitIgnorePatternTo = (base) => (ignore) => {
  if (ignore.startsWith('!')) {
    return '!' + path__default['default'].posix.join(base, ignore.slice(1))
  }

  return path__default['default'].posix.join(base, ignore)
}

const parseGitIgnore = (content, options) => {
  const base = slash$1(
    path__default['default'].relative(
      options.cwd,
      path__default['default'].dirname(options.fileName),
    ),
  )

  return content
    .split(/\r?\n/)
    .filter(Boolean)
    .filter((line) => !line.startsWith('#'))
    .map(mapGitIgnorePatternTo(base))
}

const reduceIgnore = (files) => {
  return files.reduce((ignores, file) => {
    ignores.add(
      parseGitIgnore(file.content, {
        cwd: file.cwd,
        fileName: file.filePath,
      }),
    )
    return ignores
  }, ignore())
}

const ensureAbsolutePathForCwd = (cwd, p) => {
  cwd = slash$1(cwd)
  if (path__default['default'].isAbsolute(p)) {
    if (p.startsWith(cwd)) {
      return p
    }

    throw new Error(`Path ${p} is not in cwd ${cwd}`)
  }

  return path__default['default'].join(cwd, p)
}

const getIsIgnoredPredecate = (ignores, cwd) => {
  return (p) =>
    ignores.ignores(
      slash$1(
        path__default['default'].relative(
          cwd,
          ensureAbsolutePathForCwd(cwd, p),
        ),
      ),
    )
}

const getFile = async (file, cwd) => {
  const filePath = path__default['default'].join(cwd, file)
  const content = await readFileP(filePath, 'utf8')

  return {
    cwd,
    filePath,
    content,
  }
}

const getFileSync = (file, cwd) => {
  const filePath = path__default['default'].join(cwd, file)
  const content = fs__default['default'].readFileSync(filePath, 'utf8')

  return {
    cwd,
    filePath,
    content,
  }
}

const normalizeOptions = ({
  ignore = [],
  cwd = slash$1(process.cwd()),
} = {}) => {
  return { ignore, cwd }
}

var gitignore = async (options) => {
  options = normalizeOptions(options)

  const paths = await out$3('**/.gitignore', {
    ignore: DEFAULT_IGNORE.concat(options.ignore),
    cwd: options.cwd,
  })

  const files = await Promise.all(
    paths.map((file) => getFile(file, options.cwd)),
  )
  const ignores = reduceIgnore(files)

  return getIsIgnoredPredecate(ignores, options.cwd)
}

var sync$a = (options) => {
  options = normalizeOptions(options)

  const paths = out$3.sync('**/.gitignore', {
    ignore: DEFAULT_IGNORE.concat(options.ignore),
    cwd: options.cwd,
  })

  const files = paths.map((file) => getFileSync(file, options.cwd))
  const ignores = reduceIgnore(files)

  return getIsIgnoredPredecate(ignores, options.cwd)
}
gitignore.sync = sync$a

const { Transform } = stream_1__default['default']

class ObjectTransform extends Transform {
  constructor() {
    super({
      objectMode: true,
    })
  }
}

class FilterStream extends ObjectTransform {
  constructor(filter) {
    super()
    this._filter = filter
  }

  _transform(data, encoding, callback) {
    if (this._filter(data)) {
      this.push(data)
    }

    callback()
  }
}

class UniqueStream extends ObjectTransform {
  constructor() {
    super()
    this._pushed = new Set()
  }

  _transform(data, encoding, callback) {
    if (!this._pushed.has(data)) {
      this.push(data)
      this._pushed.add(data)
    }

    callback()
  }
}

var streamUtils = {
  FilterStream,
  UniqueStream,
}

const {
  FilterStream: FilterStream$1,
  UniqueStream: UniqueStream$1,
} = streamUtils

const DEFAULT_FILTER = () => false

const isNegative = (pattern) => pattern[0] === '!'

const assertPatternsInput$1 = (patterns) => {
  if (!patterns.every((pattern) => typeof pattern === 'string')) {
    throw new TypeError('Patterns must be a string or an array of strings')
  }
}

const checkCwdOption = (options = {}) => {
  if (!options.cwd) {
    return
  }

  let stat
  try {
    stat = fs__default['default'].statSync(options.cwd)
  } catch (_) {
    return
  }

  if (!stat.isDirectory()) {
    throw new Error('The `cwd` option must be a path to a directory')
  }
}

const getPathString = (p) =>
  p.stats instanceof fs__default['default'].Stats ? p.path : p

const generateGlobTasks = (patterns, taskOptions) => {
  patterns = arrayUnion([].concat(patterns))
  assertPatternsInput$1(patterns)
  checkCwdOption(taskOptions)

  const globTasks = []

  taskOptions = {
    ignore: [],
    expandDirectories: true,
    ...taskOptions,
  }

  for (const [index, pattern] of patterns.entries()) {
    if (isNegative(pattern)) {
      continue
    }

    const ignore = patterns
      .slice(index)
      .filter(isNegative)
      .map((pattern) => pattern.slice(1))

    const options = {
      ...taskOptions,
      ignore: taskOptions.ignore.concat(ignore),
    }

    globTasks.push({ pattern, options })
  }

  return globTasks
}

const globDirs = (task, fn) => {
  let options = {}
  if (task.options.cwd) {
    options.cwd = task.options.cwd
  }

  if (Array.isArray(task.options.expandDirectories)) {
    options = {
      ...options,
      files: task.options.expandDirectories,
    }
  } else if (typeof task.options.expandDirectories === 'object') {
    options = {
      ...options,
      ...task.options.expandDirectories,
    }
  }

  return fn(task.pattern, options)
}

const getPattern = (task, fn) =>
  task.options.expandDirectories ? globDirs(task, fn) : [task.pattern]

const getFilterSync = (options) => {
  return options && options.gitignore
    ? gitignore.sync({ cwd: options.cwd, ignore: options.ignore })
    : DEFAULT_FILTER
}

const globToTask = (task) => (glob) => {
  const { options } = task
  if (
    options.ignore &&
    Array.isArray(options.ignore) &&
    options.expandDirectories
  ) {
    options.ignore = D__git_packageInherit_node_modules_dirGlob.sync(
      options.ignore,
    )
  }

  return {
    pattern: glob,
    options,
  }
}

var globby$1 = async (patterns, options) => {
  const globTasks = generateGlobTasks(patterns, options)

  const getFilter = async () => {
    return options && options.gitignore
      ? gitignore({ cwd: options.cwd, ignore: options.ignore })
      : DEFAULT_FILTER
  }

  const getTasks = async () => {
    const tasks = await Promise.all(
      globTasks.map(async (task) => {
        const globs = await getPattern(
          task,
          D__git_packageInherit_node_modules_dirGlob,
        )
        return Promise.all(globs.map(globToTask(task)))
      }),
    )

    return arrayUnion(...tasks)
  }

  const [filter, tasks] = await Promise.all([getFilter(), getTasks()])
  const paths = await Promise.all(
    tasks.map((task) => out$3(task.pattern, task.options)),
  )

  return arrayUnion(...paths).filter((path_) => !filter(getPathString(path_)))
}

var sync$b = (patterns, options) => {
  const globTasks = generateGlobTasks(patterns, options)

  const tasks = globTasks.reduce((tasks, task) => {
    const newTask = getPattern(
      task,
      D__git_packageInherit_node_modules_dirGlob.sync,
    ).map(globToTask(task))
    return tasks.concat(newTask)
  }, [])

  const filter = getFilterSync(options)

  return tasks
    .reduce(
      (matches, task) =>
        arrayUnion(matches, out$3.sync(task.pattern, task.options)),
      [],
    )
    .filter((path_) => !filter(path_))
}

var stream$4 = (patterns, options) => {
  const globTasks = generateGlobTasks(patterns, options)

  const tasks = globTasks.reduce((tasks, task) => {
    const newTask = getPattern(
      task,
      D__git_packageInherit_node_modules_dirGlob.sync,
    ).map(globToTask(task))
    return tasks.concat(newTask)
  }, [])

  const filter = getFilterSync(options)
  const filterStream = new FilterStream$1((p) => !filter(p))
  const uniqueStream = new UniqueStream$1()

  return D__git_packageInherit_node_modules_merge2(
    tasks.map((task) => out$3.stream(task.pattern, task.options)),
  )
    .pipe(filterStream)
    .pipe(uniqueStream)
}

var generateGlobTasks_1 = generateGlobTasks

var hasMagic = (patterns, options) =>
  []
    .concat(patterns)
    .some((pattern) => out$3.isDynamicPattern(pattern, options))

var gitignore_1 = gitignore
globby$1.sync = sync$b
globby$1.stream = stream$4
globby$1.generateGlobTasks = generateGlobTasks_1
globby$1.hasMagic = hasMagic
globby$1.gitignore = gitignore_1

var getPackagePaths_1 = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const path_1 = __importDefault(path__default['default'])
  const globby_1 = __importDefault(globby$1)
  function getPackagePaths(workspacesRoot, packages) {
    const packagePaths = packages.map((glob) => {
      const globbed = globby_1.default
        .sync(path_1.default.join(glob, 'package.json').replace(/\\/g, '/'), {
          cwd: workspacesRoot,
          absolute: true,
          ignore: ['**/node_modules/**'],
        })
        .map((p) => path_1.default.dirname(p))
      return globbed
    })
    /*
     * fast-glob returns unix style path,
     * so we use path.join to align the path with the platform.
     */
    return packagePaths
      .reduce((acc, cur) => {
        return [...acc, ...cur]
      })
      .map((p) => path_1.default.join(p))
  }
  exports.getPackagePaths = getPackagePaths
})

var getWorkspacePackageInfo_1 = createCommonjsModule(function (
  module,
  exports,
) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const path_1 = __importDefault(path__default['default'])
  const fs_1 = __importDefault(fs__default['default'])
  function getWorkspacePackageInfo(workspacePaths) {
    if (!workspacePaths) {
      return []
    }
    return workspacePaths.reduce((returnValue, workspacePath) => {
      let packageJson
      const packageJsonPath = path_1.default.join(workspacePath, 'package.json')
      try {
        packageJson = JSON.parse(
          fs_1.default.readFileSync(packageJsonPath, 'utf-8'),
        )
      } catch (_a) {
        return returnValue
      }
      return [
        ...returnValue,
        {
          name: packageJson.name,
          path: workspacePath,
          packageJson: Object.assign(Object.assign({}, packageJson), {
            packageJsonPath,
          }),
        },
      ]
    }, [])
  }
  exports.getWorkspacePackageInfo = getWorkspacePackageInfo
})

var pnpmWorkspaces = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const path_1 = __importDefault(path__default['default'])
  const find_up_1 = __importDefault(findUp)

  function getPnpmWorkspaces(cwd) {
    try {
      const pnpmWorkspacesFile = find_up_1.default.sync('pnpm-workspace.yaml', {
        cwd,
      })
      if (!pnpmWorkspacesFile) {
        return []
      }
      const pnpmWorkspacesRoot = path_1.default.dirname(pnpmWorkspacesFile)
      const pnpmWorkspaces = readYamlFile_1.sync(pnpmWorkspacesFile)
      const packagePaths = getPackagePaths_1.getPackagePaths(
        pnpmWorkspacesRoot,
        pnpmWorkspaces.packages,
      )
      const workspaceInfo = getWorkspacePackageInfo_1.getWorkspacePackageInfo(
        packagePaths,
      )
      return workspaceInfo
    } catch (_a) {
      return []
    }
  }
  exports.getPnpmWorkspaces = getPnpmWorkspaces
})

// simple mutable assign
function assign() {
  const args = [].slice.call(arguments).filter((i) => i)
  const dest = args.shift()
  args.forEach((src) => {
    Object.keys(src).forEach((key) => {
      dest[key] = src[key]
    })
  })

  return dest
}

var assign_1 = assign

var fromCallback = function (fn) {
  return Object.defineProperty(
    function () {
      if (typeof arguments[arguments.length - 1] === 'function')
        fn.apply(this, arguments)
      else {
        return new Promise((resolve, reject) => {
          arguments[arguments.length] = (err, res) => {
            if (err) return reject(err)
            resolve(res)
          }
          arguments.length++
          fn.apply(this, arguments)
        })
      }
    },
    'name',
    { value: fn.name },
  )
}

var fromPromise = function (fn) {
  return Object.defineProperty(
    function () {
      const cb = arguments[arguments.length - 1]
      if (typeof cb !== 'function') return fn.apply(this, arguments)
      else fn.apply(this, arguments).then((r) => cb(null, r), cb)
    },
    'name',
    { value: fn.name },
  )
}

var D__git_packageInherit_node_modules_universalify = {
  fromCallback: fromCallback,
  fromPromise: fromPromise,
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_fs = createCommonjsModule(
  function (module, exports) {
    // This is adapted from https://github.com/normalize/mz
    // Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
    const u = D__git_packageInherit_node_modules_universalify.fromCallback

    const api = [
      'access',
      'appendFile',
      'chmod',
      'chown',
      'close',
      'copyFile',
      'fchmod',
      'fchown',
      'fdatasync',
      'fstat',
      'fsync',
      'ftruncate',
      'futimes',
      'lchown',
      'link',
      'lstat',
      'mkdir',
      'mkdtemp',
      'open',
      'readFile',
      'readdir',
      'readlink',
      'realpath',
      'rename',
      'rmdir',
      'stat',
      'symlink',
      'truncate',
      'unlink',
      'utimes',
      'writeFile',
    ].filter((key) => {
      // Some commands are not available on some systems. Ex:
      // fs.copyFile was added in Node.js v8.5.0
      // fs.mkdtemp was added in Node.js v5.10.0
      // fs.lchown is not available on at least some Linux
      return typeof gracefulFs[key] === 'function'
    })

    // Export all keys:
    Object.keys(gracefulFs).forEach((key) => {
      exports[key] = gracefulFs[key]
    })

    // Universalify async methods:
    api.forEach((method) => {
      exports[method] = u(gracefulFs[method])
    })

    // We differ from mz/fs in that we still ship the old, broken, fs.exists()
    // since we are a drop-in replacement for the native module
    exports.exists = function (filename, callback) {
      if (typeof callback === 'function') {
        return gracefulFs.exists(filename, callback)
      }
      return new Promise((resolve) => {
        return gracefulFs.exists(filename, resolve)
      })
    }

    // fs.read() & fs.write need special treatment due to multiple callback args

    exports.read = function (fd, buffer, offset, length, position, callback) {
      if (typeof callback === 'function') {
        return gracefulFs.read(fd, buffer, offset, length, position, callback)
      }
      return new Promise((resolve, reject) => {
        gracefulFs.read(
          fd,
          buffer,
          offset,
          length,
          position,
          (err, bytesRead, buffer) => {
            if (err) return reject(err)
            resolve({ bytesRead, buffer })
          },
        )
      })
    }

    // Function signature can be
    // fs.write(fd, buffer[, offset[, length[, position]]], callback)
    // OR
    // fs.write(fd, string[, position[, encoding]], callback)
    // so we need to handle both cases
    exports.write = function (fd, buffer, a, b, c, callback) {
      if (typeof arguments[arguments.length - 1] === 'function') {
        return gracefulFs.write(fd, buffer, a, b, c, callback)
      }

      // Check for old, depricated fs.write(fd, string[, position[, encoding]], callback)
      if (typeof buffer === 'string') {
        return new Promise((resolve, reject) => {
          gracefulFs.write(fd, buffer, a, b, (err, bytesWritten, buffer) => {
            if (err) return reject(err)
            resolve({ bytesWritten, buffer })
          })
        })
      }

      return new Promise((resolve, reject) => {
        gracefulFs.write(fd, buffer, a, b, c, (err, bytesWritten, buffer) => {
          if (err) return reject(err)
          resolve({ bytesWritten, buffer })
        })
      })
    }
  },
)

// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
function hasMillisResSync() {
  let tmpfile = path__default['default'].join(
    'millis-test-sync' +
      Date.now().toString() +
      Math.random().toString().slice(2),
  )
  tmpfile = path__default['default'].join(
    os__default['default'].tmpdir(),
    tmpfile,
  )

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  gracefulFs.writeFileSync(
    tmpfile,
    'https://github.com/jprichardson/node-fs-extra/pull/141',
  )
  const fd = gracefulFs.openSync(tmpfile, 'r+')
  gracefulFs.futimesSync(fd, d, d)
  gracefulFs.closeSync(fd)
  return gracefulFs.statSync(tmpfile).mtime > 1435410243000
}

function hasMillisRes(callback) {
  let tmpfile = path__default['default'].join(
    'millis-test' + Date.now().toString() + Math.random().toString().slice(2),
  )
  tmpfile = path__default['default'].join(
    os__default['default'].tmpdir(),
    tmpfile,
  )

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  gracefulFs.writeFile(
    tmpfile,
    'https://github.com/jprichardson/node-fs-extra/pull/141',
    (err) => {
      if (err) return callback(err)
      gracefulFs.open(tmpfile, 'r+', (err, fd) => {
        if (err) return callback(err)
        gracefulFs.futimes(fd, d, d, (err) => {
          if (err) return callback(err)
          gracefulFs.close(fd, (err) => {
            if (err) return callback(err)
            gracefulFs.stat(tmpfile, (err, stats) => {
              if (err) return callback(err)
              callback(null, stats.mtime > 1435410243000)
            })
          })
        })
      })
    },
  )
}

function timeRemoveMillis(timestamp) {
  if (typeof timestamp === 'number') {
    return Math.floor(timestamp / 1000) * 1000
  } else if (timestamp instanceof Date) {
    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
  } else {
    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
  }
}

function utimesMillis(path, atime, mtime, callback) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  gracefulFs.open(path, 'r+', (err, fd) => {
    if (err) return callback(err)
    gracefulFs.futimes(fd, atime, mtime, (futimesErr) => {
      gracefulFs.close(fd, (closeErr) => {
        if (callback) callback(futimesErr || closeErr)
      })
    })
  })
}

var utimes = {
  hasMillisRes,
  hasMillisResSync,
  timeRemoveMillis,
  utimesMillis,
}

// imported from ncp (this is temporary, will rewrite)

function ncp(source, dest, options, callback) {
  if (!callback) {
    callback = options
    options = {}
  }

  var basePath = process.cwd()
  var currentPath = path__default['default'].resolve(basePath, source)
  var targetPath = path__default['default'].resolve(basePath, dest)

  var filter = options.filter
  var transform = options.transform
  var overwrite = options.overwrite
  // If overwrite is undefined, use clobber, otherwise default to true:
  if (overwrite === undefined) overwrite = options.clobber
  if (overwrite === undefined) overwrite = true
  var errorOnExist = options.errorOnExist
  var dereference = options.dereference
  var preserveTimestamps = options.preserveTimestamps === true

  var started = 0
  var finished = 0
  var running = 0

  var errored = false

  startCopy(currentPath)

  function startCopy(source) {
    started++
    if (filter) {
      if (filter instanceof RegExp) {
        console.warn(
          'Warning: fs-extra: Passing a RegExp filter is deprecated, use a function',
        )
        if (!filter.test(source)) {
          return doneOne(true)
        }
      } else if (typeof filter === 'function') {
        if (!filter(source, dest)) {
          return doneOne(true)
        }
      }
    }
    return getStats(source)
  }

  function getStats(source) {
    var stat = dereference ? gracefulFs.stat : gracefulFs.lstat
    running++
    stat(source, function (err, stats) {
      if (err) return onError(err)

      // We need to get the mode from the stats object and preserve it.
      var item = {
        name: source,
        mode: stats.mode,
        mtime: stats.mtime, // modified time
        atime: stats.atime, // access time
        stats: stats, // temporary
      }

      if (stats.isDirectory()) {
        return onDir(item)
      } else if (
        stats.isFile() ||
        stats.isCharacterDevice() ||
        stats.isBlockDevice()
      ) {
        return onFile(item)
      } else if (stats.isSymbolicLink()) {
        // Symlinks don't really need to know about the mode.
        return onLink(source)
      }
    })
  }

  function onFile(file) {
    var target = file.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        copyFile(file, target)
      } else {
        if (overwrite) {
          rmFile(target, function () {
            copyFile(file, target)
          })
        } else if (errorOnExist) {
          onError(new Error(target + ' already exists'))
        } else {
          doneOne()
        }
      }
    })
  }

  function copyFile(file, target) {
    var readStream = gracefulFs.createReadStream(file.name)
    var writeStream = gracefulFs.createWriteStream(target, { mode: file.mode })

    readStream.on('error', onError)
    writeStream.on('error', onError)

    if (transform) {
      transform(readStream, writeStream, file)
    } else {
      writeStream.on('open', function () {
        readStream.pipe(writeStream)
      })
    }

    writeStream.once('close', function () {
      gracefulFs.chmod(target, file.mode, function (err) {
        if (err) return onError(err)
        if (preserveTimestamps) {
          utimes.utimesMillis(target, file.atime, file.mtime, function (err) {
            if (err) return onError(err)
            return doneOne()
          })
        } else {
          doneOne()
        }
      })
    })
  }

  function rmFile(file, done) {
    gracefulFs.unlink(file, function (err) {
      if (err) return onError(err)
      return done()
    })
  }

  function onDir(dir) {
    var target = dir.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        return mkDir(dir, target)
      }
      copyDir(dir.name)
    })
  }

  function mkDir(dir, target) {
    gracefulFs.mkdir(target, dir.mode, function (err) {
      if (err) return onError(err)
      // despite setting mode in fs.mkdir, doesn't seem to work
      // so we set it here.
      gracefulFs.chmod(target, dir.mode, function (err) {
        if (err) return onError(err)
        copyDir(dir.name)
      })
    })
  }

  function copyDir(dir) {
    gracefulFs.readdir(dir, function (err, items) {
      if (err) return onError(err)
      items.forEach(function (item) {
        startCopy(path__default['default'].join(dir, item))
      })
      return doneOne()
    })
  }

  function onLink(link) {
    var target = link.replace(currentPath, targetPath)
    gracefulFs.readlink(link, function (err, resolvedPath) {
      if (err) return onError(err)
      checkLink(resolvedPath, target)
    })
  }

  function checkLink(resolvedPath, target) {
    if (dereference) {
      resolvedPath = path__default['default'].resolve(basePath, resolvedPath)
    }
    isWritable(target, function (writable) {
      if (writable) {
        return makeLink(resolvedPath, target)
      }
      gracefulFs.readlink(target, function (err, targetDest) {
        if (err) return onError(err)

        if (dereference) {
          targetDest = path__default['default'].resolve(basePath, targetDest)
        }
        if (targetDest === resolvedPath) {
          return doneOne()
        }
        return rmFile(target, function () {
          makeLink(resolvedPath, target)
        })
      })
    })
  }

  function makeLink(linkPath, target) {
    gracefulFs.symlink(linkPath, target, function (err) {
      if (err) return onError(err)
      return doneOne()
    })
  }

  function isWritable(path, done) {
    gracefulFs.lstat(path, function (err) {
      if (err) {
        if (err.code === 'ENOENT') return done(true)
        return done(false)
      }
      return done(false)
    })
  }

  function onError(err) {
    // ensure callback is defined & called only once:
    if (!errored && callback !== undefined) {
      errored = true
      return callback(err)
    }
  }

  function doneOne(skipped) {
    if (!skipped) running--
    finished++
    if (started === finished && running === 0) {
      if (callback !== undefined) {
        return callback(null)
      }
    }
  }
}

var ncp_1 = ncp

// get drive on windows
function getRootPath(p) {
  p = path__default['default']
    .normalize(path__default['default'].resolve(p))
    .split(path__default['default'].sep)
  if (p.length > 0) return p[0]
  return null
}

// http://stackoverflow.com/a/62888/10333 contains more accurate
// TODO: expand to include the rest
const INVALID_PATH_CHARS = /[<>:"|?*]/

function invalidWin32Path(p) {
  const rp = getRootPath(p)
  p = p.replace(rp, '')
  return INVALID_PATH_CHARS.test(p)
}

var win32 = {
  getRootPath,
  invalidWin32Path,
}

const invalidWin32Path$1 = win32.invalidWin32Path

const o777 = parseInt('0777', 8)

function mkdirs(p, opts, callback, made) {
  if (typeof opts === 'function') {
    callback = opts
    opts = {}
  } else if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  if (process.platform === 'win32' && invalidWin32Path$1(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    return callback(errInval)
  }

  let mode = opts.mode
  const xfs = opts.fs || gracefulFs

  if (mode === undefined) {
    mode = o777 & ~process.umask()
  }
  if (!made) made = null

  callback = callback || function () {}
  p = path__default['default'].resolve(p)

  xfs.mkdir(p, mode, (er) => {
    if (!er) {
      made = made || p
      return callback(null, made)
    }
    switch (er.code) {
      case 'ENOENT':
        if (path__default['default'].dirname(p) === p) return callback(er)
        mkdirs(path__default['default'].dirname(p), opts, (er, made) => {
          if (er) callback(er, made)
          else mkdirs(p, opts, callback, made)
        })
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        xfs.stat(p, (er2, stat) => {
          // if the stat fails, then that's super weird.
          // let the original error be the failure reason.
          if (er2 || !stat.isDirectory()) callback(er, made)
          else callback(null, made)
        })
        break
    }
  })
}

var mkdirs_1 = mkdirs

const invalidWin32Path$2 = win32.invalidWin32Path

const o777$1 = parseInt('0777', 8)

function mkdirsSync(p, opts, made) {
  if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  let mode = opts.mode
  const xfs = opts.fs || gracefulFs

  if (process.platform === 'win32' && invalidWin32Path$2(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    throw errInval
  }

  if (mode === undefined) {
    mode = o777$1 & ~process.umask()
  }
  if (!made) made = null

  p = path__default['default'].resolve(p)

  try {
    xfs.mkdirSync(p, mode)
    made = made || p
  } catch (err0) {
    switch (err0.code) {
      case 'ENOENT':
        if (path__default['default'].dirname(p) === p) throw err0
        made = mkdirsSync(path__default['default'].dirname(p), opts, made)
        mkdirsSync(p, opts, made)
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        let stat
        try {
          stat = xfs.statSync(p)
        } catch (err1) {
          throw err0
        }
        if (!stat.isDirectory()) throw err0
        break
    }
  }

  return made
}

var mkdirsSync_1 = mkdirsSync

const u = D__git_packageInherit_node_modules_universalify.fromCallback
const mkdirs$1 = u(mkdirs_1)

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs = {
  mkdirs: mkdirs$1,
  mkdirsSync: mkdirsSync_1,
  // alias
  mkdirp: mkdirs$1,
  mkdirpSync: mkdirsSync_1,
  ensureDir: mkdirs$1,
  ensureDirSync: mkdirsSync_1,
}

const u$1 = D__git_packageInherit_node_modules_universalify.fromPromise

function pathExists$1(path) {
  return D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_fs.access(
    path,
  )
    .then(() => true)
    .catch(() => false)
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists = {
  pathExists: u$1(pathExists$1),
  pathExistsSync:
    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_fs.existsSync,
}

const pathExists$2 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function copy(src, dest, options, callback) {
  if (typeof options === 'function' && !callback) {
    callback = options
    options = {}
  } else if (typeof options === 'function' || options instanceof RegExp) {
    options = { filter: options }
  }
  callback = callback || function () {}
  options = options || {}

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  // don't allow src and dest to be the same
  const basePath = process.cwd()
  const currentPath = path__default['default'].resolve(basePath, src)
  const targetPath = path__default['default'].resolve(basePath, dest)
  if (currentPath === targetPath)
    return callback(new Error('Source and destination must not be the same.'))

  gracefulFs.lstat(src, (err, stats) => {
    if (err) return callback(err)

    let dir = null
    if (stats.isDirectory()) {
      const parts = dest.split(path__default['default'].sep)
      parts.pop()
      dir = parts.join(path__default['default'].sep)
    } else {
      dir = path__default['default'].dirname(dest)
    }

    pathExists$2(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return ncp_1(src, dest, options, callback)
      D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
        dir,
        (err) => {
          if (err) return callback(err)
          ncp_1(src, dest, options, callback)
        },
      )
    })
  })
}

var copy_1 = copy

const u$2 = D__git_packageInherit_node_modules_universalify.fromCallback
var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_copy = {
  copy: u$2(copy_1),
}

/* eslint-disable node/no-deprecated-api */
var buffer = function (size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    try {
      return Buffer.allocUnsafe(size)
    } catch (e) {
      return new Buffer(size)
    }
  }
  return new Buffer(size)
}

const BUF_LENGTH = 64 * 1024
const _buff = buffer(BUF_LENGTH)

function copyFileSync(srcFile, destFile, options) {
  const overwrite = options.overwrite
  const errorOnExist = options.errorOnExist
  const preserveTimestamps = options.preserveTimestamps

  if (gracefulFs.existsSync(destFile)) {
    if (overwrite) {
      gracefulFs.unlinkSync(destFile)
    } else if (errorOnExist) {
      throw new Error(`${destFile} already exists`)
    } else return
  }

  const fdr = gracefulFs.openSync(srcFile, 'r')
  const stat = gracefulFs.fstatSync(fdr)
  const fdw = gracefulFs.openSync(destFile, 'w', stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = gracefulFs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    gracefulFs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  if (preserveTimestamps) {
    gracefulFs.futimesSync(fdw, stat.atime, stat.mtime)
  }

  gracefulFs.closeSync(fdr)
  gracefulFs.closeSync(fdw)
}

var copyFileSync_1 = copyFileSync

function copySync(src, dest, options) {
  if (typeof options === 'function' || options instanceof RegExp) {
    options = { filter: options }
  }

  options = options || {}
  options.recursive = !!options.recursive

  // default to true for now
  options.clobber = 'clobber' in options ? !!options.clobber : true
  // overwrite falls back to clobber
  options.overwrite =
    'overwrite' in options ? !!options.overwrite : options.clobber
  options.dereference = 'dereference' in options ? !!options.dereference : false
  options.preserveTimestamps =
    'preserveTimestamps' in options ? !!options.preserveTimestamps : false

  options.filter =
    options.filter ||
    function () {
      return true
    }

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  const stats =
    options.recursive && !options.dereference
      ? gracefulFs.lstatSync(src)
      : gracefulFs.statSync(src)
  const destFolder = path__default['default'].dirname(dest)
  const destFolderExists = gracefulFs.existsSync(destFolder)
  let performCopy = false

  if (options.filter instanceof RegExp) {
    console.warn(
      'Warning: fs-extra: Passing a RegExp filter is deprecated, use a function',
    )
    performCopy = options.filter.test(src)
  } else if (typeof options.filter === 'function')
    performCopy = options.filter(src, dest)

  if (stats.isFile() && performCopy) {
    if (!destFolderExists)
      D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
        destFolder,
      )
    copyFileSync_1(src, dest, {
      overwrite: options.overwrite,
      errorOnExist: options.errorOnExist,
      preserveTimestamps: options.preserveTimestamps,
    })
  } else if (stats.isDirectory() && performCopy) {
    if (!gracefulFs.existsSync(dest))
      D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
        dest,
      )
    const contents = gracefulFs.readdirSync(src)
    contents.forEach((content) => {
      const opts = options
      opts.recursive = true
      copySync(
        path__default['default'].join(src, content),
        path__default['default'].join(dest, content),
        opts,
      )
    })
  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {
    const srcPath = gracefulFs.readlinkSync(src)
    gracefulFs.symlinkSync(srcPath, dest)
  }
}

var copySync_1 = copySync

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_copySync = {
  copySync: copySync_1,
}

const isWindows = process.platform === 'win32'

function defaults(options) {
  const methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir']
  methods.forEach((m) => {
    options[m] = options[m] || gracefulFs[m]
    m = m + 'Sync'
    options[m] = options[m] || gracefulFs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
}

function rimraf(p, options, cb) {
  let busyTries = 0

  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert__default['default'](p, 'rimraf: missing path')
  assert__default['default'].equal(
    typeof p,
    'string',
    'rimraf: path should be a string',
  )
  assert__default['default'].equal(
    typeof cb,
    'function',
    'rimraf: callback function required',
  )
  assert__default['default'](
    options,
    'rimraf: invalid options argument provided',
  )
  assert__default['default'].equal(
    typeof options,
    'object',
    'rimraf: options should be object',
  )

  defaults(options)

  rimraf_(p, options, function CB(er) {
    if (er) {
      if (
        (er.code === 'EBUSY' ||
          er.code === 'ENOTEMPTY' ||
          er.code === 'EPERM') &&
        busyTries < options.maxBusyTries
      ) {
        busyTries++
        let time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(() => rimraf_(p, options, CB), time)
      }

      // already gone
      if (er.code === 'ENOENT') er = null
    }

    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_(p, options, cb) {
  assert__default['default'](p)
  assert__default['default'](options)
  assert__default['default'](typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, (er, st) => {
    if (er && er.code === 'ENOENT') {
      return cb(null)
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === 'EPERM' && isWindows) {
      return fixWinEPERM(p, options, er, cb)
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb)
    }

    options.unlink(p, (er) => {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null)
        }
        if (er.code === 'EPERM') {
          return isWindows
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        }
        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb)
        }
      }
      return cb(er)
    })
  })
}

function fixWinEPERM(p, options, er, cb) {
  assert__default['default'](p)
  assert__default['default'](options)
  assert__default['default'](typeof cb === 'function')
  if (er) {
    assert__default['default'](er instanceof Error)
  }

  options.chmod(p, 0o666, (er2) => {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er)
    } else {
      options.stat(p, (er3, stats) => {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er)
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb)
        } else {
          options.unlink(p, cb)
        }
      })
    }
  })
}

function fixWinEPERMSync(p, options, er) {
  let stats

  assert__default['default'](p)
  assert__default['default'](options)
  if (er) {
    assert__default['default'](er instanceof Error)
  }

  try {
    options.chmodSync(p, 0o666)
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  try {
    stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er)
  } else {
    options.unlinkSync(p)
  }
}

function rmdir(p, options, originalEr, cb) {
  assert__default['default'](p)
  assert__default['default'](options)
  if (originalEr) {
    assert__default['default'](originalEr instanceof Error)
  }
  assert__default['default'](typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, (er) => {
    if (
      er &&
      (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')
    ) {
      rmkids(p, options, cb)
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr)
    } else {
      cb(er)
    }
  })
}

function rmkids(p, options, cb) {
  assert__default['default'](p)
  assert__default['default'](options)
  assert__default['default'](typeof cb === 'function')

  options.readdir(p, (er, files) => {
    if (er) return cb(er)

    let n = files.length
    let errState

    if (n === 0) return options.rmdir(p, cb)

    files.forEach((f) => {
      rimraf(path__default['default'].join(p, f), options, (er) => {
        if (errState) {
          return
        }
        if (er) return cb((errState = er))
        if (--n === 0) {
          options.rmdir(p, cb)
        }
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync(p, options) {
  let st

  options = options || {}
  defaults(options)

  assert__default['default'](p, 'rimraf: missing path')
  assert__default['default'].equal(
    typeof p,
    'string',
    'rimraf: path should be a string',
  )
  assert__default['default'](options, 'rimraf: missing options')
  assert__default['default'].equal(
    typeof options,
    'object',
    'rimraf: options should be object',
  )

  try {
    st = options.lstatSync(p)
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er)
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null)
    } else {
      options.unlinkSync(p)
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    } else if (er.code === 'EPERM') {
      return isWindows
        ? fixWinEPERMSync(p, options, er)
        : rmdirSync(p, options, er)
    } else if (er.code !== 'EISDIR') {
      throw er
    }
    rmdirSync(p, options, er)
  }
}

function rmdirSync(p, options, originalEr) {
  assert__default['default'](p)
  assert__default['default'](options)
  if (originalEr) {
    assert__default['default'](originalEr instanceof Error)
  }

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === 'ENOTDIR') {
      throw originalEr
    } else if (
      er.code === 'ENOTEMPTY' ||
      er.code === 'EEXIST' ||
      er.code === 'EPERM'
    ) {
      rmkidsSync(p, options)
    } else if (er.code !== 'ENOENT') {
      throw er
    }
  }
}

function rmkidsSync(p, options) {
  assert__default['default'](p)
  assert__default['default'](options)
  options
    .readdirSync(p)
    .forEach((f) => rimrafSync(path__default['default'].join(p, f), options))

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  const retries = isWindows ? 100 : 1
  let i = 0
  do {
    let threw = true
    try {
      const ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw) continue // eslint-disable-line
    }
  } while (true)
}

var rimraf_1 = rimraf
rimraf.sync = rimrafSync

const u$3 = D__git_packageInherit_node_modules_universalify.fromCallback

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove = {
  remove: u$3(rimraf_1),
  removeSync: rimraf_1.sync,
}

var _fs
try {
  _fs = gracefulFs
} catch (_) {
  _fs = fs__default['default']
}

function readFile(file, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }

  if (typeof options === 'string') {
    options = { encoding: options }
  }

  options = options || {}
  var fs = options.fs || _fs

  var shouldThrow = true
  if ('throws' in options) {
    shouldThrow = options.throws
  }

  fs.readFile(file, options, function (err, data) {
    if (err) return callback(err)

    data = stripBom$1(data)

    var obj
    try {
      obj = JSON.parse(data, options ? options.reviver : null)
    } catch (err2) {
      if (shouldThrow) {
        err2.message = file + ': ' + err2.message
        return callback(err2)
      } else {
        return callback(null, null)
      }
    }

    callback(null, obj)
  })
}

function readFileSync(file, options) {
  options = options || {}
  if (typeof options === 'string') {
    options = { encoding: options }
  }

  var fs = options.fs || _fs

  var shouldThrow = true
  if ('throws' in options) {
    shouldThrow = options.throws
  }

  try {
    var content = fs.readFileSync(file, options)
    content = stripBom$1(content)
    return JSON.parse(content, options.reviver)
  } catch (err) {
    if (shouldThrow) {
      err.message = file + ': ' + err.message
      throw err
    } else {
      return null
    }
  }
}

function stringify$2(obj, options) {
  var spaces
  var EOL = '\n'
  if (typeof options === 'object' && options !== null) {
    if (options.spaces) {
      spaces = options.spaces
    }
    if (options.EOL) {
      EOL = options.EOL
    }
  }

  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)

  return str.replace(/\n/g, EOL) + EOL
}

function writeFile(file, obj, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }
  options = options || {}
  var fs = options.fs || _fs

  var str = ''
  try {
    str = stringify$2(obj, options)
  } catch (err) {
    // Need to return whether a callback was passed or not
    if (callback) callback(err, null)
    return
  }

  fs.writeFile(file, str, options, callback)
}

function writeFileSync(file, obj, options) {
  options = options || {}
  var fs = options.fs || _fs

  var str = stringify$2(obj, options)
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options)
}

function stripBom$1(content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  content = content.replace(/^\uFEFF/, '')
  return content
}

var jsonfile = {
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync,
}

var D__git_packageInherit_node_modules_jsonfile = jsonfile

const u$4 = D__git_packageInherit_node_modules_universalify.fromCallback

var jsonfile$1 = {
  // jsonfile exports
  readJson: u$4(D__git_packageInherit_node_modules_jsonfile.readFile),
  readJsonSync: D__git_packageInherit_node_modules_jsonfile.readFileSync,
  writeJson: u$4(D__git_packageInherit_node_modules_jsonfile.writeFile),
  writeJsonSync: D__git_packageInherit_node_modules_jsonfile.writeFileSync,
}

const pathExists$3 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function outputJson(file, data, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const dir = path__default['default'].dirname(file)

  pathExists$3(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return jsonfile$1.writeJson(file, data, options, callback)

    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
      dir,
      (err) => {
        if (err) return callback(err)
        jsonfile$1.writeJson(file, data, options, callback)
      },
    )
  })
}

var outputJson_1 = outputJson

function outputJsonSync(file, data, options) {
  const dir = path__default['default'].dirname(file)

  if (!gracefulFs.existsSync(dir)) {
    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
      dir,
    )
  }

  jsonfile$1.writeJsonSync(file, data, options)
}

var outputJsonSync_1 = outputJsonSync

const u$5 = D__git_packageInherit_node_modules_universalify.fromCallback

jsonfile$1.outputJson = u$5(outputJson_1)
jsonfile$1.outputJsonSync = outputJsonSync_1
// aliases
jsonfile$1.outputJSON = jsonfile$1.outputJson
jsonfile$1.outputJSONSync = jsonfile$1.outputJsonSync
jsonfile$1.writeJSON = jsonfile$1.writeJson
jsonfile$1.writeJSONSync = jsonfile$1.writeJsonSync
jsonfile$1.readJSON = jsonfile$1.readJson
jsonfile$1.readJSONSync = jsonfile$1.readJsonSync

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_json = jsonfile$1

// most of this code was written by Andrew Kelley
// licensed under the BSD license: see
// https://github.com/andrewrk/node-mv/blob/master/package.json

// this needs a cleanup

const u$6 = D__git_packageInherit_node_modules_universalify.fromCallback

const remove =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove.remove
const mkdirp =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs

function move(src, dest, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const overwrite = options.overwrite || options.clobber || false

  isSrcSubdir(src, dest, (err, itIs) => {
    if (err) return callback(err)
    if (itIs)
      return callback(
        new Error(
          `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`,
        ),
      )
    mkdirp(path__default['default'].dirname(dest), (err) => {
      if (err) return callback(err)
      doRename()
    })
  })

  function doRename() {
    if (
      path__default['default'].resolve(src) ===
      path__default['default'].resolve(dest)
    ) {
      gracefulFs.access(src, callback)
    } else if (overwrite) {
      gracefulFs.rename(src, dest, (err) => {
        if (!err) return callback()

        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
          remove(dest, (err) => {
            if (err) return callback(err)
            options.overwrite = false // just overwriteed it, no need to do it again
            move(src, dest, options, callback)
          })
          return
        }

        // weird Windows shit
        if (err.code === 'EPERM') {
          setTimeout(() => {
            remove(dest, (err) => {
              if (err) return callback(err)
              options.overwrite = false
              move(src, dest, options, callback)
            })
          }, 200)
          return
        }

        if (err.code !== 'EXDEV') return callback(err)
        moveAcrossDevice(src, dest, overwrite, callback)
      })
    } else {
      gracefulFs.link(src, dest, (err) => {
        if (err) {
          if (
            err.code === 'EXDEV' ||
            err.code === 'EISDIR' ||
            err.code === 'EPERM' ||
            err.code === 'ENOTSUP'
          ) {
            return moveAcrossDevice(src, dest, overwrite, callback)
          }
          return callback(err)
        }
        return gracefulFs.unlink(src, callback)
      })
    }
  }
}

function moveAcrossDevice(src, dest, overwrite, callback) {
  gracefulFs.stat(src, (err, stat) => {
    if (err) return callback(err)

    if (stat.isDirectory()) {
      moveDirAcrossDevice(src, dest, overwrite, callback)
    } else {
      moveFileAcrossDevice(src, dest, overwrite, callback)
    }
  })
}

function moveFileAcrossDevice(src, dest, overwrite, callback) {
  const flags = overwrite ? 'w' : 'wx'
  const ins = gracefulFs.createReadStream(src)
  const outs = gracefulFs.createWriteStream(dest, { flags })

  ins.on('error', (err) => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)

    // may want to create a directory but `out` line above
    // creates an empty file for us: See #108
    // don't care about error here
    gracefulFs.unlink(dest, () => {
      // note: `err` here is from the input stream errror
      if (err.code === 'EISDIR' || err.code === 'EPERM') {
        moveDirAcrossDevice(src, dest, overwrite, callback)
      } else {
        callback(err)
      }
    })
  })

  outs.on('error', (err) => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)
    callback(err)
  })

  outs.once('close', onClose)
  ins.pipe(outs)

  function onClose() {
    gracefulFs.unlink(src, callback)
  }
}

function moveDirAcrossDevice(src, dest, overwrite, callback) {
  const options = {
    overwrite: false,
  }

  if (overwrite) {
    remove(dest, (err) => {
      if (err) return callback(err)
      startNcp()
    })
  } else {
    startNcp()
  }

  function startNcp() {
    ncp_1(src, dest, options, (err) => {
      if (err) return callback(err)
      remove(src, callback)
    })
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir(src, dest, cb) {
  gracefulFs.stat(src, (err, st) => {
    if (err) return cb(err)
    if (st.isDirectory()) {
      const baseDir = dest.split(
        path__default['default'].dirname(src) + path__default['default'].sep,
      )[1]
      if (baseDir) {
        const destBasename = baseDir.split(path__default['default'].sep)[0]
        if (destBasename)
          return cb(
            null,
            src !== dest &&
              dest.indexOf(src) > -1 &&
              destBasename === path__default['default'].basename(src),
          )
        return cb(null, false)
      }
      return cb(null, false)
    }
    return cb(null, false)
  })
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_move = {
  move: u$6(move),
}

const copySync$1 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_copySync.copySync
const removeSync =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove.removeSync
const mkdirpSync =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync

function moveSync(src, dest, options) {
  options = options || {}
  const overwrite = options.overwrite || options.clobber || false

  src = path__default['default'].resolve(src)
  dest = path__default['default'].resolve(dest)

  if (src === dest) return gracefulFs.accessSync(src)

  if (isSrcSubdir$1(src, dest))
    throw new Error(`Cannot move '${src}' into itself '${dest}'.`)

  mkdirpSync(path__default['default'].dirname(dest))
  tryRenameSync()

  function tryRenameSync() {
    if (overwrite) {
      try {
        return gracefulFs.renameSync(src, dest)
      } catch (err) {
        if (
          err.code === 'ENOTEMPTY' ||
          err.code === 'EEXIST' ||
          err.code === 'EPERM'
        ) {
          removeSync(dest)
          options.overwrite = false // just overwriteed it, no need to do it again
          return moveSync(src, dest, options)
        }

        if (err.code !== 'EXDEV') throw err
        return moveSyncAcrossDevice(src, dest, overwrite)
      }
    } else {
      try {
        gracefulFs.linkSync(src, dest)
        return gracefulFs.unlinkSync(src)
      } catch (err) {
        if (
          err.code === 'EXDEV' ||
          err.code === 'EISDIR' ||
          err.code === 'EPERM' ||
          err.code === 'ENOTSUP'
        ) {
          return moveSyncAcrossDevice(src, dest, overwrite)
        }
        throw err
      }
    }
  }
}

function moveSyncAcrossDevice(src, dest, overwrite) {
  const stat = gracefulFs.statSync(src)

  if (stat.isDirectory()) {
    return moveDirSyncAcrossDevice(src, dest, overwrite)
  } else {
    return moveFileSyncAcrossDevice(src, dest, overwrite)
  }
}

function moveFileSyncAcrossDevice(src, dest, overwrite) {
  const BUF_LENGTH = 64 * 1024
  const _buff = buffer(BUF_LENGTH)

  const flags = overwrite ? 'w' : 'wx'

  const fdr = gracefulFs.openSync(src, 'r')
  const stat = gracefulFs.fstatSync(fdr)
  const fdw = gracefulFs.openSync(dest, flags, stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = gracefulFs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    gracefulFs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  gracefulFs.closeSync(fdr)
  gracefulFs.closeSync(fdw)
  return gracefulFs.unlinkSync(src)
}

function moveDirSyncAcrossDevice(src, dest, overwrite) {
  const options = {
    overwrite: false,
  }

  if (overwrite) {
    removeSync(dest)
    tryCopySync()
  } else {
    tryCopySync()
  }

  function tryCopySync() {
    copySync$1(src, dest, options)
    return removeSync(src)
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir$1(src, dest) {
  try {
    return (
      gracefulFs.statSync(src).isDirectory() &&
      src !== dest &&
      dest.indexOf(src) > -1 &&
      dest
        .split(
          path__default['default'].dirname(src) + path__default['default'].sep,
        )[1]
        .split(path__default['default'].sep)[0] ===
        path__default['default'].basename(src)
    )
  } catch (e) {
    return false
  }
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_moveSync = {
  moveSync,
}

const u$7 = D__git_packageInherit_node_modules_universalify.fromCallback

const emptyDir = u$7(function emptyDir(dir, callback) {
  callback = callback || function () {}
  fs__default['default'].readdir(dir, (err, items) => {
    if (err)
      return D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
        dir,
        callback,
      )

    items = items.map((item) => path__default['default'].join(dir, item))

    deleteItem()

    function deleteItem() {
      const item = items.pop()
      if (!item) return callback()
      D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove.remove(
        item,
        (err) => {
          if (err) return callback(err)
          deleteItem()
        },
      )
    }
  })
})

function emptyDirSync(dir) {
  let items
  try {
    items = fs__default['default'].readdirSync(dir)
  } catch (err) {
    return D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
      dir,
    )
  }

  items.forEach((item) => {
    item = path__default['default'].join(dir, item)
    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove.removeSync(
      item,
    )
  })
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_empty = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir,
}

const u$8 = D__git_packageInherit_node_modules_universalify.fromCallback

const pathExists$4 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function createFile(file, callback) {
  function makeFile() {
    gracefulFs.writeFile(file, '', (err) => {
      if (err) return callback(err)
      callback()
    })
  }

  gracefulFs.stat(file, (err, stats) => {
    // eslint-disable-line handle-callback-err
    if (!err && stats.isFile()) return callback()
    const dir = path__default['default'].dirname(file)
    pathExists$4(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return makeFile()
      D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
        dir,
        (err) => {
          if (err) return callback(err)
          makeFile()
        },
      )
    })
  })
}

function createFileSync(file) {
  let stats
  try {
    stats = gracefulFs.statSync(file)
  } catch (e) {}
  if (stats && stats.isFile()) return

  const dir = path__default['default'].dirname(file)
  if (!gracefulFs.existsSync(dir)) {
    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
      dir,
    )
  }

  gracefulFs.writeFileSync(file, '')
}

var file = {
  createFile: u$8(createFile),
  createFileSync,
}

const u$9 = D__git_packageInherit_node_modules_universalify.fromCallback

const pathExists$5 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function createLink(srcpath, dstpath, callback) {
  function makeLink(srcpath, dstpath) {
    gracefulFs.link(srcpath, dstpath, (err) => {
      if (err) return callback(err)
      callback(null)
    })
  }

  pathExists$5(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    gracefulFs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureLink')
        return callback(err)
      }

      const dir = path__default['default'].dirname(dstpath)
      pathExists$5(dir, (err, dirExists) => {
        if (err) return callback(err)
        if (dirExists) return makeLink(srcpath, dstpath)
        D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
          dir,
          (err) => {
            if (err) return callback(err)
            makeLink(srcpath, dstpath)
          },
        )
      })
    })
  })
}

function createLinkSync(srcpath, dstpath, callback) {
  const destinationExists = gracefulFs.existsSync(dstpath)
  if (destinationExists) return undefined

  try {
    gracefulFs.lstatSync(srcpath)
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink')
    throw err
  }

  const dir = path__default['default'].dirname(dstpath)
  const dirExists = gracefulFs.existsSync(dir)
  if (dirExists) return gracefulFs.linkSync(srcpath, dstpath)
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
    dir,
  )

  return gracefulFs.linkSync(srcpath, dstpath)
}

var link = {
  createLink: u$9(createLink),
  createLinkSync,
}

const pathExists$6 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */

function symlinkPaths(srcpath, dstpath, callback) {
  if (path__default['default'].isAbsolute(srcpath)) {
    return gracefulFs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureSymlink')
        return callback(err)
      }
      return callback(null, {
        toCwd: srcpath,
        toDst: srcpath,
      })
    })
  } else {
    const dstdir = path__default['default'].dirname(dstpath)
    const relativeToDst = path__default['default'].join(dstdir, srcpath)
    return pathExists$6(relativeToDst, (err, exists) => {
      if (err) return callback(err)
      if (exists) {
        return callback(null, {
          toCwd: relativeToDst,
          toDst: srcpath,
        })
      } else {
        return gracefulFs.lstat(srcpath, (err, stat) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink')
            return callback(err)
          }
          return callback(null, {
            toCwd: srcpath,
            toDst: path__default['default'].relative(dstdir, srcpath),
          })
        })
      }
    })
  }
}

function symlinkPathsSync(srcpath, dstpath) {
  let exists
  if (path__default['default'].isAbsolute(srcpath)) {
    exists = gracefulFs.existsSync(srcpath)
    if (!exists) throw new Error('absolute srcpath does not exist')
    return {
      toCwd: srcpath,
      toDst: srcpath,
    }
  } else {
    const dstdir = path__default['default'].dirname(dstpath)
    const relativeToDst = path__default['default'].join(dstdir, srcpath)
    exists = gracefulFs.existsSync(relativeToDst)
    if (exists) {
      return {
        toCwd: relativeToDst,
        toDst: srcpath,
      }
    } else {
      exists = gracefulFs.existsSync(srcpath)
      if (!exists) throw new Error('relative srcpath does not exist')
      return {
        toCwd: srcpath,
        toDst: path__default['default'].relative(dstdir, srcpath),
      }
    }
  }
}

var symlinkPaths_1 = {
  symlinkPaths,
  symlinkPathsSync,
}

function symlinkType(srcpath, type, callback) {
  callback = typeof type === 'function' ? type : callback
  type = typeof type === 'function' ? false : type
  if (type) return callback(null, type)
  gracefulFs.lstat(srcpath, (err, stats) => {
    if (err) return callback(null, 'file')
    type = stats && stats.isDirectory() ? 'dir' : 'file'
    callback(null, type)
  })
}

function symlinkTypeSync(srcpath, type) {
  let stats

  if (type) return type
  try {
    stats = gracefulFs.lstatSync(srcpath)
  } catch (e) {
    return 'file'
  }
  return stats && stats.isDirectory() ? 'dir' : 'file'
}

var symlinkType_1 = {
  symlinkType,
  symlinkTypeSync,
}

const u$a = D__git_packageInherit_node_modules_universalify.fromCallback

const mkdirs$2 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs
const mkdirsSync$1 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync

const symlinkPaths$1 = symlinkPaths_1.symlinkPaths
const symlinkPathsSync$1 = symlinkPaths_1.symlinkPathsSync

const symlinkType$1 = symlinkType_1.symlinkType
const symlinkTypeSync$1 = symlinkType_1.symlinkTypeSync

const pathExists$7 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function createSymlink(srcpath, dstpath, type, callback) {
  callback = typeof type === 'function' ? type : callback
  type = typeof type === 'function' ? false : type

  pathExists$7(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    symlinkPaths$1(srcpath, dstpath, (err, relative) => {
      if (err) return callback(err)
      srcpath = relative.toDst
      symlinkType$1(relative.toCwd, type, (err, type) => {
        if (err) return callback(err)
        const dir = path__default['default'].dirname(dstpath)
        pathExists$7(dir, (err, dirExists) => {
          if (err) return callback(err)
          if (dirExists)
            return gracefulFs.symlink(srcpath, dstpath, type, callback)
          mkdirs$2(dir, (err) => {
            if (err) return callback(err)
            gracefulFs.symlink(srcpath, dstpath, type, callback)
          })
        })
      })
    })
  })
}

function createSymlinkSync(srcpath, dstpath, type, callback) {
  type = typeof type === 'function' ? false : type

  const destinationExists = gracefulFs.existsSync(dstpath)
  if (destinationExists) return undefined

  const relative = symlinkPathsSync$1(srcpath, dstpath)
  srcpath = relative.toDst
  type = symlinkTypeSync$1(relative.toCwd, type)
  const dir = path__default['default'].dirname(dstpath)
  const exists = gracefulFs.existsSync(dir)
  if (exists) return gracefulFs.symlinkSync(srcpath, dstpath, type)
  mkdirsSync$1(dir)
  return gracefulFs.symlinkSync(srcpath, dstpath, type)
}

var symlink = {
  createSymlink: u$a(createSymlink),
  createSymlinkSync,
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_ensure = {
  // file
  createFile: file.createFile,
  createFileSync: file.createFileSync,
  ensureFile: file.createFile,
  ensureFileSync: file.createFileSync,
  // link
  createLink: link.createLink,
  createLinkSync: link.createLinkSync,
  ensureLink: link.createLink,
  ensureLinkSync: link.createLinkSync,
  // symlink
  createSymlink: symlink.createSymlink,
  createSymlinkSync: symlink.createSymlinkSync,
  ensureSymlink: symlink.createSymlink,
  ensureSymlinkSync: symlink.createSymlinkSync,
}

const u$b = D__git_packageInherit_node_modules_universalify.fromCallback

const pathExists$8 =
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists.pathExists

function outputFile(file, data, encoding, callback) {
  if (typeof encoding === 'function') {
    callback = encoding
    encoding = 'utf8'
  }

  const dir = path__default['default'].dirname(file)
  pathExists$8(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return gracefulFs.writeFile(file, data, encoding, callback)

    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirs(
      dir,
      (err) => {
        if (err) return callback(err)

        gracefulFs.writeFile(file, data, encoding, callback)
      },
    )
  })
}

function outputFileSync(file, data, encoding) {
  const dir = path__default['default'].dirname(file)
  if (gracefulFs.existsSync(dir)) {
    return gracefulFs.writeFileSync.apply(gracefulFs, arguments)
  }
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs.mkdirsSync(
    dir,
  )
  gracefulFs.writeFileSync.apply(gracefulFs, arguments)
}

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_output = {
  outputFile: u$b(outputFile),
  outputFileSync,
}

const fs$2 = {}

// Export graceful-fs:
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_fs,
)
// Export extra methods:
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_copy,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_copySync,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_mkdirs,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_remove,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_json,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_move,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_moveSync,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_empty,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_ensure,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_output,
)
assign_1(
  fs$2,
  D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib_pathExists,
)

var D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib = fs$2

var types = {
  ROOT: 0,
  GROUP: 1,
  POSITION: 2,
  SET: 3,
  RANGE: 4,
  REPETITION: 5,
  REFERENCE: 6,
  CHAR: 7,
}

var INTS = function () {
  return [{ type: types.RANGE, from: 48, to: 57 }]
}

var WORDS = function () {
  return [
    { type: types.CHAR, value: 95 },
    { type: types.RANGE, from: 97, to: 122 },
    { type: types.RANGE, from: 65, to: 90 },
  ].concat(INTS())
}

var WHITESPACE = function () {
  return [
    { type: types.CHAR, value: 9 },
    { type: types.CHAR, value: 10 },
    { type: types.CHAR, value: 11 },
    { type: types.CHAR, value: 12 },
    { type: types.CHAR, value: 13 },
    { type: types.CHAR, value: 32 },
    { type: types.CHAR, value: 160 },
    { type: types.CHAR, value: 5760 },
    { type: types.CHAR, value: 6158 },
    { type: types.CHAR, value: 8192 },
    { type: types.CHAR, value: 8193 },
    { type: types.CHAR, value: 8194 },
    { type: types.CHAR, value: 8195 },
    { type: types.CHAR, value: 8196 },
    { type: types.CHAR, value: 8197 },
    { type: types.CHAR, value: 8198 },
    { type: types.CHAR, value: 8199 },
    { type: types.CHAR, value: 8200 },
    { type: types.CHAR, value: 8201 },
    { type: types.CHAR, value: 8202 },
    { type: types.CHAR, value: 8232 },
    { type: types.CHAR, value: 8233 },
    { type: types.CHAR, value: 8239 },
    { type: types.CHAR, value: 8287 },
    { type: types.CHAR, value: 12288 },
    { type: types.CHAR, value: 65279 },
  ]
}

var NOTANYCHAR = function () {
  return [
    { type: types.CHAR, value: 10 },
    { type: types.CHAR, value: 13 },
    { type: types.CHAR, value: 8232 },
    { type: types.CHAR, value: 8233 },
  ]
}

// Predefined class objects.
var words = function () {
  return { type: types.SET, set: WORDS(), not: false }
}

var notWords = function () {
  return { type: types.SET, set: WORDS(), not: true }
}

var ints = function () {
  return { type: types.SET, set: INTS(), not: false }
}

var notInts = function () {
  return { type: types.SET, set: INTS(), not: true }
}

var whitespace = function () {
  return { type: types.SET, set: WHITESPACE(), not: false }
}

var notWhitespace = function () {
  return { type: types.SET, set: WHITESPACE(), not: true }
}

var anyChar = function () {
  return { type: types.SET, set: NOTANYCHAR(), not: true }
}

var sets = {
  words: words,
  notWords: notWords,
  ints: ints,
  notInts: notInts,
  whitespace: whitespace,
  notWhitespace: notWhitespace,
  anyChar: anyChar,
}

var util = createCommonjsModule(function (module, exports) {
  // All of these are private and only used by randexp.
  // It's assumed that they will always be called with the correct input.

  var CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?'
  var SLSH = { 0: 0, t: 9, n: 10, v: 11, f: 12, r: 13 }

  /**
   * Finds character representations in str and convert all to
   * their respective characters
   *
   * @param {String} str
   * @return {String}
   */
  exports.strToChars = function (str) {
    /* jshint maxlen: false */
    var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z\[\\\]\^?])|([0tnvfr]))/g
    str = str.replace(
      chars_regex,
      function (s, b, lbs, a16, b16, c8, dctrl, eslsh) {
        if (lbs) {
          return s
        }

        var code = b
          ? 8
          : a16
          ? parseInt(a16, 16)
          : b16
          ? parseInt(b16, 16)
          : c8
          ? parseInt(c8, 8)
          : dctrl
          ? CTRL.indexOf(dctrl)
          : SLSH[eslsh]

        var c = String.fromCharCode(code)

        // Escape special regex characters.
        if (/[\[\]{}\^$.|?*+()]/.test(c)) {
          c = '\\' + c
        }

        return c
      },
    )

    return str
  }

  /**
   * turns class into tokens
   * reads str until it encounters a ] not preceeded by a \
   *
   * @param {String} str
   * @param {String} regexpStr
   * @return {Array.<Array.<Object>, Number>}
   */
  exports.tokenizeClass = function (str, regexpStr) {
    /* jshint maxlen: false */
    var tokens = []
    var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?(.)/g
    var rs, c

    while ((rs = regexp.exec(str)) != null) {
      if (rs[1]) {
        tokens.push(sets.words())
      } else if (rs[2]) {
        tokens.push(sets.ints())
      } else if (rs[3]) {
        tokens.push(sets.whitespace())
      } else if (rs[4]) {
        tokens.push(sets.notWords())
      } else if (rs[5]) {
        tokens.push(sets.notInts())
      } else if (rs[6]) {
        tokens.push(sets.notWhitespace())
      } else if (rs[7]) {
        tokens.push({
          type: types.RANGE,
          from: (rs[8] || rs[9]).charCodeAt(0),
          to: rs[10].charCodeAt(0),
        })
      } else if ((c = rs[12])) {
        tokens.push({
          type: types.CHAR,
          value: c.charCodeAt(0),
        })
      } else {
        return [tokens, regexp.lastIndex]
      }
    }

    exports.error(regexpStr, 'Unterminated character class')
  }

  /**
   * Shortcut to throw errors.
   *
   * @param {String} regexp
   * @param {String} msg
   */
  exports.error = function (regexp, msg) {
    throw new SyntaxError(
      'Invalid regular expression: /' + regexp + '/: ' + msg,
    )
  }
})

var wordBoundary = function () {
  return { type: types.POSITION, value: 'b' }
}

var nonWordBoundary = function () {
  return { type: types.POSITION, value: 'B' }
}

var begin = function () {
  return { type: types.POSITION, value: '^' }
}

var end = function () {
  return { type: types.POSITION, value: '$' }
}

var positions = {
  wordBoundary: wordBoundary,
  nonWordBoundary: nonWordBoundary,
  begin: begin,
  end: end,
}

var D__git_packageInherit_node_modules_ret_lib = function (regexpStr) {
  var i = 0,
    l,
    c,
    start = { type: types.ROOT, stack: [] },
    // Keep track of last clause/group and stack.
    lastGroup = start,
    last = start.stack,
    groupStack = []

  var repeatErr = function (i) {
    util.error(regexpStr, 'Nothing to repeat at column ' + (i - 1))
  }

  // Decode a few escaped characters.
  var str = util.strToChars(regexpStr)
  l = str.length

  // Iterate through each character in string.
  while (i < l) {
    c = str[i++]

    switch (c) {
      // Handle escaped characters, inclues a few sets.
      case '\\':
        c = str[i++]

        switch (c) {
          case 'b':
            last.push(positions.wordBoundary())
            break

          case 'B':
            last.push(positions.nonWordBoundary())
            break

          case 'w':
            last.push(sets.words())
            break

          case 'W':
            last.push(sets.notWords())
            break

          case 'd':
            last.push(sets.ints())
            break

          case 'D':
            last.push(sets.notInts())
            break

          case 's':
            last.push(sets.whitespace())
            break

          case 'S':
            last.push(sets.notWhitespace())
            break

          default:
            // Check if c is integer.
            // In which case it's a reference.
            if (/\d/.test(c)) {
              last.push({ type: types.REFERENCE, value: parseInt(c, 10) })

              // Escaped character.
            } else {
              last.push({ type: types.CHAR, value: c.charCodeAt(0) })
            }
        }

        break

      // Positionals.
      case '^':
        last.push(positions.begin())
        break

      case '$':
        last.push(positions.end())
        break

      // Handle custom sets.
      case '[':
        // Check if this class is 'anti' i.e. [^abc].
        var not
        if (str[i] === '^') {
          not = true
          i++
        } else {
          not = false
        }

        // Get all the characters in class.
        var classTokens = util.tokenizeClass(str.slice(i), regexpStr)

        // Increase index by length of class.
        i += classTokens[1]
        last.push({
          type: types.SET,
          set: classTokens[0],
          not: not,
        })

        break

      // Class of any character except \n.
      case '.':
        last.push(sets.anyChar())
        break

      // Push group onto stack.
      case '(':
        // Create group.
        var group = {
          type: types.GROUP,
          stack: [],
          remember: true,
        }

        c = str[i]

        // If if this is a special kind of group.
        if (c === '?') {
          c = str[i + 1]
          i += 2

          // Match if followed by.
          if (c === '=') {
            group.followedBy = true

            // Match if not followed by.
          } else if (c === '!') {
            group.notFollowedBy = true
          } else if (c !== ':') {
            util.error(
              regexpStr,
              "Invalid group, character '" +
                c +
                "' after '?' at column " +
                (i - 1),
            )
          }

          group.remember = false
        }

        // Insert subgroup into current group stack.
        last.push(group)

        // Remember the current group for when the group closes.
        groupStack.push(lastGroup)

        // Make this new group the current group.
        lastGroup = group
        last = group.stack
        break

      // Pop group out of stack.
      case ')':
        if (groupStack.length === 0) {
          util.error(regexpStr, 'Unmatched ) at column ' + (i - 1))
        }
        lastGroup = groupStack.pop()

        // Check if this group has a PIPE.
        // To get back the correct last stack.
        last = lastGroup.options
          ? lastGroup.options[lastGroup.options.length - 1]
          : lastGroup.stack
        break

      // Use pipe character to give more choices.
      case '|':
        // Create array where options are if this is the first PIPE
        // in this clause.
        if (!lastGroup.options) {
          lastGroup.options = [lastGroup.stack]
          delete lastGroup.stack
        }

        // Create a new stack and add to options for rest of clause.
        var stack = []
        lastGroup.options.push(stack)
        last = stack
        break

      // Repetition.
      // For every repetition, remove last element from last stack
      // then insert back a RANGE object.
      // This design is chosen because there could be more than
      // one repetition symbols in a regex i.e. `a?+{2,3}`.
      case '{':
        var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)),
          min,
          max
        if (rs !== null) {
          if (last.length === 0) {
            repeatErr(i)
          }
          min = parseInt(rs[1], 10)
          max = rs[2] ? (rs[3] ? parseInt(rs[3], 10) : Infinity) : min
          i += rs[0].length

          last.push({
            type: types.REPETITION,
            min: min,
            max: max,
            value: last.pop(),
          })
        } else {
          last.push({
            type: types.CHAR,
            value: 123,
          })
        }
        break

      case '?':
        if (last.length === 0) {
          repeatErr(i)
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: 1,
          value: last.pop(),
        })
        break

      case '+':
        if (last.length === 0) {
          repeatErr(i)
        }
        last.push({
          type: types.REPETITION,
          min: 1,
          max: Infinity,
          value: last.pop(),
        })
        break

      case '*':
        if (last.length === 0) {
          repeatErr(i)
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: Infinity,
          value: last.pop(),
        })
        break

      // Default is a character that is not `\[](){}?+*^$`.
      default:
        last.push({
          type: types.CHAR,
          value: c.charCodeAt(0),
        })
    }
  }

  // Check if any groups have not been closed.
  if (groupStack.length !== 0) {
    util.error(regexpStr, 'Unterminated group')
  }

  return start
}

var types_1 = types
D__git_packageInherit_node_modules_ret_lib.types = types_1

var types$1 = D__git_packageInherit_node_modules_ret_lib.types

var D__git_packageInherit_node_modules_safeRegex = function (re, opts) {
  if (!opts) opts = {}
  var replimit = opts.limit === undefined ? 25 : opts.limit

  if (isRegExp$1(re)) re = re.source
  else if (typeof re !== 'string') re = String(re)

  try {
    re = D__git_packageInherit_node_modules_ret_lib(re)
  } catch (err) {
    return false
  }

  var reps = 0
  return (function walk(node, starHeight) {
    if (node.type === types$1.REPETITION) {
      starHeight++
      reps++
      if (starHeight > 1) return false
      if (reps > replimit) return false
    }

    if (node.options) {
      for (var i = 0, len = node.options.length; i < len; i++) {
        var ok = walk({ stack: node.options[i] }, starHeight)
        if (!ok) return false
      }
    }
    var stack = node.stack || (node.value && node.value.stack)
    if (!stack) return true

    for (var i = 0; i < stack.length; i++) {
      var ok = walk(stack[i], starHeight)
      if (!ok) return false
    }

    return true
  })(re, 0)
}

function isRegExp$1(x) {
  return {}.toString.call(x) === '[object RegExp]'
}

/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false
}

var toString = Object.prototype.toString

var D__git_packageInherit_node_modules_isDescriptor_node_modules_kindOf = function kindOf(
  val,
) {
  if (val === void 0) return 'undefined'
  if (val === null) return 'null'

  var type = typeof val
  if (type === 'boolean') return 'boolean'
  if (type === 'string') return 'string'
  if (type === 'number') return 'number'
  if (type === 'symbol') return 'symbol'
  if (type === 'function') {
    return isGeneratorFn(val) ? 'generatorfunction' : 'function'
  }

  if (isArray(val)) return 'array'
  if (isBuffer(val)) return 'buffer'
  if (isArguments(val)) return 'arguments'
  if (isDate(val)) return 'date'
  if (isError(val)) return 'error'
  if (isRegexp(val)) return 'regexp'

  switch (ctorName(val)) {
    case 'Symbol':
      return 'symbol'
    case 'Promise':
      return 'promise'

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap':
      return 'weakmap'
    case 'WeakSet':
      return 'weakset'
    case 'Map':
      return 'map'
    case 'Set':
      return 'set'

    // 8-bit typed arrays
    case 'Int8Array':
      return 'int8array'
    case 'Uint8Array':
      return 'uint8array'
    case 'Uint8ClampedArray':
      return 'uint8clampedarray'

    // 16-bit typed arrays
    case 'Int16Array':
      return 'int16array'
    case 'Uint16Array':
      return 'uint16array'

    // 32-bit typed arrays
    case 'Int32Array':
      return 'int32array'
    case 'Uint32Array':
      return 'uint32array'
    case 'Float32Array':
      return 'float32array'
    case 'Float64Array':
      return 'float64array'
  }

  if (isGeneratorObj(val)) {
    return 'generator'
  }

  // Non-plain objects
  type = toString.call(val)
  switch (type) {
    case '[object Object]':
      return 'object'
    // iterators
    case '[object Map Iterator]':
      return 'mapiterator'
    case '[object Set Iterator]':
      return 'setiterator'
    case '[object String Iterator]':
      return 'stringiterator'
    case '[object Array Iterator]':
      return 'arrayiterator'
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '')
}

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null
}

function isArray(val) {
  if (Array.isArray) return Array.isArray(val)
  return val instanceof Array
}

function isError(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  )
}

function isDate(val) {
  if (val instanceof Date) return true
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  )
}

function isRegexp(val) {
  if (val instanceof RegExp) return true
  return (
    typeof val.flags === 'string' &&
    typeof val.ignoreCase === 'boolean' &&
    typeof val.multiline === 'boolean' &&
    typeof val.global === 'boolean'
  )
}

function isGeneratorFn(name, val) {
  return ctorName(name) === 'GeneratorFunction'
}

function isGeneratorObj(val) {
  return (
    typeof val.throw === 'function' &&
    typeof val.return === 'function' &&
    typeof val.next === 'function'
  )
}

function isArguments(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true
    }
  }
  return false
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val)
  }
  return false
}

var toString$1 = Object.prototype.toString

var D__git_packageInherit_node_modules_isAccessorDescriptor_node_modules_kindOf = function kindOf(
  val,
) {
  if (val === void 0) return 'undefined'
  if (val === null) return 'null'

  var type = typeof val
  if (type === 'boolean') return 'boolean'
  if (type === 'string') return 'string'
  if (type === 'number') return 'number'
  if (type === 'symbol') return 'symbol'
  if (type === 'function') {
    return isGeneratorFn$1(val) ? 'generatorfunction' : 'function'
  }

  if (isArray$1(val)) return 'array'
  if (isBuffer$1(val)) return 'buffer'
  if (isArguments$1(val)) return 'arguments'
  if (isDate$1(val)) return 'date'
  if (isError$1(val)) return 'error'
  if (isRegexp$1(val)) return 'regexp'

  switch (ctorName$1(val)) {
    case 'Symbol':
      return 'symbol'
    case 'Promise':
      return 'promise'

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap':
      return 'weakmap'
    case 'WeakSet':
      return 'weakset'
    case 'Map':
      return 'map'
    case 'Set':
      return 'set'

    // 8-bit typed arrays
    case 'Int8Array':
      return 'int8array'
    case 'Uint8Array':
      return 'uint8array'
    case 'Uint8ClampedArray':
      return 'uint8clampedarray'

    // 16-bit typed arrays
    case 'Int16Array':
      return 'int16array'
    case 'Uint16Array':
      return 'uint16array'

    // 32-bit typed arrays
    case 'Int32Array':
      return 'int32array'
    case 'Uint32Array':
      return 'uint32array'
    case 'Float32Array':
      return 'float32array'
    case 'Float64Array':
      return 'float64array'
  }

  if (isGeneratorObj$1(val)) {
    return 'generator'
  }

  // Non-plain objects
  type = toString$1.call(val)
  switch (type) {
    case '[object Object]':
      return 'object'
    // iterators
    case '[object Map Iterator]':
      return 'mapiterator'
    case '[object Set Iterator]':
      return 'setiterator'
    case '[object String Iterator]':
      return 'stringiterator'
    case '[object Array Iterator]':
      return 'arrayiterator'
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '')
}

function ctorName$1(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null
}

function isArray$1(val) {
  if (Array.isArray) return Array.isArray(val)
  return val instanceof Array
}

function isError$1(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  )
}

function isDate$1(val) {
  if (val instanceof Date) return true
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  )
}

function isRegexp$1(val) {
  if (val instanceof RegExp) return true
  return (
    typeof val.flags === 'string' &&
    typeof val.ignoreCase === 'boolean' &&
    typeof val.multiline === 'boolean' &&
    typeof val.global === 'boolean'
  )
}

function isGeneratorFn$1(name, val) {
  return ctorName$1(name) === 'GeneratorFunction'
}

function isGeneratorObj$1(val) {
  return (
    typeof val.throw === 'function' &&
    typeof val.return === 'function' &&
    typeof val.next === 'function'
  )
}

function isArguments$1(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true
    }
  }
  return false
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer$1(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val)
  }
  return false
}

// accessor descriptor properties
var accessor = {
  get: 'function',
  set: 'function',
  configurable: 'boolean',
  enumerable: 'boolean',
}

function isAccessorDescriptor(obj, prop) {
  if (typeof prop === 'string') {
    var val = Object.getOwnPropertyDescriptor(obj, prop)
    return typeof val !== 'undefined'
  }

  if (
    D__git_packageInherit_node_modules_isAccessorDescriptor_node_modules_kindOf(
      obj,
    ) !== 'object'
  ) {
    return false
  }

  if (has(obj, 'value') || has(obj, 'writable')) {
    return false
  }

  if (!has(obj, 'get') || typeof obj.get !== 'function') {
    return false
  }

  // tldr: it's valid to have "set" be undefined
  // "set" might be undefined if `Object.getOwnPropertyDescriptor`
  // was used to get the value, and only `get` was defined by the user
  if (
    has(obj, 'set') &&
    typeof obj[key] !== 'function' &&
    typeof obj[key] !== 'undefined'
  ) {
    return false
  }

  for (var key in obj) {
    if (!accessor.hasOwnProperty(key)) {
      continue
    }

    if (
      D__git_packageInherit_node_modules_isAccessorDescriptor_node_modules_kindOf(
        obj[key],
      ) === accessor[key]
    ) {
      continue
    }

    if (typeof obj[key] !== 'undefined') {
      return false
    }
  }
  return true
}

function has(obj, key) {
  return {}.hasOwnProperty.call(obj, key)
}

/**
 * Expose `isAccessorDescriptor`
 */

var D__git_packageInherit_node_modules_isAccessorDescriptor = isAccessorDescriptor

var toString$2 = Object.prototype.toString

var D__git_packageInherit_node_modules_isDataDescriptor_node_modules_kindOf = function kindOf(
  val,
) {
  if (val === void 0) return 'undefined'
  if (val === null) return 'null'

  var type = typeof val
  if (type === 'boolean') return 'boolean'
  if (type === 'string') return 'string'
  if (type === 'number') return 'number'
  if (type === 'symbol') return 'symbol'
  if (type === 'function') {
    return isGeneratorFn$2(val) ? 'generatorfunction' : 'function'
  }

  if (isArray$2(val)) return 'array'
  if (isBuffer$2(val)) return 'buffer'
  if (isArguments$2(val)) return 'arguments'
  if (isDate$2(val)) return 'date'
  if (isError$2(val)) return 'error'
  if (isRegexp$2(val)) return 'regexp'

  switch (ctorName$2(val)) {
    case 'Symbol':
      return 'symbol'
    case 'Promise':
      return 'promise'

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap':
      return 'weakmap'
    case 'WeakSet':
      return 'weakset'
    case 'Map':
      return 'map'
    case 'Set':
      return 'set'

    // 8-bit typed arrays
    case 'Int8Array':
      return 'int8array'
    case 'Uint8Array':
      return 'uint8array'
    case 'Uint8ClampedArray':
      return 'uint8clampedarray'

    // 16-bit typed arrays
    case 'Int16Array':
      return 'int16array'
    case 'Uint16Array':
      return 'uint16array'

    // 32-bit typed arrays
    case 'Int32Array':
      return 'int32array'
    case 'Uint32Array':
      return 'uint32array'
    case 'Float32Array':
      return 'float32array'
    case 'Float64Array':
      return 'float64array'
  }

  if (isGeneratorObj$2(val)) {
    return 'generator'
  }

  // Non-plain objects
  type = toString$2.call(val)
  switch (type) {
    case '[object Object]':
      return 'object'
    // iterators
    case '[object Map Iterator]':
      return 'mapiterator'
    case '[object Set Iterator]':
      return 'setiterator'
    case '[object String Iterator]':
      return 'stringiterator'
    case '[object Array Iterator]':
      return 'arrayiterator'
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '')
}

function ctorName$2(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null
}

function isArray$2(val) {
  if (Array.isArray) return Array.isArray(val)
  return val instanceof Array
}

function isError$2(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  )
}

function isDate$2(val) {
  if (val instanceof Date) return true
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  )
}

function isRegexp$2(val) {
  if (val instanceof RegExp) return true
  return (
    typeof val.flags === 'string' &&
    typeof val.ignoreCase === 'boolean' &&
    typeof val.multiline === 'boolean' &&
    typeof val.global === 'boolean'
  )
}

function isGeneratorFn$2(name, val) {
  return ctorName$2(name) === 'GeneratorFunction'
}

function isGeneratorObj$2(val) {
  return (
    typeof val.throw === 'function' &&
    typeof val.return === 'function' &&
    typeof val.next === 'function'
  )
}

function isArguments$2(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true
    }
  }
  return false
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer$2(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val)
  }
  return false
}

var D__git_packageInherit_node_modules_isDataDescriptor = function isDataDescriptor(
  obj,
  prop,
) {
  // data descriptor properties
  var data = {
    configurable: 'boolean',
    enumerable: 'boolean',
    writable: 'boolean',
  }

  if (
    D__git_packageInherit_node_modules_isDataDescriptor_node_modules_kindOf(
      obj,
    ) !== 'object'
  ) {
    return false
  }

  if (typeof prop === 'string') {
    var val = Object.getOwnPropertyDescriptor(obj, prop)
    return typeof val !== 'undefined'
  }

  if (!('value' in obj) && !('writable' in obj)) {
    return false
  }

  for (var key in obj) {
    if (key === 'value') continue

    if (!data.hasOwnProperty(key)) {
      continue
    }

    if (
      D__git_packageInherit_node_modules_isDataDescriptor_node_modules_kindOf(
        obj[key],
      ) === data[key]
    ) {
      continue
    }

    if (typeof obj[key] !== 'undefined') {
      return false
    }
  }
  return true
}

var D__git_packageInherit_node_modules_isDescriptor = function isDescriptor(
  obj,
  key,
) {
  if (
    D__git_packageInherit_node_modules_isDescriptor_node_modules_kindOf(obj) !==
    'object'
  ) {
    return false
  }
  if ('get' in obj) {
    return D__git_packageInherit_node_modules_isAccessorDescriptor(obj, key)
  }
  return D__git_packageInherit_node_modules_isDataDescriptor(obj, key)
}

var define$1 =
  typeof Reflect !== 'undefined' && Reflect.defineProperty
    ? Reflect.defineProperty
    : Object.defineProperty

var D__git_packageInherit_node_modules_toRegex_node_modules_defineProperty = function defineProperty(
  obj,
  key,
  val,
) {
  if (!isobject(obj) && typeof obj !== 'function' && !Array.isArray(obj)) {
    throw new TypeError('expected an object, function, or array')
  }

  if (typeof key !== 'string') {
    throw new TypeError('expected "key" to be a string')
  }

  if (D__git_packageInherit_node_modules_isDescriptor(val)) {
    define$1(obj, key, val)
    return obj
  }

  define$1(obj, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })

  return obj
}

function isObjectObject(o) {
  return (
    isobject(o) === true &&
    Object.prototype.toString.call(o) === '[object Object]'
  )
}

var isPlainObject = function isPlainObject(o) {
  var ctor, prot

  if (isObjectObject(o) === false) return false

  // If has modified constructor
  ctor = o.constructor
  if (typeof ctor !== 'function') return false

  // If has modified prototype
  prot = ctor.prototype
  if (isObjectObject(prot) === false) return false

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false
  }

  // Most likely a plain Object
  return true
}

var isExtendable = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

/*!
 * assign-symbols <https://github.com/jonschlinkert/assign-symbols>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var D__git_packageInherit_node_modules_assignSymbols = function (
  receiver,
  objects,
) {
  if (receiver === null || typeof receiver === 'undefined') {
    throw new TypeError('expected first argument to be an object.')
  }

  if (typeof objects === 'undefined' || typeof Symbol === 'undefined') {
    return receiver
  }

  if (typeof Object.getOwnPropertySymbols !== 'function') {
    return receiver
  }

  var isEnumerable = Object.prototype.propertyIsEnumerable
  var target = Object(receiver)
  var len = arguments.length,
    i = 0

  while (++i < len) {
    var provider = Object(arguments[i])
    var names = Object.getOwnPropertySymbols(provider)

    for (var j = 0; j < names.length; j++) {
      var key = names[j]

      if (isEnumerable.call(provider, key)) {
        target[key] = provider[key]
      }
    }
  }
  return target
}

var D__git_packageInherit_node_modules_toRegex_node_modules_extendShallow =
  Object.assign ||
  function (obj /*, objects*/) {
    if (obj === null || typeof obj === 'undefined') {
      throw new TypeError('Cannot convert undefined or null to object')
    }
    if (!isObject$3(obj)) {
      obj = {}
    }
    for (var i = 1; i < arguments.length; i++) {
      var val = arguments[i]
      if (isString$1(val)) {
        val = toObject(val)
      }
      if (isObject$3(val)) {
        assign$1(obj, val)
        D__git_packageInherit_node_modules_assignSymbols(obj, val)
      }
    }
    return obj
  }

function assign$1(a, b) {
  for (var key in b) {
    if (hasOwn(b, key)) {
      a[key] = b[key]
    }
  }
}

function isString$1(val) {
  return val && typeof val === 'string'
}

function toObject(str) {
  var obj = {}
  for (var i in str) {
    obj[i] = str[i]
  }
  return obj
}

function isObject$3(val) {
  return (val && typeof val === 'object') || isExtendable(val)
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

var isExtendable$1 = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

var D__git_packageInherit_node_modules_regexNot_node_modules_extendShallow =
  Object.assign ||
  function (obj /*, objects*/) {
    if (obj === null || typeof obj === 'undefined') {
      throw new TypeError('Cannot convert undefined or null to object')
    }
    if (!isObject$4(obj)) {
      obj = {}
    }
    for (var i = 1; i < arguments.length; i++) {
      var val = arguments[i]
      if (isString$2(val)) {
        val = toObject$1(val)
      }
      if (isObject$4(val)) {
        assign$2(obj, val)
        D__git_packageInherit_node_modules_assignSymbols(obj, val)
      }
    }
    return obj
  }

function assign$2(a, b) {
  for (var key in b) {
    if (hasOwn$1(b, key)) {
      a[key] = b[key]
    }
  }
}

function isString$2(val) {
  return val && typeof val === 'string'
}

function toObject$1(str) {
  var obj = {}
  for (var i in str) {
    obj[i] = str[i]
  }
  return obj
}

function isObject$4(val) {
  return (val && typeof val === 'object') || isExtendable$1(val)
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn$1(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

/**
 * The main export is a function that takes a `pattern` string and an `options` object.
 *
 * ```js
 & var not = require('regex-not');
 & console.log(not('foo'));
 & //=> /^(?:(?!^(?:foo)$).)*$/
 * ```
 *
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {RegExp} Converts the given `pattern` to a regex using the specified `options`.
 * @api public
 */

function toRegex$1(pattern, options) {
  return new RegExp(toRegex$1.create(pattern, options))
}

/**
 * Create a regex-compatible string from the given `pattern` and `options`.
 *
 * ```js
 & var not = require('regex-not');
 & console.log(not.create('foo'));
 & //=> '^(?:(?!^(?:foo)$).)*$'
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

toRegex$1.create = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  var opts = D__git_packageInherit_node_modules_regexNot_node_modules_extendShallow(
    {},
    options,
  )
  if (opts.contains === true) {
    opts.strictNegate = false
  }

  var open = opts.strictOpen !== false ? '^' : ''
  var close = opts.strictClose !== false ? '$' : ''
  var endChar = opts.endChar ? opts.endChar : '+'
  var str = pattern

  if (opts.strictNegate === false) {
    str = '(?:(?!(?:' + pattern + ')).)' + endChar
  } else {
    str = '(?:(?!^(?:' + pattern + ')$).)' + endChar
  }

  var res = open + str + close
  if (
    opts.safe === true &&
    D__git_packageInherit_node_modules_safeRegex(res) === false
  ) {
    throw new Error('potentially unsafe regular expression: ' + res)
  }

  return res
}

/**
 * Expose `toRegex`
 */

var D__git_packageInherit_node_modules_regexNot = toRegex$1

var MAX_LENGTH$2 = 1024 * 64

/**
 * Session cache
 */

var cache = {}

/**
 * Create a regular expression from the given `pattern` string.
 *
 * @param {String|RegExp} `pattern` Pattern can be a string or regular expression.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

var D__git_packageInherit_node_modules_toRegex = function (patterns, options) {
  if (!Array.isArray(patterns)) {
    return makeRe(patterns, options)
  }
  return makeRe(patterns.join('|'), options)
}

/**
 * Create a regular expression from the given `pattern` string.
 *
 * @param {String|RegExp} `pattern` Pattern can be a string or regular expression.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

function makeRe(pattern, options) {
  if (pattern instanceof RegExp) {
    return pattern
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  if (pattern.length > MAX_LENGTH$2) {
    throw new Error(
      'expected pattern to be less than ' + MAX_LENGTH$2 + ' characters',
    )
  }

  var key = pattern
  // do this before shallow cloning options, it's a lot faster
  if (!options || (options && options.cache !== false)) {
    key = createKey(pattern, options)

    if (cache.hasOwnProperty(key)) {
      return cache[key]
    }
  }

  var opts = D__git_packageInherit_node_modules_toRegex_node_modules_extendShallow(
    {},
    options,
  )
  if (opts.contains === true) {
    if (opts.negate === true) {
      opts.strictNegate = false
    } else {
      opts.strict = false
    }
  }

  if (opts.strict === false) {
    opts.strictOpen = false
    opts.strictClose = false
  }

  var open = opts.strictOpen !== false ? '^' : ''
  var close = opts.strictClose !== false ? '$' : ''
  var flags = opts.flags || ''
  var regex

  if (opts.nocase === true && !/i/.test(flags)) {
    flags += 'i'
  }

  try {
    if (opts.negate || typeof opts.strictNegate === 'boolean') {
      pattern = D__git_packageInherit_node_modules_regexNot.create(
        pattern,
        opts,
      )
    }

    var str = open + '(?:' + pattern + ')' + close
    regex = new RegExp(str, flags)

    if (
      opts.safe === true &&
      D__git_packageInherit_node_modules_safeRegex(regex) === false
    ) {
      throw new Error('potentially unsafe regular expression: ' + regex.source)
    }
  } catch (err) {
    if (opts.strictErrors === true || opts.safe === true) {
      err.key = key
      err.pattern = pattern
      err.originalOptions = options
      err.createdOptions = opts
      throw err
    }

    try {
      regex = new RegExp('^' + pattern.replace(/(\W)/g, '\\$1') + '$')
    } catch (err) {
      regex = /.^/ //<= match nothing
    }
  }

  if (opts.cache !== false) {
    memoize(regex, key, pattern, opts)
  }
  return regex
}

/**
 * Memoize generated regex. This can result in dramatic speed improvements
 * and simplify debugging by adding options and pattern to the regex. It can be
 * disabled by passing setting `options.cache` to false.
 */

function memoize(regex, key, pattern, options) {
  D__git_packageInherit_node_modules_toRegex_node_modules_defineProperty(
    regex,
    'cached',
    true,
  )
  D__git_packageInherit_node_modules_toRegex_node_modules_defineProperty(
    regex,
    'pattern',
    pattern,
  )
  D__git_packageInherit_node_modules_toRegex_node_modules_defineProperty(
    regex,
    'options',
    options,
  )
  D__git_packageInherit_node_modules_toRegex_node_modules_defineProperty(
    regex,
    'key',
    key,
  )
  cache[key] = regex
}

/**
 * Create the key to use for memoization. The key is generated
 * by iterating over the options and concatenating key-value pairs
 * to the pattern string.
 */

function createKey(pattern, options) {
  if (!options) return pattern
  var key = pattern
  for (var prop in options) {
    if (options.hasOwnProperty(prop)) {
      key += ';' + prop + '=' + String(options[prop])
    }
  }
  return key
}

/**
 * Expose `makeRe`
 */

var makeRe_1 = makeRe
D__git_packageInherit_node_modules_toRegex.makeRe = makeRe_1

var D__git_packageInherit_node_modules_arrayUnique = createCommonjsModule(
  function (module) {
    module.exports = function unique(arr) {
      if (!Array.isArray(arr)) {
        throw new TypeError('array-unique expects an array.')
      }

      var len = arr.length
      var i = -1

      while (i++ < len) {
        var j = i + 1

        for (; j < arr.length; ++j) {
          if (arr[i] === arr[j]) {
            arr.splice(j--, 1)
          }
        }
      }
      return arr
    }

    module.exports.immutable = function uniqueImmutable(arr) {
      if (!Array.isArray(arr)) {
        throw new TypeError('array-unique expects an array.')
      }

      var arrLen = arr.length
      var newArr = new Array(arrLen)

      for (var i = 0; i < arrLen; i++) {
        newArr[i] = arr[i]
      }

      return module.exports(newArr)
    }
  },
)

/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var D__git_packageInherit_node_modules_isExtendable = function isExtendable(
  val,
) {
  return (
    typeof val !== 'undefined' &&
    val !== null &&
    (typeof val === 'object' || typeof val === 'function')
  )
}

var D__git_packageInherit_node_modules_extendShallow = function extend(
  o /*, objects*/,
) {
  if (!D__git_packageInherit_node_modules_isExtendable(o)) {
    o = {}
  }

  var len = arguments.length
  for (var i = 1; i < len; i++) {
    var obj = arguments[i]

    if (D__git_packageInherit_node_modules_isExtendable(obj)) {
      assign$3(o, obj)
    }
  }
  return o
}

function assign$3(a, b) {
  for (var key in b) {
    if (hasOwn$2(b, key)) {
      a[key] = b[key]
    }
  }
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn$2(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

var isExtendable$2 = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

var D__git_packageInherit_node_modules_splitString_node_modules_extendShallow =
  Object.assign ||
  function (obj /*, objects*/) {
    if (obj === null || typeof obj === 'undefined') {
      throw new TypeError('Cannot convert undefined or null to object')
    }
    if (!isObject$5(obj)) {
      obj = {}
    }
    for (var i = 1; i < arguments.length; i++) {
      var val = arguments[i]
      if (isString$3(val)) {
        val = toObject$2(val)
      }
      if (isObject$5(val)) {
        assign$4(obj, val)
        D__git_packageInherit_node_modules_assignSymbols(obj, val)
      }
    }
    return obj
  }

function assign$4(a, b) {
  for (var key in b) {
    if (hasOwn$3(b, key)) {
      a[key] = b[key]
    }
  }
}

function isString$3(val) {
  return val && typeof val === 'string'
}

function toObject$2(str) {
  var obj = {}
  for (var i in str) {
    obj[i] = str[i]
  }
  return obj
}

function isObject$5(val) {
  return (val && typeof val === 'object') || isExtendable$2(val)
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn$3(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

var D__git_packageInherit_node_modules_splitString = function (
  str,
  options,
  fn,
) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string')
  }

  if (typeof options === 'function') {
    fn = options
    options = null
  }

  // allow separator to be defined as a string
  if (typeof options === 'string') {
    options = { sep: options }
  }

  var opts = D__git_packageInherit_node_modules_splitString_node_modules_extendShallow(
    { sep: '.' },
    options,
  )
  var quotes = opts.quotes || ['"', "'", '`']
  var brackets

  if (opts.brackets === true) {
    brackets = {
      '<': '>',
      '(': ')',
      '[': ']',
      '{': '}',
    }
  } else if (opts.brackets) {
    brackets = opts.brackets
  }

  var tokens = []
  var stack = []
  var arr = ['']
  var sep = opts.sep
  var len = str.length
  var idx = -1
  var closeIdx

  function expected() {
    if (brackets && stack.length) {
      return brackets[stack[stack.length - 1]]
    }
  }

  while (++idx < len) {
    var ch = str[idx]
    var next = str[idx + 1]
    var tok = { val: ch, idx: idx, arr: arr, str: str }
    tokens.push(tok)

    if (ch === '\\') {
      tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next
      tok.escaped = true
      if (typeof fn === 'function') {
        fn(tok)
      }
      arr[arr.length - 1] += tok.val
      idx++
      continue
    }

    if (brackets && brackets[ch]) {
      stack.push(ch)
      var e = expected()
      var i = idx + 1

      if (str.indexOf(e, i + 1) !== -1) {
        while (stack.length && i < len) {
          var s = str[++i]
          if (s === '\\') {
            s++
            continue
          }

          if (quotes.indexOf(s) !== -1) {
            i = getClosingQuote(str, s, i + 1)
            continue
          }

          e = expected()
          if (stack.length && str.indexOf(e, i + 1) === -1) {
            break
          }

          if (brackets[s]) {
            stack.push(s)
            continue
          }

          if (e === s) {
            stack.pop()
          }
        }
      }

      closeIdx = i
      if (closeIdx === -1) {
        arr[arr.length - 1] += ch
        continue
      }

      ch = str.slice(idx, closeIdx + 1)
      tok.val = ch
      tok.idx = idx = closeIdx
    }

    if (quotes.indexOf(ch) !== -1) {
      closeIdx = getClosingQuote(str, ch, idx + 1)
      if (closeIdx === -1) {
        arr[arr.length - 1] += ch
        continue
      }

      if (keepQuotes(ch, opts) === true) {
        ch = str.slice(idx, closeIdx + 1)
      } else {
        ch = str.slice(idx + 1, closeIdx)
      }

      tok.val = ch
      tok.idx = idx = closeIdx
    }

    if (typeof fn === 'function') {
      fn(tok, tokens)
      ch = tok.val
      idx = tok.idx
    }

    if (tok.val === sep && tok.split !== false) {
      arr.push('')
      continue
    }

    arr[arr.length - 1] += tok.val
  }

  return arr
}

function getClosingQuote(str, ch, i, brackets) {
  var idx = str.indexOf(ch, i)
  if (str.charAt(idx - 1) === '\\') {
    return getClosingQuote(str, ch, idx + 1)
  }
  return idx
}

function keepQuotes(ch, opts) {
  if (opts.keepDoubleQuotes === true && ch === '"') return true
  if (opts.keepSingleQuotes === true && ch === "'") return true
  return opts.keepQuotes
}

function keepEscaping(opts, str, idx) {
  if (typeof opts.keepEscaping === 'function') {
    return opts.keepEscaping(str, idx)
  }
  return opts.keepEscaping === true || str[idx + 1] === '\\'
}

/*!
 * arr-flatten <https://github.com/jonschlinkert/arr-flatten>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var D__git_packageInherit_node_modules_arrFlatten = function (arr) {
  return flat(arr, [])
}

function flat(arr, res) {
  var i = 0,
    cur
  var len = arr.length
  for (; i < len; i++) {
    cur = arr[i]
    Array.isArray(cur) ? flat(cur, res) : res.push(cur)
  }
  return res
}

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var D__git_packageInherit_node_modules_isBuffer = function (obj) {
  return (
    obj != null && (isBuffer$3(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
  )
}

function isBuffer$3(obj) {
  return (
    !!obj.constructor &&
    typeof obj.constructor.isBuffer === 'function' &&
    obj.constructor.isBuffer(obj)
  )
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return (
    typeof obj.readFloatLE === 'function' &&
    typeof obj.slice === 'function' &&
    isBuffer$3(obj.slice(0, 0))
  )
}

var toString$3 = Object.prototype.toString

/**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */

var D__git_packageInherit_node_modules_kindOf = function kindOf(val) {
  // primitivies
  if (typeof val === 'undefined') {
    return 'undefined'
  }
  if (val === null) {
    return 'null'
  }
  if (val === true || val === false || val instanceof Boolean) {
    return 'boolean'
  }
  if (typeof val === 'string' || val instanceof String) {
    return 'string'
  }
  if (typeof val === 'number' || val instanceof Number) {
    return 'number'
  }

  // functions
  if (typeof val === 'function' || val instanceof Function) {
    return 'function'
  }

  // array
  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
    return 'array'
  }

  // check for instances of RegExp and Date before calling `toString`
  if (val instanceof RegExp) {
    return 'regexp'
  }
  if (val instanceof Date) {
    return 'date'
  }

  // other objects
  var type = toString$3.call(val)

  if (type === '[object RegExp]') {
    return 'regexp'
  }
  if (type === '[object Date]') {
    return 'date'
  }
  if (type === '[object Arguments]') {
    return 'arguments'
  }
  if (type === '[object Error]') {
    return 'error'
  }

  // buffer
  if (D__git_packageInherit_node_modules_isBuffer(val)) {
    return 'buffer'
  }

  // es6: Map, WeakMap, Set, WeakSet
  if (type === '[object Set]') {
    return 'set'
  }
  if (type === '[object WeakSet]') {
    return 'weakset'
  }
  if (type === '[object Map]') {
    return 'map'
  }
  if (type === '[object WeakMap]') {
    return 'weakmap'
  }
  if (type === '[object Symbol]') {
    return 'symbol'
  }

  // typed arrays
  if (type === '[object Int8Array]') {
    return 'int8array'
  }
  if (type === '[object Uint8Array]') {
    return 'uint8array'
  }
  if (type === '[object Uint8ClampedArray]') {
    return 'uint8clampedarray'
  }
  if (type === '[object Int16Array]') {
    return 'int16array'
  }
  if (type === '[object Uint16Array]') {
    return 'uint16array'
  }
  if (type === '[object Int32Array]') {
    return 'int32array'
  }
  if (type === '[object Uint32Array]') {
    return 'uint32array'
  }
  if (type === '[object Float32Array]') {
    return 'float32array'
  }
  if (type === '[object Float64Array]') {
    return 'float64array'
  }

  // must be a plain object
  return 'object'
}

var D__git_packageInherit_node_modules_isNumber = function isNumber(num) {
  var type = D__git_packageInherit_node_modules_kindOf(num)

  if (type === 'string') {
    if (!num.trim()) return false
  } else if (type !== 'number') {
    return false
  }

  return num - num + 1 >= 0
}

/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/**
 * Results cache
 */

var res = ''
var cache$1

/**
 * Expose `repeat`
 */

var D__git_packageInherit_node_modules_repeatString = repeat$1

/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat$1(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string')
  }

  // cover common, quick use cases
  if (num === 1) return str
  if (num === 2) return str + str

  var max = str.length * num
  if (cache$1 !== str || typeof cache$1 === 'undefined') {
    cache$1 = str
    res = ''
  } else if (res.length >= max) {
    return res.substr(0, max)
  }

  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str
    }

    num >>= 1
    str += str
  }

  res += str
  res = res.substr(0, max)
  return res
}

var cache$2 = {}

function toRegexRange$1(min, max, options) {
  if (D__git_packageInherit_node_modules_isNumber(min) === false) {
    throw new RangeError('toRegexRange: first argument is invalid.')
  }

  if (typeof max === 'undefined' || min === max) {
    return String(min)
  }

  if (D__git_packageInherit_node_modules_isNumber(max) === false) {
    throw new RangeError('toRegexRange: second argument is invalid.')
  }

  options = options || {}
  var relax = String(options.relaxZeros)
  var shorthand = String(options.shorthand)
  var capture = String(options.capture)
  var key = min + ':' + max + '=' + relax + shorthand + capture
  if (cache$2.hasOwnProperty(key)) {
    return cache$2[key].result
  }

  var a = Math.min(min, max)
  var b = Math.max(min, max)

  if (Math.abs(a - b) === 1) {
    var result = min + '|' + max
    if (options.capture) {
      return '(' + result + ')'
    }
    return result
  }

  var isPadded = padding(min) || padding(max)
  var positives = []
  var negatives = []

  var tok = { min: min, max: max, a: a, b: b }
  if (isPadded) {
    tok.isPadded = isPadded
    tok.maxLen = String(tok.max).length
  }

  if (a < 0) {
    var newMin = b < 0 ? Math.abs(b) : 1
    var newMax = Math.abs(a)
    negatives = splitToPatterns$1(newMin, newMax, tok, options)
    a = tok.a = 0
  }

  if (b >= 0) {
    positives = splitToPatterns$1(a, b, tok, options)
  }

  tok.negatives = negatives
  tok.positives = positives
  tok.result = siftPatterns(negatives, positives, options)

  if (options.capture && positives.length + negatives.length > 1) {
    tok.result = '(' + tok.result + ')'
  }

  cache$2[key] = tok
  return tok.result
}

function siftPatterns(neg, pos, options) {
  var onlyNegative = filterPatterns$1(neg, pos, '-', false, options) || []
  var onlyPositive = filterPatterns$1(pos, neg, '', false, options) || []
  var intersected = filterPatterns$1(neg, pos, '-?', true, options) || []
  var subpatterns = onlyNegative.concat(intersected).concat(onlyPositive)
  return subpatterns.join('|')
}

function splitToRanges$1(min, max) {
  min = Number(min)
  max = Number(max)

  var nines = 1
  var stops = [max]
  var stop = +countNines$1(min, nines)

  while (min <= stop && stop <= max) {
    stops = push(stops, stop)
    nines += 1
    stop = +countNines$1(min, nines)
  }

  var zeros = 1
  stop = countZeros$1(max + 1, zeros) - 1

  while (min < stop && stop <= max) {
    stops = push(stops, stop)
    zeros += 1
    stop = countZeros$1(max + 1, zeros) - 1
  }

  stops.sort(compare$1)
  return stops
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern$1(start, stop, options) {
  if (start === stop) {
    return { pattern: String(start), digits: [] }
  }

  var zipped = zip$1(String(start), String(stop))
  var len = zipped.length,
    i = -1

  var pattern = ''
  var digits = 0

  while (++i < len) {
    var numbers = zipped[i]
    var startDigit = numbers[0]
    var stopDigit = numbers[1]

    if (startDigit === stopDigit) {
      pattern += startDigit
    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass$1(startDigit, stopDigit)
    } else {
      digits += 1
    }
  }

  if (digits) {
    pattern += options.shorthand ? '\\d' : '[0-9]'
  }

  return { pattern: pattern, digits: [digits] }
}

function splitToPatterns$1(min, max, tok, options) {
  var ranges = splitToRanges$1(min, max)
  var len = ranges.length
  var idx = -1

  var tokens = []
  var start = min
  var prev

  while (++idx < len) {
    var range = ranges[idx]
    var obj = rangeToPattern$1(start, range, options)
    var zeros = ''

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.digits.length > 1) {
        prev.digits.pop()
      }
      prev.digits.push(obj.digits[0])
      prev.string = prev.pattern + toQuantifier$1(prev.digits)
      start = range + 1
      continue
    }

    if (tok.isPadded) {
      zeros = padZeros$1(range, tok)
    }

    obj.string = zeros + obj.pattern + toQuantifier$1(obj.digits)
    tokens.push(obj)
    start = range + 1
    prev = obj
  }

  return tokens
}

function filterPatterns$1(arr, comparison, prefix, intersection, options) {
  var res = []

  for (var i = 0; i < arr.length; i++) {
    var tok = arr[i]
    var ele = tok.string

    if (options.relaxZeros !== false) {
      if (prefix === '-' && ele.charAt(0) === '0') {
        if (ele.charAt(1) === '{') {
          ele = '0*' + ele.replace(/^0\{\d+\}/, '')
        } else {
          ele = '0*' + ele.slice(1)
        }
      }
    }

    if (!intersection && !contains$1(comparison, 'string', ele)) {
      res.push(prefix + ele)
    }

    if (intersection && contains$1(comparison, 'string', ele)) {
      res.push(prefix + ele)
    }
  }
  return res
}

/**
 * Zip strings (`for in` can be used on string characters)
 */

function zip$1(a, b) {
  var arr = []
  for (var ch in a) arr.push([a[ch], b[ch]])
  return arr
}

function compare$1(a, b) {
  return a > b ? 1 : b > a ? -1 : 0
}

function push(arr, ele) {
  if (arr.indexOf(ele) === -1) arr.push(ele)
  return arr
}

function contains$1(arr, key, val) {
  for (var i = 0; i < arr.length; i++) {
    if (arr[i][key] === val) {
      return true
    }
  }
  return false
}

function countNines$1(min, len) {
  return (
    String(min).slice(0, -len) +
    D__git_packageInherit_node_modules_repeatString('9', len)
  )
}

function countZeros$1(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros))
}

function toQuantifier$1(digits) {
  var start = digits[0]
  var stop = digits[1] ? ',' + digits[1] : ''
  if (!stop && (!start || start === 1)) {
    return ''
  }
  return '{' + start + stop + '}'
}

function toCharacterClass$1(a, b) {
  return '[' + a + (b - a === 1 ? '' : '-') + b + ']'
}

function padding(str) {
  return /^-?(0+)\d/.exec(str)
}

function padZeros$1(val, tok) {
  if (tok.isPadded) {
    var diff = Math.abs(tok.maxLen - String(val).length)
    switch (diff) {
      case 0:
        return ''
      case 1:
        return '0'
      default: {
        return '0{' + diff + '}'
      }
    }
  }
  return val
}

/**
 * Expose `toRegexRange`
 */

var D__git_packageInherit_node_modules_toRegexRange = toRegexRange$1

/**
 * Return a range of numbers or letters.
 *
 * @param  {String} `start` Start of the range
 * @param  {String} `stop` End of the range
 * @param  {String} `step` Increment or decrement to use.
 * @param  {Function} `fn` Custom function to modify each element in the range.
 * @return {Array}
 */

function fillRange(start, stop, step, options) {
  if (typeof start === 'undefined') {
    return []
  }

  if (typeof stop === 'undefined' || start === stop) {
    // special case, for handling negative zero
    var isString = typeof start === 'string'
    if (
      D__git_packageInherit_node_modules_isNumber(start) &&
      !toNumber(start)
    ) {
      return [isString ? '0' : 0]
    }
    return [start]
  }

  if (typeof step !== 'number' && typeof step !== 'string') {
    options = step
    step = undefined
  }

  if (typeof options === 'function') {
    options = { transform: options }
  }

  var opts = D__git_packageInherit_node_modules_extendShallow(
    { step: step },
    options,
  )
  if (opts.step && !isValidNumber(opts.step)) {
    if (opts.strictRanges === true) {
      throw new TypeError('expected options.step to be a number')
    }
    return []
  }

  opts.isNumber = isValidNumber(start) && isValidNumber(stop)
  if (!opts.isNumber && !isValid(start, stop)) {
    if (opts.strictRanges === true) {
      throw new RangeError(
        'invalid range arguments: ' +
          util__default['default'].inspect([start, stop]),
      )
    }
    return []
  }

  opts.isPadded = isPadded(start) || isPadded(stop)
  opts.toString =
    opts.stringify ||
    typeof opts.step === 'string' ||
    typeof start === 'string' ||
    typeof stop === 'string' ||
    !opts.isNumber

  if (opts.isPadded) {
    opts.maxLength = Math.max(String(start).length, String(stop).length)
  }

  // support legacy minimatch/fill-range options
  if (typeof opts.optimize === 'boolean') opts.toRegex = opts.optimize
  if (typeof opts.makeRe === 'boolean') opts.toRegex = opts.makeRe
  return expand$1(start, stop, opts)
}

function expand$1(start, stop, options) {
  var a = options.isNumber ? toNumber(start) : start.charCodeAt(0)
  var b = options.isNumber ? toNumber(stop) : stop.charCodeAt(0)

  var step = Math.abs(toNumber(options.step)) || 1
  if (options.toRegex && step === 1) {
    return toRange$1(a, b, start, stop, options)
  }

  var zero = { greater: [], lesser: [] }
  var asc = a < b
  var arr = new Array(Math.round((asc ? b - a : a - b) / step))
  var idx = 0

  while (asc ? a <= b : a >= b) {
    var val = options.isNumber ? a : String.fromCharCode(a)
    if (options.toRegex && (val >= 0 || !options.isNumber)) {
      zero.greater.push(val)
    } else {
      zero.lesser.push(Math.abs(val))
    }

    if (options.isPadded) {
      val = zeros$1(val, options)
    }

    if (options.toString) {
      val = String(val)
    }

    if (typeof options.transform === 'function') {
      arr[idx++] = options.transform(val, a, b, step, idx, arr, options)
    } else {
      arr[idx++] = val
    }

    if (asc) {
      a += step
    } else {
      a -= step
    }
  }

  if (options.toRegex === true) {
    return toSequence$1(arr, zero, options)
  }
  return arr
}

function toRange$1(a, b, start, stop, options) {
  if (options.isPadded) {
    return D__git_packageInherit_node_modules_toRegexRange(start, stop, options)
  }

  if (options.isNumber) {
    return D__git_packageInherit_node_modules_toRegexRange(
      Math.min(a, b),
      Math.max(a, b),
      options,
    )
  }

  var start = String.fromCharCode(Math.min(a, b))
  var stop = String.fromCharCode(Math.max(a, b))
  return '[' + start + '-' + stop + ']'
}

function toSequence$1(arr, zeros, options) {
  var greater = '',
    lesser = ''
  if (zeros.greater.length) {
    greater = zeros.greater.join('|')
  }
  if (zeros.lesser.length) {
    lesser = '-(' + zeros.lesser.join('|') + ')'
  }
  var res = greater && lesser ? greater + '|' + lesser : greater || lesser

  if (options.capture) {
    return '(' + res + ')'
  }
  return res
}

function zeros$1(val, options) {
  if (options.isPadded) {
    var str = String(val)
    var len = str.length
    var dash = ''
    if (str.charAt(0) === '-') {
      dash = '-'
      str = str.slice(1)
    }
    var diff = options.maxLength - len
    var pad = D__git_packageInherit_node_modules_repeatString('0', diff)
    val = dash + pad + str
  }
  if (options.stringify) {
    return String(val)
  }
  return val
}

function toNumber(val) {
  return Number(val) || 0
}

function isPadded(str) {
  return /^-?0\d/.test(str)
}

function isValid(min, max) {
  return (
    (isValidNumber(min) || isValidLetter(min)) &&
    (isValidNumber(max) || isValidLetter(max))
  )
}

function isValidLetter(ch) {
  return typeof ch === 'string' && ch.length === 1 && /^\w+$/.test(ch)
}

function isValidNumber(n) {
  return D__git_packageInherit_node_modules_isNumber(n) && !/\./.test(n)
}

/**
 * Expose `fillRange`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_fillRange = fillRange

/*!
 * repeat-element <https://github.com/jonschlinkert/repeat-element>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Licensed under the MIT license.
 */

var D__git_packageInherit_node_modules_repeatElement = function repeat(
  ele,
  num,
) {
  var arr = new Array(num)

  for (var i = 0; i < num; i++) {
    arr[i] = ele
  }

  return arr
}

var utils_1 = createCommonjsModule(function (module) {
  var utils = module.exports

  /**
   * Module dependencies
   */

  utils.extend = D__git_packageInherit_node_modules_extendShallow
  utils.flatten = D__git_packageInherit_node_modules_arrFlatten
  utils.isObject = isobject
  utils.fillRange = D__git_packageInherit_node_modules_fillRange
  utils.repeat = D__git_packageInherit_node_modules_repeatElement
  utils.unique = D__git_packageInherit_node_modules_arrayUnique

  utils.define = function (obj, key, val) {
    Object.defineProperty(obj, key, {
      writable: true,
      configurable: true,
      enumerable: false,
      value: val,
    })
  }

  /**
   * Returns true if the given string contains only empty brace sets.
   */

  utils.isEmptySets = function (str) {
    return /^(?:\{,\})+$/.test(str)
  }

  /**
   * Returns true if the given string contains only empty brace sets.
   */

  utils.isQuotedString = function (str) {
    var open = str.charAt(0)
    if (open === "'" || open === '"' || open === '`') {
      return str.slice(-1) === open
    }
    return false
  }

  /**
   * Create the key to use for memoization. The unique key is generated
   * by iterating over the options and concatenating key-value pairs
   * to the pattern string.
   */

  utils.createKey = function (pattern, options) {
    var id = pattern
    if (typeof options === 'undefined') {
      return id
    }
    var keys = Object.keys(options)
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]
      id += ';' + key + '=' + String(options[key])
    }
    return id
  }

  /**
   * Normalize options
   */

  utils.createOptions = function (options) {
    var opts = utils.extend.apply(null, arguments)
    if (typeof opts.expand === 'boolean') {
      opts.optimize = !opts.expand
    }
    if (typeof opts.optimize === 'boolean') {
      opts.expand = !opts.optimize
    }
    if (opts.optimize === true) {
      opts.makeRe = true
    }
    return opts
  }

  /**
   * Join patterns in `a` to patterns in `b`
   */

  utils.join = function (a, b, options) {
    options = options || {}
    a = utils.arrayify(a)
    b = utils.arrayify(b)

    if (!a.length) return b
    if (!b.length) return a

    var len = a.length
    var idx = -1
    var arr = []

    while (++idx < len) {
      var val = a[idx]
      if (Array.isArray(val)) {
        for (var i = 0; i < val.length; i++) {
          val[i] = utils.join(val[i], b, options)
        }
        arr.push(val)
        continue
      }

      for (var j = 0; j < b.length; j++) {
        var bval = b[j]

        if (Array.isArray(bval)) {
          arr.push(utils.join(val, bval, options))
        } else {
          arr.push(val + bval)
        }
      }
    }
    return arr
  }

  /**
   * Split the given string on `,` if not escaped.
   */

  utils.split = function (str, options) {
    var opts = utils.extend({ sep: ',' }, options)
    if (typeof opts.keepQuotes !== 'boolean') {
      opts.keepQuotes = true
    }
    if (opts.unescape === false) {
      opts.keepEscaping = true
    }
    return D__git_packageInherit_node_modules_splitString(
      str,
      opts,
      utils.escapeBrackets(opts),
    )
  }

  /**
   * Expand ranges or sets in the given `pattern`.
   *
   * @param {String} `str`
   * @param {Object} `options`
   * @return {Object}
   */

  utils.expand = function (str, options) {
    var opts = utils.extend({ rangeLimit: 10000 }, options)
    var segs = utils.split(str, opts)
    var tok = { segs: segs }

    if (utils.isQuotedString(str)) {
      return tok
    }

    if (opts.rangeLimit === true) {
      opts.rangeLimit = 10000
    }

    if (segs.length > 1) {
      if (opts.optimize === false) {
        tok.val = segs[0]
        return tok
      }

      tok.segs = utils.stringifyArray(tok.segs)
    } else if (segs.length === 1) {
      var arr = str.split('..')

      if (arr.length === 1) {
        tok.val = tok.segs[tok.segs.length - 1] || tok.val || str
        tok.segs = []
        return tok
      }

      if (arr.length === 2 && arr[0] === arr[1]) {
        tok.escaped = true
        tok.val = arr[0]
        tok.segs = []
        return tok
      }

      if (arr.length > 1) {
        if (opts.optimize !== false) {
          opts.optimize = true
          delete opts.expand
        }

        if (opts.optimize !== true) {
          var min = Math.min(arr[0], arr[1])
          var max = Math.max(arr[0], arr[1])
          var step = arr[2] || 1

          if (
            opts.rangeLimit !== false &&
            (max - min) / step >= opts.rangeLimit
          ) {
            throw new RangeError(
              'expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.',
            )
          }
        }

        arr.push(opts)
        tok.segs = utils.fillRange.apply(null, arr)

        if (!tok.segs.length) {
          tok.escaped = true
          tok.val = str
          return tok
        }

        if (opts.optimize === true) {
          tok.segs = utils.stringifyArray(tok.segs)
        }

        if (tok.segs === '') {
          tok.val = str
        } else {
          tok.val = tok.segs[0]
        }
        return tok
      }
    } else {
      tok.val = str
    }
    return tok
  }

  /**
   * Ensure commas inside brackets and parens are not split.
   * @param {Object} `tok` Token from the `split-string` module
   * @return {undefined}
   */

  utils.escapeBrackets = function (options) {
    return function (tok) {
      if (tok.escaped && tok.val === 'b') {
        tok.val = '\\b'
        return
      }

      if (tok.val !== '(' && tok.val !== '[') return
      var opts = utils.extend({}, options)
      var stack = []
      var val = tok.val
      var str = tok.str
      var i = tok.idx - 1

      while (++i < str.length) {
        var ch = str[i]

        if (ch === '\\') {
          val += (opts.keepEscaping === false ? '' : ch) + str[++i]
          continue
        }

        if (ch === '(') {
          stack.push(ch)
        }

        if (ch === '[') {
          stack.push(ch)
        }

        if (ch === ')') {
          stack.pop()
          if (!stack.length) {
            val += ch
            break
          }
        }

        if (ch === ']') {
          stack.pop()
          if (!stack.length) {
            val += ch
            break
          }
        }
        val += ch
      }

      tok.split = false
      tok.val = val.slice(1)
      tok.idx = i
    }
  }

  /**
   * Returns true if the given string looks like a regex quantifier
   * @return {Boolean}
   */

  utils.isQuantifier = function (str) {
    return /^(?:[0-9]?,[0-9]|[0-9],)$/.test(str)
  }

  /**
   * Cast `val` to an array.
   * @param {*} `val`
   */

  utils.stringifyArray = function (arr) {
    return [utils.arrayify(arr).join('|')]
  }

  /**
   * Cast `val` to an array.
   * @param {*} `val`
   */

  utils.arrayify = function (arr) {
    if (typeof arr === 'undefined') {
      return []
    }
    if (typeof arr === 'string') {
      return [arr]
    }
    return arr
  }

  /**
   * Returns true if the given `str` is a non-empty string
   * @return {Boolean}
   */

  utils.isString = function (str) {
    return str != null && typeof str === 'string'
  }

  /**
   * Get the last element from `array`
   * @param {Array} `array`
   * @return {*}
   */

  utils.last = function (arr, n) {
    return arr[arr.length - (n || 1)]
  }

  utils.escapeRegex = function (str) {
    return str.replace(/\\?([!^*?()[\]{}+?/])/g, '\\$1')
  }
})

var compilers = function (braces, options) {
  braces.compiler

    /**
     * bos
     */

    .set('bos', function () {
      if (this.output) return
      this.ast.queue = isEscaped(this.ast) ? [this.ast.val] : []
      this.ast.count = 1
    })

    /**
     * Square brackets
     */

    .set('bracket', function (node) {
      var close = node.close
      var open = !node.escaped ? '[' : '\\['
      var negated = node.negated
      var inner = node.inner

      inner = inner.replace(/\\(?=[\\\w]|$)/g, '\\\\')
      if (inner === ']-') {
        inner = '\\]\\-'
      }

      if (negated && inner.indexOf('.') === -1) {
        inner += '.'
      }
      if (negated && inner.indexOf('/') === -1) {
        inner += '/'
      }

      var val = open + negated + inner + close
      var queue = node.parent.queue
      var last = utils_1.arrayify(queue.pop())

      queue.push(utils_1.join(last, val))
      queue.push.apply(queue, [])
    })

    /**
     * Brace
     */

    .set('brace', function (node) {
      node.queue = isEscaped(node) ? [node.val] : []
      node.count = 1
      return this.mapVisit(node.nodes)
    })

    /**
     * Open
     */

    .set('brace.open', function (node) {
      node.parent.open = node.val
    })

    /**
     * Inner
     */

    .set('text', function (node) {
      var queue = node.parent.queue
      var escaped = node.escaped
      var segs = [node.val]

      if (node.optimize === false) {
        options = utils_1.extend({}, options, { optimize: false })
      }

      if (node.multiplier > 1) {
        node.parent.count *= node.multiplier
      }

      if (options.quantifiers === true && utils_1.isQuantifier(node.val)) {
        escaped = true
      } else if (node.val.length > 1) {
        if (isType$1(node.parent, 'brace') && !isEscaped(node)) {
          var expanded = utils_1.expand(node.val, options)
          segs = expanded.segs

          if (expanded.isOptimized) {
            node.parent.isOptimized = true
          }

          // if nothing was expanded, we probably have a literal brace
          if (!segs.length) {
            var val = expanded.val || node.val
            if (options.unescape !== false) {
              // unescape unexpanded brace sequence/set separators
              val = val.replace(/\\([,.])/g, '$1')
              // strip quotes
              val = val.replace(/["'`]/g, '')
            }

            segs = [val]
            escaped = true
          }
        }
      } else if (node.val === ',') {
        if (options.expand) {
          node.parent.queue.push([''])
          segs = ['']
        } else {
          segs = ['|']
        }
      } else {
        escaped = true
      }

      if (escaped && isType$1(node.parent, 'brace')) {
        if (node.parent.nodes.length <= 4 && node.parent.count === 1) {
          node.parent.escaped = true
        } else if (node.parent.length <= 3) {
          node.parent.escaped = true
        }
      }

      if (!hasQueue(node.parent)) {
        node.parent.queue = segs
        return
      }

      var last = utils_1.arrayify(queue.pop())
      if (node.parent.count > 1 && options.expand) {
        last = multiply(last, node.parent.count)
        node.parent.count = 1
      }

      queue.push(utils_1.join(utils_1.flatten(last), segs.shift()))
      queue.push.apply(queue, segs)
    })

    /**
     * Close
     */

    .set('brace.close', function (node) {
      var queue = node.parent.queue
      var prev = node.parent.parent
      var last = prev.queue.pop()
      var open = node.parent.open
      var close = node.val

      if (open && close && isOptimized(node, options)) {
        open = '('
        close = ')'
      }

      // if a close brace exists, and the previous segment is one character
      // don't wrap the result in braces or parens
      var ele = utils_1.last(queue)
      if (node.parent.count > 1 && options.expand) {
        ele = multiply(queue.pop(), node.parent.count)
        node.parent.count = 1
        queue.push(ele)
      }

      if (close && typeof ele === 'string' && ele.length === 1) {
        open = ''
        close = ''
      }

      if (
        (isLiteralBrace(node, options) || noInner(node)) &&
        !node.parent.hasEmpty
      ) {
        queue.push(utils_1.join(open, queue.pop() || ''))
        queue = utils_1.flatten(utils_1.join(queue, close))
      }

      if (typeof last === 'undefined') {
        prev.queue = [queue]
      } else {
        prev.queue.push(utils_1.flatten(utils_1.join(last, queue)))
      }
    })

    /**
     * eos
     */

    .set('eos', function (node) {
      if (this.input) return

      if (options.optimize !== false) {
        this.output = utils_1.last(utils_1.flatten(this.ast.queue))
      } else if (Array.isArray(utils_1.last(this.ast.queue))) {
        this.output = utils_1.flatten(this.ast.queue.pop())
      } else {
        this.output = utils_1.flatten(this.ast.queue)
      }

      if (node.parent.count > 1 && options.expand) {
        this.output = multiply(this.output, node.parent.count)
      }

      this.output = utils_1.arrayify(this.output)
      this.ast.queue = []
    })
}

/**
 * Multiply the segments in the current brace level
 */

function multiply(queue, n, options) {
  return utils_1.flatten(utils_1.repeat(utils_1.arrayify(queue), n))
}

/**
 * Return true if `node` is escaped
 */

function isEscaped(node) {
  return node.escaped === true
}

/**
 * Returns true if regex parens should be used for sets. If the parent `type`
 * is not `brace`, then we're on a root node, which means we should never
 * expand segments and open/close braces should be `{}` (since this indicates
 * a brace is missing from the set)
 */

function isOptimized(node, options) {
  if (node.parent.isOptimized) return true
  return (
    isType$1(node.parent, 'brace') &&
    !isEscaped(node.parent) &&
    options.expand !== true
  )
}

/**
 * Returns true if the value in `node` should be wrapped in a literal brace.
 * @return {Boolean}
 */

function isLiteralBrace(node, options) {
  return isEscaped(node.parent) || options.optimize !== false
}

/**
 * Returns true if the given `node` does not have an inner value.
 * @return {Boolean}
 */

function noInner(node, type) {
  if (node.parent.queue.length === 1) {
    return true
  }
  var nodes = node.parent.nodes
  return (
    nodes.length === 3 &&
    isType$1(nodes[0], 'brace.open') &&
    !isType$1(nodes[1], 'text') &&
    isType$1(nodes[2], 'brace.close')
  )
}

/**
 * Returns true if the given `node` is the given `type`
 * @return {Boolean}
 */

function isType$1(node, type) {
  return typeof node !== 'undefined' && node.type === type
}

/**
 * Returns true if the given `node` has a non-empty queue.
 * @return {Boolean}
 */

function hasQueue(node) {
  return Array.isArray(node.queue) && node.queue.length
}

var D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty = function defineProperty(
  obj,
  prop,
  val,
) {
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('expected an object or function.')
  }

  if (typeof prop !== 'string') {
    throw new TypeError('expected `prop` to be a string.')
  }

  if (
    D__git_packageInherit_node_modules_isDescriptor(val) &&
    ('set' in val || 'get' in val)
  ) {
    return Object.defineProperty(obj, prop, val)
  }

  return Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })
}

var D__git_packageInherit_node_modules_snapdragonUtil = createCommonjsModule(
  function (module) {
    var utils = module.exports

    /**
     * Returns true if the given value is a node.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var node = new Node({type: 'foo'});
     * console.log(utils.isNode(node)); //=> true
     * console.log(utils.isNode({})); //=> false
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @returns {Boolean}
     * @api public
     */

    utils.isNode = function (node) {
      return (
        D__git_packageInherit_node_modules_kindOf(node) === 'object' &&
        node.isNode === true
      )
    }

    /**
     * Emit an empty string for the given `node`.
     *
     * ```js
     * // do nothing for beginning-of-string
     * snapdragon.compiler.set('bos', utils.noop);
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @returns {undefined}
     * @api public
     */

    utils.noop = function (node) {
      append(this, '', node)
    }

    /**
     * Appdend `node.val` to `compiler.output`, exactly as it was created
     * by the parser.
     *
     * ```js
     * snapdragon.compiler.set('text', utils.identity);
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @returns {undefined}
     * @api public
     */

    utils.identity = function (node) {
      append(this, node.val, node)
    }

    /**
     * Previously named `.emit`, this method appends the given `val`
     * to `compiler.output` for the given node. Useful when you know
     * what value should be appended advance, regardless of the actual
     * value of `node.val`.
     *
     * ```js
     * snapdragon.compiler
     *   .set('i', function(node) {
     *     this.mapVisit(node);
     *   })
     *   .set('i.open', utils.append('<i>'))
     *   .set('i.close', utils.append('</i>'))
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @returns {Function} Returns a compiler middleware function.
     * @api public
     */

    utils.append = function (val) {
      return function (node) {
        append(this, val, node)
      }
    }

    /**
     * Used in compiler middleware, this onverts an AST node into
     * an empty `text` node and deletes `node.nodes` if it exists.
     * The advantage of this method is that, as opposed to completely
     * removing the node, indices will not need to be re-calculated
     * in sibling nodes, and nothing is appended to the output.
     *
     * ```js
     * utils.toNoop(node);
     * // convert `node.nodes` to the given value instead of deleting it
     * utils.toNoop(node, []);
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Array} `nodes` Optionally pass a new `nodes` value, to replace the existing `node.nodes` array.
     * @api public
     */

    utils.toNoop = function (node, nodes) {
      if (nodes) {
        node.nodes = nodes
      } else {
        delete node.nodes
        node.type = 'text'
        node.val = ''
      }
    }

    /**
     * Visit `node` with the given `fn`. The built-in `.visit` method in snapdragon
     * automatically calls registered compilers, this allows you to pass a visitor
     * function.
     *
     * ```js
     * snapdragon.compiler.set('i', function(node) {
     *   utils.visit(node, function(childNode) {
     *     // do stuff with "childNode"
     *     return childNode;
     *   });
     * });
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Function} `fn`
     * @return {Object} returns the node after recursively visiting all child nodes.
     * @api public
     */

    utils.visit = function (node, fn) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isFunction(fn), 'expected a visitor function')
      fn(node)
      return node.nodes ? utils.mapVisit(node, fn) : node
    }

    /**
     * Map [visit](#visit) the given `fn` over `node.nodes`. This is called by
     * [visit](#visit), use this method if you do not want `fn` to be called on
     * the first node.
     *
     * ```js
     * snapdragon.compiler.set('i', function(node) {
     *   utils.mapVisit(node, function(childNode) {
     *     // do stuff with "childNode"
     *     return childNode;
     *   });
     * });
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Object} `options`
     * @param {Function} `fn`
     * @return {Object} returns the node
     * @api public
     */

    utils.mapVisit = function (node, fn) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isArray(node.nodes), 'expected node.nodes to be an array')
      assert(isFunction(fn), 'expected a visitor function')

      for (var i = 0; i < node.nodes.length; i++) {
        utils.visit(node.nodes[i], fn)
      }
      return node
    }

    /**
     * Unshift an `*.open` node onto `node.nodes`.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * snapdragon.parser.set('brace', function(node) {
     *   var match = this.match(/^{/);
     *   if (match) {
     *     var parent = new Node({type: 'brace'});
     *     utils.addOpen(parent, Node);
     *     console.log(parent.nodes[0]):
     *     // { type: 'brace.open', val: '' };
     *
     *     // push the parent "brace" node onto the stack
     *     this.push(parent);
     *
     *     // return the parent node, so it's also added to the AST
     *     return brace;
     *   }
     * });
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].
     * @param {Function} `filter` Optionaly specify a filter function to exclude the node.
     * @return {Object} Returns the created opening node.
     * @api public
     */

    utils.addOpen = function (node, Node, val, filter) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isFunction(Node), 'expected Node to be a constructor function')

      if (typeof val === 'function') {
        filter = val
        val = ''
      }

      if (typeof filter === 'function' && !filter(node)) return
      var open = new Node({ type: node.type + '.open', val: val })
      var unshift = node.unshift || node.unshiftNode
      if (typeof unshift === 'function') {
        unshift.call(node, open)
      } else {
        utils.unshiftNode(node, open)
      }
      return open
    }

    /**
     * Push a `*.close` node onto `node.nodes`.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * snapdragon.parser.set('brace', function(node) {
     *   var match = this.match(/^}/);
     *   if (match) {
     *     var parent = this.parent();
     *     if (parent.type !== 'brace') {
     *       throw new Error('missing opening: ' + '}');
     *     }
     *
     *     utils.addClose(parent, Node);
     *     console.log(parent.nodes[parent.nodes.length - 1]):
     *     // { type: 'brace.close', val: '' };
     *
     *     // no need to return a node, since the parent
     *     // was already added to the AST
     *     return;
     *   }
     * });
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].
     * @param {Function} `filter` Optionaly specify a filter function to exclude the node.
     * @return {Object} Returns the created closing node.
     * @api public
     */

    utils.addClose = function (node, Node, val, filter) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isFunction(Node), 'expected Node to be a constructor function')

      if (typeof val === 'function') {
        filter = val
        val = ''
      }

      if (typeof filter === 'function' && !filter(node)) return
      var close = new Node({ type: node.type + '.close', val: val })
      var push = node.push || node.pushNode
      if (typeof push === 'function') {
        push.call(node, close)
      } else {
        utils.pushNode(node, close)
      }
      return close
    }

    /**
     * Wraps the given `node` with `*.open` and `*.close` nodes.
     *
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].
     * @param {Function} `filter` Optionaly specify a filter function to exclude the node.
     * @return {Object} Returns the node
     * @api public
     */

    utils.wrapNodes = function (node, Node, filter) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isFunction(Node), 'expected Node to be a constructor function')

      utils.addOpen(node, Node, filter)
      utils.addClose(node, Node, filter)
      return node
    }

    /**
     * Push the given `node` onto `parent.nodes`, and set `parent` as `node.parent.
     *
     * ```js
     * var parent = new Node({type: 'foo'});
     * var node = new Node({type: 'bar'});
     * utils.pushNode(parent, node);
     * console.log(parent.nodes[0].type) // 'bar'
     * console.log(node.parent.type) // 'foo'
     * ```
     * @param {Object} `parent`
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Object} Returns the child node
     * @api public
     */

    utils.pushNode = function (parent, node) {
      assert(
        utils.isNode(parent),
        'expected parent node to be an instance of Node',
      )
      assert(utils.isNode(node), 'expected node to be an instance of Node')

      node.define('parent', parent)
      parent.nodes = parent.nodes || []
      parent.nodes.push(node)
      return node
    }

    /**
     * Unshift `node` onto `parent.nodes`, and set `parent` as `node.parent.
     *
     * ```js
     * var parent = new Node({type: 'foo'});
     * var node = new Node({type: 'bar'});
     * utils.unshiftNode(parent, node);
     * console.log(parent.nodes[0].type) // 'bar'
     * console.log(node.parent.type) // 'foo'
     * ```
     * @param {Object} `parent`
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {undefined}
     * @api public
     */

    utils.unshiftNode = function (parent, node) {
      assert(
        utils.isNode(parent),
        'expected parent node to be an instance of Node',
      )
      assert(utils.isNode(node), 'expected node to be an instance of Node')

      node.define('parent', parent)
      parent.nodes = parent.nodes || []
      parent.nodes.unshift(node)
    }

    /**
     * Pop the last `node` off of `parent.nodes`. The advantage of
     * using this method is that it checks for `node.nodes` and works
     * with any version of `snapdragon-node`.
     *
     * ```js
     * var parent = new Node({type: 'foo'});
     * utils.pushNode(parent, new Node({type: 'foo'}));
     * utils.pushNode(parent, new Node({type: 'bar'}));
     * utils.pushNode(parent, new Node({type: 'baz'}));
     * console.log(parent.nodes.length); //=> 3
     * utils.popNode(parent);
     * console.log(parent.nodes.length); //=> 2
     * ```
     * @param {Object} `parent`
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Number|Undefined} Returns the length of `node.nodes` or undefined.
     * @api public
     */

    utils.popNode = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      if (typeof node.pop === 'function') {
        return node.pop()
      }
      return node.nodes && node.nodes.pop()
    }

    /**
     * Shift the first `node` off of `parent.nodes`. The advantage of
     * using this method is that it checks for `node.nodes` and works
     * with any version of `snapdragon-node`.
     *
     * ```js
     * var parent = new Node({type: 'foo'});
     * utils.pushNode(parent, new Node({type: 'foo'}));
     * utils.pushNode(parent, new Node({type: 'bar'}));
     * utils.pushNode(parent, new Node({type: 'baz'}));
     * console.log(parent.nodes.length); //=> 3
     * utils.shiftNode(parent);
     * console.log(parent.nodes.length); //=> 2
     * ```
     * @param {Object} `parent`
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Number|Undefined} Returns the length of `node.nodes` or undefined.
     * @api public
     */

    utils.shiftNode = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      if (typeof node.shift === 'function') {
        return node.shift()
      }
      return node.nodes && node.nodes.shift()
    }

    /**
     * Remove the specified `node` from `parent.nodes`.
     *
     * ```js
     * var parent = new Node({type: 'abc'});
     * var foo = new Node({type: 'foo'});
     * utils.pushNode(parent, foo);
     * utils.pushNode(parent, new Node({type: 'bar'}));
     * utils.pushNode(parent, new Node({type: 'baz'}));
     * console.log(parent.nodes.length); //=> 3
     * utils.removeNode(parent, foo);
     * console.log(parent.nodes.length); //=> 2
     * ```
     * @param {Object} `parent`
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Object|undefined} Returns the removed node, if successful, or undefined if it does not exist on `parent.nodes`.
     * @api public
     */

    utils.removeNode = function (parent, node) {
      assert(
        utils.isNode(parent),
        'expected parent.node to be an instance of Node',
      )
      assert(utils.isNode(node), 'expected node to be an instance of Node')

      if (!parent.nodes) {
        return null
      }

      if (typeof parent.remove === 'function') {
        return parent.remove(node)
      }

      var idx = parent.nodes.indexOf(node)
      if (idx !== -1) {
        return parent.nodes.splice(idx, 1)
      }
    }

    /**
     * Returns true if `node.type` matches the given `type`. Throws a
     * `TypeError` if `node` is not an instance of `Node`.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var node = new Node({type: 'foo'});
     * console.log(utils.isType(node, 'foo')); // false
     * console.log(utils.isType(node, 'bar')); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {String} `type`
     * @return {Boolean}
     * @api public
     */

    utils.isType = function (node, type) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      switch (D__git_packageInherit_node_modules_kindOf(type)) {
        case 'array':
          var types = type.slice()
          for (var i = 0; i < types.length; i++) {
            if (utils.isType(node, types[i])) {
              return true
            }
          }
          return false
        case 'string':
          return node.type === type
        case 'regexp':
          return type.test(node.type)
        default: {
          throw new TypeError(
            'expected "type" to be an array, string or regexp',
          )
        }
      }
    }

    /**
     * Returns true if the given `node` has the given `type` in `node.nodes`.
     * Throws a `TypeError` if `node` is not an instance of `Node`.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var node = new Node({
     *   type: 'foo',
     *   nodes: [
     *     new Node({type: 'bar'}),
     *     new Node({type: 'baz'})
     *   ]
     * });
     * console.log(utils.hasType(node, 'xyz')); // false
     * console.log(utils.hasType(node, 'baz')); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {String} `type`
     * @return {Boolean}
     * @api public
     */

    utils.hasType = function (node, type) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      if (!Array.isArray(node.nodes)) return false
      for (var i = 0; i < node.nodes.length; i++) {
        if (utils.isType(node.nodes[i], type)) {
          return true
        }
      }
      return false
    }

    /**
     * Returns the first node from `node.nodes` of the given `type`
     *
     * ```js
     * var node = new Node({
     *   type: 'foo',
     *   nodes: [
     *     new Node({type: 'text', val: 'abc'}),
     *     new Node({type: 'text', val: 'xyz'})
     *   ]
     * });
     *
     * var textNode = utils.firstOfType(node.nodes, 'text');
     * console.log(textNode.val);
     * //=> 'abc'
     * ```
     * @param {Array} `nodes`
     * @param {String} `type`
     * @return {Object|undefined} Returns the first matching node or undefined.
     * @api public
     */

    utils.firstOfType = function (nodes, type) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i]
        if (utils.isType(node, type)) {
          return node
        }
      }
    }

    /**
     * Returns the node at the specified index, or the first node of the
     * given `type` from `node.nodes`.
     *
     * ```js
     * var node = new Node({
     *   type: 'foo',
     *   nodes: [
     *     new Node({type: 'text', val: 'abc'}),
     *     new Node({type: 'text', val: 'xyz'})
     *   ]
     * });
     *
     * var nodeOne = utils.findNode(node.nodes, 'text');
     * console.log(nodeOne.val);
     * //=> 'abc'
     *
     * var nodeTwo = utils.findNode(node.nodes, 1);
     * console.log(nodeTwo.val);
     * //=> 'xyz'
     * ```
     *
     * @param {Array} `nodes`
     * @param {String|Number} `type` Node type or index.
     * @return {Object} Returns a node or undefined.
     * @api public
     */

    utils.findNode = function (nodes, type) {
      if (!Array.isArray(nodes)) {
        return null
      }
      if (typeof type === 'number') {
        return nodes[type]
      }
      return utils.firstOfType(nodes, type)
    }

    /**
     * Returns true if the given node is an "*.open" node.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var brace = new Node({type: 'brace'});
     * var open = new Node({type: 'brace.open'});
     * var close = new Node({type: 'brace.close'});
     *
     * console.log(utils.isOpen(brace)); // false
     * console.log(utils.isOpen(open)); // true
     * console.log(utils.isOpen(close)); // false
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Boolean}
     * @api public
     */

    utils.isOpen = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      return node.type.slice(-5) === '.open'
    }

    /**
     * Returns true if the given node is a "*.close" node.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var brace = new Node({type: 'brace'});
     * var open = new Node({type: 'brace.open'});
     * var close = new Node({type: 'brace.close'});
     *
     * console.log(utils.isClose(brace)); // false
     * console.log(utils.isClose(open)); // false
     * console.log(utils.isClose(close)); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Boolean}
     * @api public
     */

    utils.isClose = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      return node.type.slice(-6) === '.close'
    }

    /**
     * Returns true if `node.nodes` **has** an `.open` node
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var brace = new Node({
     *   type: 'brace',
     *   nodes: []
     * });
     *
     * var open = new Node({type: 'brace.open'});
     * console.log(utils.hasOpen(brace)); // false
     *
     * brace.pushNode(open);
     * console.log(utils.hasOpen(brace)); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Boolean}
     * @api public
     */

    utils.hasOpen = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      var first = node.first || node.nodes ? node.nodes[0] : null
      if (utils.isNode(first)) {
        return first.type === node.type + '.open'
      }
      return false
    }

    /**
     * Returns true if `node.nodes` **has** a `.close` node
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var brace = new Node({
     *   type: 'brace',
     *   nodes: []
     * });
     *
     * var close = new Node({type: 'brace.close'});
     * console.log(utils.hasClose(brace)); // false
     *
     * brace.pushNode(close);
     * console.log(utils.hasClose(brace)); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Boolean}
     * @api public
     */

    utils.hasClose = function (node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      var last =
        node.last || node.nodes ? node.nodes[node.nodes.length - 1] : null
      if (utils.isNode(last)) {
        return last.type === node.type + '.close'
      }
      return false
    }

    /**
     * Returns true if `node.nodes` has both `.open` and `.close` nodes
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var brace = new Node({
     *   type: 'brace',
     *   nodes: []
     * });
     *
     * var open = new Node({type: 'brace.open'});
     * var close = new Node({type: 'brace.close'});
     * console.log(utils.hasOpen(brace)); // false
     * console.log(utils.hasClose(brace)); // false
     *
     * brace.pushNode(open);
     * brace.pushNode(close);
     * console.log(utils.hasOpen(brace)); // true
     * console.log(utils.hasClose(brace)); // true
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Boolean}
     * @api public
     */

    utils.hasOpenAndClose = function (node) {
      return utils.hasOpen(node) && utils.hasClose(node)
    }

    /**
     * Push the given `node` onto the `state.inside` array for the
     * given type. This array is used as a specialized "stack" for
     * only the given `node.type`.
     *
     * ```js
     * var state = { inside: {}};
     * var node = new Node({type: 'brace'});
     * utils.addType(state, node);
     * console.log(state.inside);
     * //=> { brace: [{type: 'brace'}] }
     * ```
     * @param {Object} `state` The `compiler.state` object or custom state object.
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Array} Returns the `state.inside` stack for the given type.
     * @api public
     */

    utils.addType = function (state, node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isObject(state), 'expected state to be an object')

      var type = node.parent
        ? node.parent.type
        : node.type.replace(/\.open$/, '')

      if (!state.hasOwnProperty('inside')) {
        state.inside = {}
      }
      if (!state.inside.hasOwnProperty(type)) {
        state.inside[type] = []
      }

      var arr = state.inside[type]
      arr.push(node)
      return arr
    }

    /**
     * Remove the given `node` from the `state.inside` array for the
     * given type. This array is used as a specialized "stack" for
     * only the given `node.type`.
     *
     * ```js
     * var state = { inside: {}};
     * var node = new Node({type: 'brace'});
     * utils.addType(state, node);
     * console.log(state.inside);
     * //=> { brace: [{type: 'brace'}] }
     * utils.removeType(state, node);
     * //=> { brace: [] }
     * ```
     * @param {Object} `state` The `compiler.state` object or custom state object.
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @return {Array} Returns the `state.inside` stack for the given type.
     * @api public
     */

    utils.removeType = function (state, node) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isObject(state), 'expected state to be an object')

      var type = node.parent
        ? node.parent.type
        : node.type.replace(/\.close$/, '')

      if (state.inside.hasOwnProperty(type)) {
        return state.inside[type].pop()
      }
    }

    /**
     * Returns true if `node.val` is an empty string, or `node.nodes` does
     * not contain any non-empty text nodes.
     *
     * ```js
     * var node = new Node({type: 'text'});
     * utils.isEmpty(node); //=> true
     * node.val = 'foo';
     * utils.isEmpty(node); //=> false
     * ```
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {Function} `fn`
     * @return {Boolean}
     * @api public
     */

    utils.isEmpty = function (node, fn) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')

      if (!Array.isArray(node.nodes)) {
        if (node.type !== 'text') {
          return true
        }
        if (typeof fn === 'function') {
          return fn(node, node.parent)
        }
        return !utils.trim(node.val)
      }

      for (var i = 0; i < node.nodes.length; i++) {
        var child = node.nodes[i]
        if (utils.isOpen(child) || utils.isClose(child)) {
          continue
        }
        if (!utils.isEmpty(child, fn)) {
          return false
        }
      }

      return true
    }

    /**
     * Returns true if the `state.inside` stack for the given type exists
     * and has one or more nodes on it.
     *
     * ```js
     * var state = { inside: {}};
     * var node = new Node({type: 'brace'});
     * console.log(utils.isInsideType(state, 'brace')); //=> false
     * utils.addType(state, node);
     * console.log(utils.isInsideType(state, 'brace')); //=> true
     * utils.removeType(state, node);
     * console.log(utils.isInsideType(state, 'brace')); //=> false
     * ```
     * @param {Object} `state`
     * @param {String} `type`
     * @return {Boolean}
     * @api public
     */

    utils.isInsideType = function (state, type) {
      assert(isObject(state), 'expected state to be an object')
      assert(isString(type), 'expected type to be a string')

      if (!state.hasOwnProperty('inside')) {
        return false
      }

      if (!state.inside.hasOwnProperty(type)) {
        return false
      }

      return state.inside[type].length > 0
    }

    /**
     * Returns true if `node` is either a child or grand-child of the given `type`,
     * or `state.inside[type]` is a non-empty array.
     *
     * ```js
     * var state = { inside: {}};
     * var node = new Node({type: 'brace'});
     * var open = new Node({type: 'brace.open'});
     * console.log(utils.isInside(state, open, 'brace')); //=> false
     * utils.pushNode(node, open);
     * console.log(utils.isInside(state, open, 'brace')); //=> true
     * ```
     * @param {Object} `state` Either the `compiler.state` object, if it exists, or a user-supplied state object.
     * @param {Object} `node` Instance of [snapdragon-node][]
     * @param {String} `type` The `node.type` to check for.
     * @return {Boolean}
     * @api public
     */

    utils.isInside = function (state, node, type) {
      assert(utils.isNode(node), 'expected node to be an instance of Node')
      assert(isObject(state), 'expected state to be an object')

      if (Array.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
          if (utils.isInside(state, node, type[i])) {
            return true
          }
        }
        return false
      }

      var parent = node.parent
      if (typeof type === 'string') {
        return (
          (parent && parent.type === type) || utils.isInsideType(state, type)
        )
      }

      if (D__git_packageInherit_node_modules_kindOf(type) === 'regexp') {
        if (parent && parent.type && type.test(parent.type)) {
          return true
        }

        var keys = Object.keys(state.inside)
        var len = keys.length
        var idx = -1
        while (++idx < len) {
          var key = keys[idx]
          var val = state.inside[key]

          if (Array.isArray(val) && val.length !== 0 && type.test(key)) {
            return true
          }
        }
      }
      return false
    }

    /**
     * Get the last `n` element from the given `array`. Used for getting
     * a node from `node.nodes.`
     *
     * @param {Array} `array`
     * @param {Number} `n`
     * @return {undefined}
     * @api public
     */

    utils.last = function (arr, n) {
      return arr[arr.length - (n || 1)]
    }

    /**
     * Cast the given `val` to an array.
     *
     * ```js
     * console.log(utils.arrayify(''));
     * //=> []
     * console.log(utils.arrayify('foo'));
     * //=> ['foo']
     * console.log(utils.arrayify(['foo']));
     * //=> ['foo']
     * ```
     * @param {any} `val`
     * @return {Array}
     * @api public
     */

    utils.arrayify = function (val) {
      if (typeof val === 'string' && val !== '') {
        return [val]
      }
      if (!Array.isArray(val)) {
        return []
      }
      return val
    }

    /**
     * Convert the given `val` to a string by joining with `,`. Useful
     * for creating a cheerio/CSS/DOM-style selector from a list of strings.
     *
     * @param {any} `val`
     * @return {Array}
     * @api public
     */

    utils.stringify = function (val) {
      return utils.arrayify(val).join(',')
    }

    /**
     * Ensure that the given value is a string and call `.trim()` on it,
     * or return an empty string.
     *
     * @param {String} `str`
     * @return {String}
     * @api public
     */

    utils.trim = function (str) {
      return typeof str === 'string' ? str.trim() : ''
    }

    /**
     * Return true if val is an object
     */

    function isObject(val) {
      return D__git_packageInherit_node_modules_kindOf(val) === 'object'
    }

    /**
     * Return true if val is a string
     */

    function isString(val) {
      return typeof val === 'string'
    }

    /**
     * Return true if val is a function
     */

    function isFunction(val) {
      return typeof val === 'function'
    }

    /**
     * Return true if val is an array
     */

    function isArray(val) {
      return Array.isArray(val)
    }

    /**
     * Shim to ensure the `.append` methods work with any version of snapdragon
     */

    function append(compiler, val, node) {
      if (typeof compiler.append !== 'function') {
        return compiler.emit(val, node)
      }
      return compiler.append(val, node)
    }

    /**
     * Simplified assertion. Throws an error is `val` is falsey.
     */

    function assert(val, message) {
      if (!val) throw new Error(message)
    }
  },
)

var D__git_packageInherit_node_modules_snapdragonNode = createCommonjsModule(
  function (module, exports) {
    var ownNames

    /**
     * Create a new AST `Node` with the given `val` and `type`.
     *
     * ```js
     * var node = new Node('*', 'Star');
     * var node = new Node({type: 'star', val: '*'});
     * ```
     * @name Node
     * @param {String|Object} `val` Pass a matched substring, or an object to merge onto the node.
     * @param {String} `type` The node type to use when `val` is a string.
     * @return {Object} node instance
     * @api public
     */

    function Node(val, type, parent) {
      if (typeof type !== 'string') {
        parent = type
        type = null
      }

      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        this,
        'parent',
        parent,
      )
      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        this,
        'isNode',
        true,
      )
      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        this,
        'expect',
        null,
      )

      if (typeof type !== 'string' && isobject(val)) {
        lazyKeys()
        var keys = Object.keys(val)
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i]
          if (ownNames.indexOf(key) === -1) {
            this[key] = val[key]
          }
        }
      } else {
        this.type = type
        this.val = val
      }
    }

    /**
     * Returns true if the given value is a node.
     *
     * ```js
     * var Node = require('snapdragon-node');
     * var node = new Node({type: 'foo'});
     * console.log(Node.isNode(node)); //=> true
     * console.log(Node.isNode({})); //=> false
     * ```
     * @param {Object} `node`
     * @returns {Boolean}
     * @api public
     */

    Node.isNode = function (node) {
      return D__git_packageInherit_node_modules_snapdragonUtil.isNode(node)
    }

    /**
     * Define a non-enumberable property on the node instance.
     * Useful for adding properties that shouldn't be extended
     * or visible during debugging.
     *
     * ```js
     * var node = new Node();
     * node.define('foo', 'something non-enumerable');
     * ```
     * @param {String} `name`
     * @param {any} `val`
     * @return {Object} returns the node instance
     * @api public
     */

    Node.prototype.define = function (name, val) {
      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        this,
        name,
        val,
      )
      return this
    }

    /**
     * Returns true if `node.val` is an empty string, or `node.nodes` does
     * not contain any non-empty text nodes.
     *
     * ```js
     * var node = new Node({type: 'text'});
     * node.isEmpty(); //=> true
     * node.val = 'foo';
     * node.isEmpty(); //=> false
     * ```
     * @param {Function} `fn` (optional) Filter function that is called on `node` and/or child nodes. `isEmpty` will return false immediately when the filter function returns false on any nodes.
     * @return {Boolean}
     * @api public
     */

    Node.prototype.isEmpty = function (fn) {
      return D__git_packageInherit_node_modules_snapdragonUtil.isEmpty(this, fn)
    }

    /**
     * Given node `foo` and node `bar`, push node `bar` onto `foo.nodes`, and
     * set `foo` as `bar.parent`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * foo.push(bar);
     * ```
     * @param {Object} `node`
     * @return {Number} Returns the length of `node.nodes`
     * @api public
     */

    Node.prototype.push = function (node) {
      assert(Node.isNode(node), 'expected node to be an instance of Node')
      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        node,
        'parent',
        this,
      )

      this.nodes = this.nodes || []
      return this.nodes.push(node)
    }

    /**
     * Given node `foo` and node `bar`, unshift node `bar` onto `foo.nodes`, and
     * set `foo` as `bar.parent`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * foo.unshift(bar);
     * ```
     * @param {Object} `node`
     * @return {Number} Returns the length of `node.nodes`
     * @api public
     */

    Node.prototype.unshift = function (node) {
      assert(Node.isNode(node), 'expected node to be an instance of Node')
      D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
        node,
        'parent',
        this,
      )

      this.nodes = this.nodes || []
      return this.nodes.unshift(node)
    }

    /**
     * Pop a node from `node.nodes`.
     *
     * ```js
     * var node = new Node({type: 'foo'});
     * node.push(new Node({type: 'a'}));
     * node.push(new Node({type: 'b'}));
     * node.push(new Node({type: 'c'}));
     * node.push(new Node({type: 'd'}));
     * console.log(node.nodes.length);
     * //=> 4
     * node.pop();
     * console.log(node.nodes.length);
     * //=> 3
     * ```
     * @return {Number} Returns the popped `node`
     * @api public
     */

    Node.prototype.pop = function () {
      return this.nodes && this.nodes.pop()
    }

    /**
     * Shift a node from `node.nodes`.
     *
     * ```js
     * var node = new Node({type: 'foo'});
     * node.push(new Node({type: 'a'}));
     * node.push(new Node({type: 'b'}));
     * node.push(new Node({type: 'c'}));
     * node.push(new Node({type: 'd'}));
     * console.log(node.nodes.length);
     * //=> 4
     * node.shift();
     * console.log(node.nodes.length);
     * //=> 3
     * ```
     * @return {Object} Returns the shifted `node`
     * @api public
     */

    Node.prototype.shift = function () {
      return this.nodes && this.nodes.shift()
    }

    /**
     * Remove `node` from `node.nodes`.
     *
     * ```js
     * node.remove(childNode);
     * ```
     * @param {Object} `node`
     * @return {Object} Returns the removed node.
     * @api public
     */

    Node.prototype.remove = function (node) {
      assert(Node.isNode(node), 'expected node to be an instance of Node')
      this.nodes = this.nodes || []
      var idx = node.index
      if (idx !== -1) {
        node.index = -1
        return this.nodes.splice(idx, 1)
      }
      return null
    }

    /**
     * Get the first child node from `node.nodes` that matches the given `type`.
     * If `type` is a number, the child node at that index is returned.
     *
     * ```js
     * var child = node.find(1); //<= index of the node to get
     * var child = node.find('foo'); //<= node.type of a child node
     * var child = node.find(/^(foo|bar)$/); //<= regex to match node.type
     * var child = node.find(['foo', 'bar']); //<= array of node.type(s)
     * ```
     * @param {String} `type`
     * @return {Object} Returns a child node or undefined.
     * @api public
     */

    Node.prototype.find = function (type) {
      return D__git_packageInherit_node_modules_snapdragonUtil.findNode(
        this.nodes,
        type,
      )
    }

    /**
     * Return true if the node is the given `type`.
     *
     * ```js
     * var node = new Node({type: 'bar'});
     * cosole.log(node.isType('foo'));          // false
     * cosole.log(node.isType(/^(foo|bar)$/));  // true
     * cosole.log(node.isType(['foo', 'bar'])); // true
     * ```
     * @param {String} `type`
     * @return {Boolean}
     * @api public
     */

    Node.prototype.isType = function (type) {
      return D__git_packageInherit_node_modules_snapdragonUtil.isType(
        this,
        type,
      )
    }

    /**
     * Return true if the `node.nodes` has the given `type`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * foo.push(bar);
     *
     * cosole.log(foo.hasType('qux'));          // false
     * cosole.log(foo.hasType(/^(qux|bar)$/));  // true
     * cosole.log(foo.hasType(['qux', 'bar'])); // true
     * ```
     * @param {String} `type`
     * @return {Boolean}
     * @api public
     */

    Node.prototype.hasType = function (type) {
      return D__git_packageInherit_node_modules_snapdragonUtil.hasType(
        this,
        type,
      )
    }

    /**
     * Get the siblings array, or `null` if it doesn't exist.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * foo.push(bar);
     * foo.push(baz);
     *
     * console.log(bar.siblings.length) // 2
     * console.log(baz.siblings.length) // 2
     * ```
     * @return {Array}
     * @api public
     */

    Object.defineProperty(Node.prototype, 'siblings', {
      set: function () {
        throw new Error('node.siblings is a getter and cannot be defined')
      },
      get: function () {
        return this.parent ? this.parent.nodes : null
      },
    })

    /**
     * Get the node's current index from `node.parent.nodes`.
     * This should always be correct, even when the parent adds nodes.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * var qux = new Node({type: 'qux'});
     * foo.push(bar);
     * foo.push(baz);
     * foo.unshift(qux);
     *
     * console.log(bar.index) // 1
     * console.log(baz.index) // 2
     * console.log(qux.index) // 0
     * ```
     * @return {Number}
     * @api public
     */

    Object.defineProperty(Node.prototype, 'index', {
      set: function (index) {
        D__git_packageInherit_node_modules_snapdragonNode_node_modules_defineProperty(
          this,
          'idx',
          index,
        )
      },
      get: function () {
        if (!Array.isArray(this.siblings)) {
          return -1
        }
        var tok = this.idx !== -1 ? this.siblings[this.idx] : null
        if (tok !== this) {
          this.idx = this.siblings.indexOf(this)
        }
        return this.idx
      },
    })

    /**
     * Get the previous node from the siblings array or `null`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * foo.push(bar);
     * foo.push(baz);
     *
     * console.log(baz.prev.type) // 'bar'
     * ```
     * @return {Object}
     * @api public
     */

    Object.defineProperty(Node.prototype, 'prev', {
      set: function () {
        throw new Error('node.prev is a getter and cannot be defined')
      },
      get: function () {
        if (Array.isArray(this.siblings)) {
          return this.siblings[this.index - 1] || this.parent.prev
        }
        return null
      },
    })

    /**
     * Get the siblings array, or `null` if it doesn't exist.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * foo.push(bar);
     * foo.push(baz);
     *
     * console.log(bar.siblings.length) // 2
     * console.log(baz.siblings.length) // 2
     * ```
     * @return {Object}
     * @api public
     */

    Object.defineProperty(Node.prototype, 'next', {
      set: function () {
        throw new Error('node.next is a getter and cannot be defined')
      },
      get: function () {
        if (Array.isArray(this.siblings)) {
          return this.siblings[this.index + 1] || this.parent.next
        }
        return null
      },
    })

    /**
     * Get the first node from `node.nodes`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * var qux = new Node({type: 'qux'});
     * foo.push(bar);
     * foo.push(baz);
     * foo.push(qux);
     *
     * console.log(foo.first.type) // 'bar'
     * ```
     * @return {Object} The first node, or undefiend
     * @api public
     */

    Object.defineProperty(Node.prototype, 'first', {
      get: function () {
        return this.nodes ? this.nodes[0] : null
      },
    })

    /**
     * Get the last node from `node.nodes`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * var qux = new Node({type: 'qux'});
     * foo.push(bar);
     * foo.push(baz);
     * foo.push(qux);
     *
     * console.log(foo.last.type) // 'qux'
     * ```
     * @return {Object} The last node, or undefiend
     * @api public
     */

    Object.defineProperty(Node.prototype, 'last', {
      get: function () {
        return this.nodes
          ? D__git_packageInherit_node_modules_snapdragonUtil.last(this.nodes)
          : null
      },
    })

    /**
     * Get the last node from `node.nodes`.
     *
     * ```js
     * var foo = new Node({type: 'foo'});
     * var bar = new Node({type: 'bar'});
     * var baz = new Node({type: 'baz'});
     * var qux = new Node({type: 'qux'});
     * foo.push(bar);
     * foo.push(baz);
     * foo.push(qux);
     *
     * console.log(foo.last.type) // 'qux'
     * ```
     * @return {Object} The last node, or undefiend
     * @api public
     */

    Object.defineProperty(Node.prototype, 'scope', {
      get: function () {
        if (this.isScope !== true) {
          return this.parent ? this.parent.scope : this
        }
        return this
      },
    })

    /**
     * Get own property names from Node prototype, but only the
     * first time `Node` is instantiated
     */

    function lazyKeys() {
      if (!ownNames) {
        ownNames = Object.getOwnPropertyNames(Node.prototype)
      }
    }

    /**
     * Simplified assertion. Throws an error is `val` is falsey.
     */

    function assert(val, message) {
      if (!val) throw new Error(message)
    }

    /**
     * Expose `Node`
     */

    exports = module.exports = Node
  },
)

/**
 * Braces parsers
 */

var parsers = function (braces, options) {
  braces.parser
    .set('bos', function () {
      if (!this.parsed) {
        this.ast = this.nodes[0] = new D__git_packageInherit_node_modules_snapdragonNode(
          this.ast,
        )
      }
    })

    /**
     * Character parsers
     */

    .set('escape', function () {
      var pos = this.position()
      var m = this.match(/^(?:\\(.)|\$\{)/)
      if (!m) return

      var prev = this.prev()
      var last = utils_1.last(prev.nodes)

      var node = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'text',
          multiplier: 1,
          val: m[0],
        }),
      )

      if (node.val === '\\\\') {
        return node
      }

      if (node.val === '${') {
        var str = this.input
        var idx = -1
        var ch

        while ((ch = str[++idx])) {
          this.consume(1)
          node.val += ch
          if (ch === '\\') {
            node.val += str[++idx]
            continue
          }
          if (ch === '}') {
            break
          }
        }
      }

      if (this.options.unescape !== false) {
        node.val = node.val.replace(/\\([{}])/g, '$1')
      }

      if (last.val === '"' && this.input.charAt(0) === '"') {
        last.val = node.val
        this.consume(1)
        return
      }

      return concatNodes.call(this, pos, node, prev, options)
    })

    /**
     * Brackets: "[...]" (basic, this is overridden by
     * other parsers in more advanced implementations)
     */

    .set('bracket', function () {
      var isInside = this.isInside('brace')
      var pos = this.position()
      var m = this.match(/^(?:\[([!^]?)([^\]]{2,}|\]-)(\]|[^*+?]+)|\[)/)
      if (!m) return

      var prev = this.prev()
      var val = m[0]
      var negated = m[1] ? '^' : ''
      var inner = m[2] || ''
      var close = m[3] || ''

      if (isInside && prev.type === 'brace') {
        prev.text = prev.text || ''
        prev.text += val
      }

      var esc = this.input.slice(0, 2)
      if (inner === '' && esc === '\\]') {
        inner += esc
        this.consume(2)

        var str = this.input
        var idx = -1
        var ch

        while ((ch = str[++idx])) {
          this.consume(1)
          if (ch === ']') {
            close = ch
            break
          }
          inner += ch
        }
      }

      return pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'bracket',
          val: val,
          escaped: close !== ']',
          negated: negated,
          inner: inner,
          close: close,
        }),
      )
    })

    /**
     * Empty braces (we capture these early to
     * speed up processing in the compiler)
     */

    .set('multiplier', function () {
      var isInside = this.isInside('brace')
      var pos = this.position()
      var m = this.match(/^\{((?:,|\{,+\})+)\}/)
      if (!m) return

      this.multiplier = true
      var prev = this.prev()
      var val = m[0]

      if (isInside && prev.type === 'brace') {
        prev.text = prev.text || ''
        prev.text += val
      }

      var node = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'text',
          multiplier: 1,
          match: m,
          val: val,
        }),
      )

      return concatNodes.call(this, pos, node, prev, options)
    })

    /**
     * Open
     */

    .set('brace.open', function () {
      var pos = this.position()
      var m = this.match(/^\{(?!(?:[^\\}]?|,+)\})/)
      if (!m) return

      var prev = this.prev()
      var last = utils_1.last(prev.nodes)

      // if the last parsed character was an extglob character
      // we need to _not optimize_ the brace pattern because
      // it might be mistaken for an extglob by a downstream parser
      if (last && last.val && isExtglobChar(last.val.slice(-1))) {
        last.optimize = false
      }

      var open = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'brace.open',
          val: m[0],
        }),
      )

      var node = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'brace',
          nodes: [],
        }),
      )

      node.push(open)
      prev.push(node)
      this.push('brace', node)
    })

    /**
     * Close
     */

    .set('brace.close', function () {
      var pos = this.position()
      var m = this.match(/^\}/)
      if (!m || !m[0]) return

      var brace = this.pop('brace')
      var node = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'brace.close',
          val: m[0],
        }),
      )

      if (!this.isType(brace, 'brace')) {
        if (this.options.strict) {
          throw new Error('missing opening "{"')
        }
        node.type = 'text'
        node.multiplier = 0
        node.escaped = true
        return node
      }

      var prev = this.prev()
      var last = utils_1.last(prev.nodes)
      if (last.text) {
        var lastNode = utils_1.last(last.nodes)
        if (lastNode.val === ')' && /[!@*?+]\(/.test(last.text)) {
          var open = last.nodes[0]
          var text = last.nodes[1]
          if (open.type === 'brace.open' && text && text.type === 'text') {
            text.optimize = false
          }
        }
      }

      if (brace.nodes.length > 2) {
        var first = brace.nodes[1]
        if (first.type === 'text' && first.val === ',') {
          brace.nodes.splice(1, 1)
          brace.nodes.push(first)
        }
      }

      brace.push(node)
    })

    /**
     * Capture boundary characters
     */

    .set('boundary', function () {
      var pos = this.position()
      var m = this.match(/^[$^](?!\{)/)
      if (!m) return
      return pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'text',
          val: m[0],
        }),
      )
    })

    /**
     * One or zero, non-comma characters wrapped in braces
     */

    .set('nobrace', function () {
      var isInside = this.isInside('brace')
      var pos = this.position()
      var m = this.match(/^\{[^,]?\}/)
      if (!m) return

      var prev = this.prev()
      var val = m[0]

      if (isInside && prev.type === 'brace') {
        prev.text = prev.text || ''
        prev.text += val
      }

      return pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'text',
          multiplier: 0,
          val: val,
        }),
      )
    })

    /**
     * Text
     */

    .set('text', function () {
      var isInside = this.isInside('brace')
      var pos = this.position()
      var m = this.match(/^((?!\\)[^${}[\]])+/)
      if (!m) return

      var prev = this.prev()
      var val = m[0]

      if (isInside && prev.type === 'brace') {
        prev.text = prev.text || ''
        prev.text += val
      }

      var node = pos(
        new D__git_packageInherit_node_modules_snapdragonNode({
          type: 'text',
          multiplier: 1,
          val: val,
        }),
      )

      return concatNodes.call(this, pos, node, prev, options)
    })
}

/**
 * Returns true if the character is an extglob character.
 */

function isExtglobChar(ch) {
  return ch === '!' || ch === '@' || ch === '*' || ch === '?' || ch === '+'
}

/**
 * Combine text nodes, and calculate empty sets (`{,,}`)
 * @param {Function} `pos` Function to calculate node position
 * @param {Object} `node` AST node
 * @return {Object}
 */

function concatNodes(pos, node, parent, options) {
  node.orig = node.val
  var prev = this.prev()
  var last = utils_1.last(prev.nodes)
  var isEscaped = false

  if (node.val.length > 1) {
    var a = node.val.charAt(0)
    var b = node.val.slice(-1)

    isEscaped =
      (a === '"' && b === '"') ||
      (a === "'" && b === "'") ||
      (a === '`' && b === '`')
  }

  if (isEscaped && options.unescape !== false) {
    node.val = node.val.slice(1, node.val.length - 1)
    node.escaped = true
  }

  if (node.match) {
    var match = node.match[1]
    if (!match || match.indexOf('}') === -1) {
      match = node.match[0]
    }

    // replace each set with a single ","
    var val = match.replace(/\{/g, ',').replace(/\}/g, '')
    node.multiplier *= val.length
    node.val = ''
  }

  var simpleText =
    last.type === 'text' &&
    last.multiplier === 1 &&
    node.multiplier === 1 &&
    node.val

  if (simpleText) {
    last.val += node.val
    return
  }

  prev.push(node)
}

var D__git_packageInherit_node_modules_base_node_modules_defineProperty = function defineProperty(
  obj,
  prop,
  val,
) {
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('expected an object or function.')
  }

  if (typeof prop !== 'string') {
    throw new TypeError('expected `prop` to be a string.')
  }

  if (
    D__git_packageInherit_node_modules_isDescriptor(val) &&
    ('set' in val || 'get' in val)
  ) {
    return Object.defineProperty(obj, prop, val)
  }

  return Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })
}

var D__git_packageInherit_node_modules_componentEmitter = createCommonjsModule(
  function (module) {
    /**
     * Expose `Emitter`.
     */

    {
      module.exports = Emitter
    }

    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */

    function Emitter(obj) {
      if (obj) return mixin(obj)
    }
    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key]
      }
      return obj
    }

    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.on = Emitter.prototype.addEventListener = function (
      event,
      fn,
    ) {
      this._callbacks = this._callbacks || {}
      ;(this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(
        fn,
      )
      return this
    }

    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on)
        fn.apply(this, arguments)
      }

      on.fn = fn
      this.on(event, on)
      return this
    }

    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (
      event,
      fn,
    ) {
      this._callbacks = this._callbacks || {}

      // all
      if (0 == arguments.length) {
        this._callbacks = {}
        return this
      }

      // specific event
      var callbacks = this._callbacks['$' + event]
      if (!callbacks) return this

      // remove all handlers
      if (1 == arguments.length) {
        delete this._callbacks['$' + event]
        return this
      }

      // remove specific handler
      var cb
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i]
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1)
          break
        }
      }

      // Remove event specific arrays for event types that no
      // one is subscribed for to avoid memory leak.
      if (callbacks.length === 0) {
        delete this._callbacks['$' + event]
      }

      return this
    }

    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */

    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {}

      var args = new Array(arguments.length - 1),
        callbacks = this._callbacks['$' + event]

      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i]
      }

      if (callbacks) {
        callbacks = callbacks.slice(0)
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args)
        }
      }

      return this
    }

    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */

    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {}
      return this._callbacks['$' + event] || []
    }

    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */

    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length
    }
  },
)

var D__git_packageInherit_node_modules_objectVisit = function visit(
  thisArg,
  method,
  target,
  val,
) {
  if (!isobject(thisArg) && typeof thisArg !== 'function') {
    throw new Error('object-visit expects `thisArg` to be an object.')
  }

  if (typeof method !== 'string') {
    throw new Error('object-visit expects `method` name to be a string')
  }

  if (typeof thisArg[method] !== 'function') {
    return thisArg
  }

  var args = [].slice.call(arguments, 3)
  target = target || {}

  for (var key in target) {
    var arr = [key, target[key]].concat(args)
    thisArg[method].apply(thisArg, arr)
  }
  return thisArg
}

/**
 * Map `visit` over an array of objects.
 *
 * @param  {Object} `collection` The context in which to invoke `method`
 * @param  {String} `method` Name of the method to call on `collection`
 * @param  {Object} `arr` Array of objects.
 */

var D__git_packageInherit_node_modules_mapVisit = function mapVisit(
  collection,
  method,
  val,
) {
  if (isObject$6(val)) {
    return D__git_packageInherit_node_modules_objectVisit.apply(null, arguments)
  }

  if (!Array.isArray(val)) {
    throw new TypeError(
      'expected an array: ' + util__default['default'].inspect(val),
    )
  }

  var args = [].slice.call(arguments, 3)

  for (var i = 0; i < val.length; i++) {
    var ele = val[i]
    if (isObject$6(ele)) {
      D__git_packageInherit_node_modules_objectVisit.apply(
        null,
        [collection, method, ele].concat(args),
      )
    } else {
      collection[method].apply(collection, [ele].concat(args))
    }
  }
}

function isObject$6(val) {
  return (
    val &&
    (typeof val === 'function' ||
      (!Array.isArray(val) && typeof val === 'object'))
  )
}

var D__git_packageInherit_node_modules_collectionVisit = function (
  collection,
  method,
  val,
) {
  var result

  if (typeof val === 'string' && method in collection) {
    var args = [].slice.call(arguments, 2)
    result = collection[method].apply(collection, args)
  } else if (Array.isArray(val)) {
    result = D__git_packageInherit_node_modules_mapVisit.apply(null, arguments)
  } else {
    result = D__git_packageInherit_node_modules_objectVisit.apply(
      null,
      arguments,
    )
  }

  if (typeof result !== 'undefined') {
    return result
  }

  return collection
}

var D__git_packageInherit_node_modules_toObjectPath = function toPath(args) {
  if (D__git_packageInherit_node_modules_kindOf(args) !== 'arguments') {
    args = arguments
  }
  return filter(args).join('.')
}

function filter(arr) {
  var len = arr.length
  var idx = -1
  var res = []

  while (++idx < len) {
    var ele = arr[idx]
    if (
      D__git_packageInherit_node_modules_kindOf(ele) === 'arguments' ||
      Array.isArray(ele)
    ) {
      res.push.apply(res, filter(ele))
    } else if (typeof ele === 'string') {
      res.push(ele)
    }
  }
  return res
}

var D__git_packageInherit_node_modules_arrUnion = function union(init) {
  if (!Array.isArray(init)) {
    throw new TypeError('arr-union expects the first argument to be an array.')
  }

  var len = arguments.length
  var i = 0

  while (++i < len) {
    var arg = arguments[i]
    if (!arg) continue

    if (!Array.isArray(arg)) {
      arg = [arg]
    }

    for (var j = 0; j < arg.length; j++) {
      var ele = arg[j]

      if (init.indexOf(ele) >= 0) {
        continue
      }
      init.push(ele)
    }
  }
  return init
}

/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var D__git_packageInherit_node_modules_getValue = function (
  obj,
  prop,
  a,
  b,
  c,
) {
  if (!isObject$7(obj) || !prop) {
    return obj
  }

  prop = toString$4(prop)

  // allowing for multiple properties to be passed as
  // a string or array, but much faster (3-4x) than doing
  // `[].slice.call(arguments)`
  if (a) prop += '.' + toString$4(a)
  if (b) prop += '.' + toString$4(b)
  if (c) prop += '.' + toString$4(c)

  if (prop in obj) {
    return obj[prop]
  }

  var segs = prop.split('.')
  var len = segs.length
  var i = -1

  while (obj && ++i < len) {
    var key = segs[i]
    while (key[key.length - 1] === '\\') {
      key = key.slice(0, -1) + '.' + segs[++i]
    }
    obj = obj[key]
  }
  return obj
}

function isObject$7(val) {
  return val !== null && (typeof val === 'object' || typeof val === 'function')
}

function toString$4(val) {
  if (!val) return ''
  if (Array.isArray(val)) {
    return val.join('.')
  }
  return val
}

var D__git_packageInherit_node_modules_setValue = function (obj, prop, val) {
  if (!D__git_packageInherit_node_modules_isExtendable(obj)) {
    return obj
  }

  if (Array.isArray(prop)) {
    prop = [].concat.apply([], prop).join('.')
  }

  if (typeof prop !== 'string') {
    return obj
  }

  var keys = D__git_packageInherit_node_modules_splitString(prop, {
    sep: '.',
    brackets: true,
  }).filter(isValidKey)
  var len = keys.length
  var idx = -1
  var current = obj

  while (++idx < len) {
    var key = keys[idx]
    if (idx !== len - 1) {
      if (!D__git_packageInherit_node_modules_isExtendable(current[key])) {
        current[key] = {}
      }
      current = current[key]
      continue
    }

    if (isPlainObject(current[key]) && isPlainObject(val)) {
      current[key] = D__git_packageInherit_node_modules_extendShallow(
        {},
        current[key],
        val,
      )
    } else {
      current[key] = val
    }
  }

  return obj
}

function isValidKey(key) {
  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype'
}

var D__git_packageInherit_node_modules_unionValue = function unionValue(
  obj,
  prop,
  value,
) {
  if (!D__git_packageInherit_node_modules_isExtendable(obj)) {
    throw new TypeError(
      'union-value expects the first argument to be an object.',
    )
  }

  if (typeof prop !== 'string') {
    throw new TypeError('union-value expects `prop` to be a string.')
  }

  var arr = arrayify(D__git_packageInherit_node_modules_getValue(obj, prop))
  D__git_packageInherit_node_modules_setValue(
    obj,
    prop,
    D__git_packageInherit_node_modules_arrUnion(arr, arrayify(value)),
  )
  return obj
}

function arrayify(val) {
  if (val === null || typeof val === 'undefined') {
    return []
  }
  if (Array.isArray(val)) {
    return val
  }
  return [val]
}

var toString$5 = {}.toString

var D__git_packageInherit_node_modules_isarray =
  Array.isArray ||
  function (arr) {
    return toString$5.call(arr) == '[object Array]'
  }

/*!
 * has-values <https://github.com/jonschlinkert/has-values>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var D__git_packageInherit_node_modules_unsetValue_node_modules_hasValues = function hasValue(
  o,
  noZero,
) {
  if (o === null || o === undefined) {
    return false
  }

  if (typeof o === 'boolean') {
    return true
  }

  if (typeof o === 'number') {
    if (o === 0 && noZero === true) {
      return false
    }
    return true
  }

  if (o.length !== undefined) {
    return o.length !== 0
  }

  for (var key in o) {
    if (o.hasOwnProperty(key)) {
      return true
    }
  }
  return false
}

var D__git_packageInherit_node_modules_unsetValue_node_modules_hasValue_node_modules_isobject = function isObject(
  val,
) {
  return (
    val != null &&
    typeof val === 'object' &&
    D__git_packageInherit_node_modules_isarray(val) === false
  )
}

var D__git_packageInherit_node_modules_unsetValue_node_modules_hasValue = function (
  obj,
  prop,
  noZero,
) {
  if (
    D__git_packageInherit_node_modules_unsetValue_node_modules_hasValue_node_modules_isobject(
      obj,
    )
  ) {
    return D__git_packageInherit_node_modules_unsetValue_node_modules_hasValues(
      D__git_packageInherit_node_modules_getValue(obj, prop),
      noZero,
    )
  }
  return D__git_packageInherit_node_modules_unsetValue_node_modules_hasValues(
    obj,
    prop,
  )
}

var D__git_packageInherit_node_modules_unsetValue = function unset(obj, prop) {
  if (!isobject(obj)) {
    throw new TypeError('expected an object.')
  }
  if (obj.hasOwnProperty(prop)) {
    delete obj[prop]
    return true
  }

  if (
    D__git_packageInherit_node_modules_unsetValue_node_modules_hasValue(
      obj,
      prop,
    )
  ) {
    var segs = prop.split('.')
    var last = segs.pop()
    while (segs.length && segs[segs.length - 1].slice(-1) === '\\') {
      last = segs.pop().slice(0, -1) + '.' + last
    }
    while (segs.length) obj = obj[(prop = segs.shift())]
    return delete obj[last]
  }
  return true
}

/**
 * Create a `Cache` constructor that when instantiated will
 * store values on the given `prop`.
 *
 * ```js
 * var Cache = require('cache-base').namespace('data');
 * var cache = new Cache();
 *
 * cache.set('foo', 'bar');
 * //=> {data: {foo: 'bar'}}
 * ```
 * @param {String} `prop` The property name to use for storing values.
 * @return {Function} Returns a custom `Cache` constructor
 * @api public
 */

function namespace(prop) {
  /**
   * Create a new `Cache`. Internally the `Cache` constructor is created using
   * the `namespace` function, with `cache` defined as the storage object.
   *
   * ```js
   * var app = new Cache();
   * ```
   * @param {Object} `cache` Optionally pass an object to initialize with.
   * @constructor
   * @api public
   */

  function Cache(cache) {
    if (prop) {
      this[prop] = {}
    }
    if (cache) {
      this.set(cache)
    }
  }

  /**
   * Inherit Emitter
   */

  D__git_packageInherit_node_modules_componentEmitter(Cache.prototype)

  /**
   * Assign `value` to `key`. Also emits `set` with
   * the key and value.
   *
   * ```js
   * app.on('set', function(key, val) {
   *   // do something when `set` is emitted
   * });
   *
   * app.set(key, value);
   *
   * // also takes an object or array
   * app.set({name: 'Halle'});
   * app.set([{foo: 'bar'}, {baz: 'quux'}]);
   * console.log(app);
   * //=> {name: 'Halle', foo: 'bar', baz: 'quux'}
   * ```
   *
   * @name .set
   * @emits `set` with `key` and `value` as arguments.
   * @param {String} `key`
   * @param {any} `value`
   * @return {Object} Returns the instance for chaining.
   * @api public
   */

  Cache.prototype.set = function (key, val) {
    if (Array.isArray(key) && arguments.length === 2) {
      key = D__git_packageInherit_node_modules_toObjectPath(key)
    }
    if (isobject(key) || Array.isArray(key)) {
      this.visit('set', key)
    } else {
      D__git_packageInherit_node_modules_setValue(
        prop ? this[prop] : this,
        key,
        val,
      )
      this.emit('set', key, val)
    }
    return this
  }

  /**
   * Union `array` to `key`. Also emits `set` with
   * the key and value.
   *
   * ```js
   * app.union('a.b', ['foo']);
   * app.union('a.b', ['bar']);
   * console.log(app.get('a'));
   * //=> {b: ['foo', 'bar']}
   * ```
   * @name .union
   * @param {String} `key`
   * @param {any} `value`
   * @return {Object} Returns the instance for chaining.
   * @api public
   */

  Cache.prototype.union = function (key, val) {
    if (Array.isArray(key) && arguments.length === 2) {
      key = D__git_packageInherit_node_modules_toObjectPath(key)
    }
    var ctx = prop ? this[prop] : this
    D__git_packageInherit_node_modules_unionValue(ctx, key, arrayify$1(val))
    this.emit('union', val)
    return this
  }

  /**
   * Return the value of `key`. Dot notation may be used
   * to get [nested property values][get-value].
   *
   * ```js
   * app.set('a.b.c', 'd');
   * app.get('a.b');
   * //=> {c: 'd'}
   *
   * app.get(['a', 'b']);
   * //=> {c: 'd'}
   * ```
   *
   * @name .get
   * @emits `get` with `key` and `value` as arguments.
   * @param {String} `key` The name of the property to get. Dot-notation may be used.
   * @return {any} Returns the value of `key`
   * @api public
   */

  Cache.prototype.get = function (key) {
    key = D__git_packageInherit_node_modules_toObjectPath(arguments)

    var ctx = prop ? this[prop] : this
    var val = D__git_packageInherit_node_modules_getValue(ctx, key)

    this.emit('get', key, val)
    return val
  }

  /**
   * Return true if app has a stored value for `key`,
   * false only if value is `undefined`.
   *
   * ```js
   * app.set('foo', 'bar');
   * app.has('foo');
   * //=> true
   * ```
   *
   * @name .has
   * @emits `has` with `key` and true or false as arguments.
   * @param {String} `key`
   * @return {Boolean}
   * @api public
   */

  Cache.prototype.has = function (key) {
    key = D__git_packageInherit_node_modules_toObjectPath(arguments)

    var ctx = prop ? this[prop] : this
    var val = D__git_packageInherit_node_modules_getValue(ctx, key)

    var has = typeof val !== 'undefined'
    this.emit('has', key, has)
    return has
  }

  /**
   * Delete one or more properties from the instance.
   *
   * ```js
   * app.del(); // delete all
   * // or
   * app.del('foo');
   * // or
   * app.del(['foo', 'bar']);
   * ```
   * @name .del
   * @emits `del` with the `key` as the only argument.
   * @param {String|Array} `key` Property name or array of property names.
   * @return {Object} Returns the instance for chaining.
   * @api public
   */

  Cache.prototype.del = function (key) {
    if (Array.isArray(key)) {
      this.visit('del', key)
    } else {
      D__git_packageInherit_node_modules_unsetValue(
        prop ? this[prop] : this,
        key,
      )
      this.emit('del', key)
    }
    return this
  }

  /**
   * Reset the entire cache to an empty object.
   *
   * ```js
   * app.clear();
   * ```
   * @api public
   */

  Cache.prototype.clear = function () {
    if (prop) {
      this[prop] = {}
    }
  }

  /**
   * Visit `method` over the properties in the given object, or map
   * visit over the object-elements in an array.
   *
   * @name .visit
   * @param {String} `method` The name of the `base` method to call.
   * @param {Object|Array} `val` The object or array to iterate over.
   * @return {Object} Returns the instance for chaining.
   * @api public
   */

  Cache.prototype.visit = function (method, val) {
    D__git_packageInherit_node_modules_collectionVisit(this, method, val)
    return this
  }

  return Cache
}

/**
 * Cast val to an array
 */

function arrayify$1(val) {
  return val ? (Array.isArray(val) ? val : [val]) : []
}

/**
 * Expose `Cache`
 */

var D__git_packageInherit_node_modules_cacheBase = namespace()

/**
 * Expose `Cache.namespace`
 */

var namespace_1 = namespace
D__git_packageInherit_node_modules_cacheBase.namespace = namespace_1

var isExtendable$3 = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

/*!
 * for-in <https://github.com/jonschlinkert/for-in>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var D__git_packageInherit_node_modules_forIn = function forIn(
  obj,
  fn,
  thisArg,
) {
  for (var key in obj) {
    if (fn.call(thisArg, obj[key], key, obj) === false) {
      break
    }
  }
}

function mixinDeep(target, objects) {
  var len = arguments.length,
    i = 0
  while (++i < len) {
    var obj = arguments[i]
    if (isObject$8(obj)) {
      D__git_packageInherit_node_modules_forIn(obj, copy$1, target)
    }
  }
  return target
}

/**
 * Copy properties from the source object to the
 * target object.
 *
 * @param  {*} `val`
 * @param  {String} `key`
 */

function copy$1(val, key) {
  if (!isValidKey$1(key)) {
    return
  }

  var obj = this[key]
  if (isObject$8(val) && isObject$8(obj)) {
    mixinDeep(obj, val)
  } else {
    this[key] = val
  }
}

/**
 * Returns true if `val` is an object or function.
 *
 * @param  {any} val
 * @return {Boolean}
 */

function isObject$8(val) {
  return isExtendable$3(val) && !Array.isArray(val)
}

/**
 * Returns true if `key` is a valid key to use when extending objects.
 *
 * @param  {String} `key`
 * @return {Boolean}
 */

function isValidKey$1(key) {
  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype'
}
/**
 * Expose `mixinDeep`
 */

var D__git_packageInherit_node_modules_mixinDeep = mixinDeep

/*!
 * pascalcase <https://github.com/jonschlinkert/pascalcase>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

function pascalcase(str) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string.')
  }
  str = str.replace(/([A-Z])/g, ' $1')
  if (str.length === 1) {
    return str.toUpperCase()
  }
  str = str.replace(/^[\W_]+|[\W_]+$/g, '').toLowerCase()
  str = str.charAt(0).toUpperCase() + str.slice(1)
  return str.replace(/[\W_]+(\w|$)/g, function (_, ch) {
    return ch.toUpperCase()
  })
}

var D__git_packageInherit_node_modules_pascalcase = pascalcase

var toString$6 = Object.prototype.toString

/**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */

var D__git_packageInherit_node_modules_defineProperty_node_modules_kindOf = function kindOf(
  val,
) {
  var type = typeof val

  // primitivies
  if (type === 'undefined') {
    return 'undefined'
  }
  if (val === null) {
    return 'null'
  }
  if (val === true || val === false || val instanceof Boolean) {
    return 'boolean'
  }
  if (type === 'string' || val instanceof String) {
    return 'string'
  }
  if (type === 'number' || val instanceof Number) {
    return 'number'
  }

  // functions
  if (type === 'function' || val instanceof Function) {
    if (
      typeof val.constructor.name !== 'undefined' &&
      val.constructor.name.slice(0, 9) === 'Generator'
    ) {
      return 'generatorfunction'
    }
    return 'function'
  }

  // array
  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
    return 'array'
  }

  // check for instances of RegExp and Date before calling `toString`
  if (val instanceof RegExp) {
    return 'regexp'
  }
  if (val instanceof Date) {
    return 'date'
  }

  // other objects
  type = toString$6.call(val)

  if (type === '[object RegExp]') {
    return 'regexp'
  }
  if (type === '[object Date]') {
    return 'date'
  }
  if (type === '[object Arguments]') {
    return 'arguments'
  }
  if (type === '[object Error]') {
    return 'error'
  }
  if (type === '[object Promise]') {
    return 'promise'
  }

  // buffer
  if (isBuffer$4(val)) {
    return 'buffer'
  }

  // es6: Map, WeakMap, Set, WeakSet
  if (type === '[object Set]') {
    return 'set'
  }
  if (type === '[object WeakSet]') {
    return 'weakset'
  }
  if (type === '[object Map]') {
    return 'map'
  }
  if (type === '[object WeakMap]') {
    return 'weakmap'
  }
  if (type === '[object Symbol]') {
    return 'symbol'
  }

  if (type === '[object Map Iterator]') {
    return 'mapiterator'
  }
  if (type === '[object Set Iterator]') {
    return 'setiterator'
  }
  if (type === '[object String Iterator]') {
    return 'stringiterator'
  }
  if (type === '[object Array Iterator]') {
    return 'arrayiterator'
  }

  // typed arrays
  if (type === '[object Int8Array]') {
    return 'int8array'
  }
  if (type === '[object Uint8Array]') {
    return 'uint8array'
  }
  if (type === '[object Uint8ClampedArray]') {
    return 'uint8clampedarray'
  }
  if (type === '[object Int16Array]') {
    return 'int16array'
  }
  if (type === '[object Uint16Array]') {
    return 'uint16array'
  }
  if (type === '[object Int32Array]') {
    return 'int32array'
  }
  if (type === '[object Uint32Array]') {
    return 'uint32array'
  }
  if (type === '[object Float32Array]') {
    return 'float32array'
  }
  if (type === '[object Float64Array]') {
    return 'float64array'
  }

  // must be a plain object
  return 'object'
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer$4(val) {
  return (
    val.constructor &&
    typeof val.constructor.isBuffer === 'function' &&
    val.constructor.isBuffer(val)
  )
}

var toString$7 = Object.prototype.toString

/**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */

var D__git_packageInherit_node_modules_defineProperty_node_modules_isAccessorDescriptor_node_modules_kindOf = function kindOf(
  val,
) {
  // primitivies
  if (typeof val === 'undefined') {
    return 'undefined'
  }
  if (val === null) {
    return 'null'
  }
  if (val === true || val === false || val instanceof Boolean) {
    return 'boolean'
  }
  if (typeof val === 'string' || val instanceof String) {
    return 'string'
  }
  if (typeof val === 'number' || val instanceof Number) {
    return 'number'
  }

  // functions
  if (typeof val === 'function' || val instanceof Function) {
    return 'function'
  }

  // array
  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
    return 'array'
  }

  // check for instances of RegExp and Date before calling `toString`
  if (val instanceof RegExp) {
    return 'regexp'
  }
  if (val instanceof Date) {
    return 'date'
  }

  // other objects
  var type = toString$7.call(val)

  if (type === '[object RegExp]') {
    return 'regexp'
  }
  if (type === '[object Date]') {
    return 'date'
  }
  if (type === '[object Arguments]') {
    return 'arguments'
  }
  if (type === '[object Error]') {
    return 'error'
  }

  // buffer
  if (D__git_packageInherit_node_modules_isBuffer(val)) {
    return 'buffer'
  }

  // es6: Map, WeakMap, Set, WeakSet
  if (type === '[object Set]') {
    return 'set'
  }
  if (type === '[object WeakSet]') {
    return 'weakset'
  }
  if (type === '[object Map]') {
    return 'map'
  }
  if (type === '[object WeakMap]') {
    return 'weakmap'
  }
  if (type === '[object Symbol]') {
    return 'symbol'
  }

  // typed arrays
  if (type === '[object Int8Array]') {
    return 'int8array'
  }
  if (type === '[object Uint8Array]') {
    return 'uint8array'
  }
  if (type === '[object Uint8ClampedArray]') {
    return 'uint8clampedarray'
  }
  if (type === '[object Int16Array]') {
    return 'int16array'
  }
  if (type === '[object Uint16Array]') {
    return 'uint16array'
  }
  if (type === '[object Int32Array]') {
    return 'int32array'
  }
  if (type === '[object Uint32Array]') {
    return 'uint32array'
  }
  if (type === '[object Float32Array]') {
    return 'float32array'
  }
  if (type === '[object Float64Array]') {
    return 'float64array'
  }

  // must be a plain object
  return 'object'
}

// accessor descriptor properties
var accessor$1 = {
  get: 'function',
  set: 'function',
  configurable: 'boolean',
  enumerable: 'boolean',
}

function isAccessorDescriptor$1(obj, prop) {
  if (typeof prop === 'string') {
    var val = Object.getOwnPropertyDescriptor(obj, prop)
    return typeof val !== 'undefined'
  }

  if (
    D__git_packageInherit_node_modules_defineProperty_node_modules_isAccessorDescriptor_node_modules_kindOf(
      obj,
    ) !== 'object'
  ) {
    return false
  }

  if (has$1(obj, 'value') || has$1(obj, 'writable')) {
    return false
  }

  if (!has$1(obj, 'get') || typeof obj.get !== 'function') {
    return false
  }

  // tldr: it's valid to have "set" be undefined
  // "set" might be undefined if `Object.getOwnPropertyDescriptor`
  // was used to get the value, and only `get` was defined by the user
  if (
    has$1(obj, 'set') &&
    typeof obj[key] !== 'function' &&
    typeof obj[key] !== 'undefined'
  ) {
    return false
  }

  for (var key in obj) {
    if (!accessor$1.hasOwnProperty(key)) {
      continue
    }

    if (
      D__git_packageInherit_node_modules_defineProperty_node_modules_isAccessorDescriptor_node_modules_kindOf(
        obj[key],
      ) === accessor$1[key]
    ) {
      continue
    }

    if (typeof obj[key] !== 'undefined') {
      return false
    }
  }
  return true
}

function has$1(obj, key) {
  return {}.hasOwnProperty.call(obj, key)
}

/**
 * Expose `isAccessorDescriptor`
 */

var D__git_packageInherit_node_modules_defineProperty_node_modules_isAccessorDescriptor = isAccessorDescriptor$1

var toString$8 = Object.prototype.toString

/**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */

var D__git_packageInherit_node_modules_defineProperty_node_modules_isDataDescriptor_node_modules_kindOf = function kindOf(
  val,
) {
  // primitivies
  if (typeof val === 'undefined') {
    return 'undefined'
  }
  if (val === null) {
    return 'null'
  }
  if (val === true || val === false || val instanceof Boolean) {
    return 'boolean'
  }
  if (typeof val === 'string' || val instanceof String) {
    return 'string'
  }
  if (typeof val === 'number' || val instanceof Number) {
    return 'number'
  }

  // functions
  if (typeof val === 'function' || val instanceof Function) {
    return 'function'
  }

  // array
  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
    return 'array'
  }

  // check for instances of RegExp and Date before calling `toString`
  if (val instanceof RegExp) {
    return 'regexp'
  }
  if (val instanceof Date) {
    return 'date'
  }

  // other objects
  var type = toString$8.call(val)

  if (type === '[object RegExp]') {
    return 'regexp'
  }
  if (type === '[object Date]') {
    return 'date'
  }
  if (type === '[object Arguments]') {
    return 'arguments'
  }
  if (type === '[object Error]') {
    return 'error'
  }

  // buffer
  if (D__git_packageInherit_node_modules_isBuffer(val)) {
    return 'buffer'
  }

  // es6: Map, WeakMap, Set, WeakSet
  if (type === '[object Set]') {
    return 'set'
  }
  if (type === '[object WeakSet]') {
    return 'weakset'
  }
  if (type === '[object Map]') {
    return 'map'
  }
  if (type === '[object WeakMap]') {
    return 'weakmap'
  }
  if (type === '[object Symbol]') {
    return 'symbol'
  }

  // typed arrays
  if (type === '[object Int8Array]') {
    return 'int8array'
  }
  if (type === '[object Uint8Array]') {
    return 'uint8array'
  }
  if (type === '[object Uint8ClampedArray]') {
    return 'uint8clampedarray'
  }
  if (type === '[object Int16Array]') {
    return 'int16array'
  }
  if (type === '[object Uint16Array]') {
    return 'uint16array'
  }
  if (type === '[object Int32Array]') {
    return 'int32array'
  }
  if (type === '[object Uint32Array]') {
    return 'uint32array'
  }
  if (type === '[object Float32Array]') {
    return 'float32array'
  }
  if (type === '[object Float64Array]') {
    return 'float64array'
  }

  // must be a plain object
  return 'object'
}

// data descriptor properties
var data = {
  configurable: 'boolean',
  enumerable: 'boolean',
  writable: 'boolean',
}

function isDataDescriptor(obj, prop) {
  if (
    D__git_packageInherit_node_modules_defineProperty_node_modules_isDataDescriptor_node_modules_kindOf(
      obj,
    ) !== 'object'
  ) {
    return false
  }

  if (typeof prop === 'string') {
    var val = Object.getOwnPropertyDescriptor(obj, prop)
    return typeof val !== 'undefined'
  }

  if (!('value' in obj) && !('writable' in obj)) {
    return false
  }

  for (var key in obj) {
    if (key === 'value') continue

    if (!data.hasOwnProperty(key)) {
      continue
    }

    if (
      D__git_packageInherit_node_modules_defineProperty_node_modules_isDataDescriptor_node_modules_kindOf(
        obj[key],
      ) === data[key]
    ) {
      continue
    }

    if (typeof obj[key] !== 'undefined') {
      return false
    }
  }
  return true
}

/**
 * Expose `isDataDescriptor`
 */

var D__git_packageInherit_node_modules_defineProperty_node_modules_isDataDescriptor = isDataDescriptor

var D__git_packageInherit_node_modules_defineProperty_node_modules_isDescriptor = function isDescriptor(
  obj,
  key,
) {
  if (
    D__git_packageInherit_node_modules_defineProperty_node_modules_kindOf(
      obj,
    ) !== 'object'
  ) {
    return false
  }
  if ('get' in obj) {
    return D__git_packageInherit_node_modules_defineProperty_node_modules_isAccessorDescriptor(
      obj,
      key,
    )
  }
  return D__git_packageInherit_node_modules_defineProperty_node_modules_isDataDescriptor(
    obj,
    key,
  )
}

var D__git_packageInherit_node_modules_defineProperty = function defineProperty(
  obj,
  prop,
  val,
) {
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('expected an object or function.')
  }

  if (typeof prop !== 'string') {
    throw new TypeError('expected `prop` to be a string.')
  }

  if (
    D__git_packageInherit_node_modules_defineProperty_node_modules_isDescriptor(
      val,
    ) &&
    ('set' in val || 'get' in val)
  ) {
    return Object.defineProperty(obj, prop, val)
  }

  return Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })
}

/*!
 * copy-descriptor <https://github.com/jonschlinkert/copy-descriptor>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/**
 * Copy a descriptor from one object to another.
 *
 * ```js
 * function App() {
 *   this.cache = {};
 * }
 * App.prototype.set = function(key, val) {
 *   this.cache[key] = val;
 *   return this;
 * };
 * Object.defineProperty(App.prototype, 'count', {
 *   get: function() {
 *     return Object.keys(this.cache).length;
 *   }
 * });
 *
 * copy(App.prototype, 'count', 'len');
 *
 * // create an instance
 * var app = new App();
 *
 * app.set('a', true);
 * app.set('b', true);
 * app.set('c', true);
 *
 * console.log(app.count);
 * //=> 3
 * console.log(app.len);
 * //=> 3
 * ```
 * @name copy
 * @param {Object} `receiver` The target object
 * @param {Object} `provider` The provider object
 * @param {String} `from` The key to copy on provider.
 * @param {String} `to` Optionally specify a new key name to use.
 * @return {Object}
 * @api public
 */

var D__git_packageInherit_node_modules_copyDescriptor = function copyDescriptor(
  receiver,
  provider,
  from,
  to,
) {
  if (!isObject$9(provider) && typeof provider !== 'function') {
    to = from
    from = provider
    provider = receiver
  }
  if (!isObject$9(receiver) && typeof receiver !== 'function') {
    throw new TypeError('expected the first argument to be an object')
  }
  if (!isObject$9(provider) && typeof provider !== 'function') {
    throw new TypeError('expected provider to be an object')
  }

  if (typeof to !== 'string') {
    to = from
  }
  if (typeof from !== 'string') {
    throw new TypeError('expected key to be a string')
  }

  if (!(from in provider)) {
    throw new Error('property "' + from + '" does not exist')
  }

  var val = Object.getOwnPropertyDescriptor(provider, from)
  if (val) Object.defineProperty(receiver, to, val)
}

function isObject$9(val) {
  return {}.toString.call(val) === '[object Object]'
}

/**
 * Copy static properties, prototype properties, and descriptors from one object to another.
 *
 * ```js
 * function App() {}
 * var proto = App.prototype;
 * App.prototype.set = function() {};
 * App.prototype.get = function() {};
 *
 * var obj = {};
 * copy(obj, proto);
 * ```
 * @param {Object} `receiver`
 * @param {Object} `provider`
 * @param {String|Array} `omit` One or more properties to omit
 * @return {Object}
 * @api public
 */

function copy$2(receiver, provider, omit) {
  if (!isObject$a(receiver)) {
    throw new TypeError('expected receiving object to be an object.')
  }
  if (!isObject$a(provider)) {
    throw new TypeError('expected providing object to be an object.')
  }

  var props = nativeKeys(provider)
  var keys = Object.keys(provider)
  var len = props.length
  omit = arrayify$2(omit)

  while (len--) {
    var key = props[len]

    if (has$2(keys, key)) {
      D__git_packageInherit_node_modules_defineProperty(
        receiver,
        key,
        provider[key],
      )
    } else if (!(key in receiver) && !has$2(omit, key)) {
      D__git_packageInherit_node_modules_copyDescriptor(receiver, provider, key)
    }
  }
}
/**
 * Return true if the given value is an object or function
 */

function isObject$a(val) {
  return (
    D__git_packageInherit_node_modules_kindOf(val) === 'object' ||
    typeof val === 'function'
  )
}

/**
 * Returns true if an array has any of the given elements, or an
 * object has any of the give keys.
 *
 * ```js
 * has(['a', 'b', 'c'], 'c');
 * //=> true
 *
 * has(['a', 'b', 'c'], ['c', 'z']);
 * //=> true
 *
 * has({a: 'b', c: 'd'}, ['c', 'z']);
 * //=> true
 * ```
 * @param {Object} `obj`
 * @param {String|Array} `val`
 * @return {Boolean}
 */

function has$2(obj, val) {
  val = arrayify$2(val)
  var len = val.length

  if (isObject$a(obj)) {
    for (var key in obj) {
      if (val.indexOf(key) > -1) {
        return true
      }
    }

    var keys = nativeKeys(obj)
    return has$2(keys, val)
  }

  if (Array.isArray(obj)) {
    var arr = obj
    while (len--) {
      if (arr.indexOf(val[len]) > -1) {
        return true
      }
    }
    return false
  }

  throw new TypeError('expected an array or object.')
}

/**
 * Cast the given value to an array.
 *
 * ```js
 * arrayify('foo');
 * //=> ['foo']
 *
 * arrayify(['foo']);
 * //=> ['foo']
 * ```
 *
 * @param {String|Array} `val`
 * @return {Array}
 */

function arrayify$2(val) {
  return val ? (Array.isArray(val) ? val : [val]) : []
}

/**
 * Returns true if a value has a `contructor`
 *
 * ```js
 * hasConstructor({});
 * //=> true
 *
 * hasConstructor(Object.create(null));
 * //=> false
 * ```
 * @param  {Object} `value`
 * @return {Boolean}
 */

function hasConstructor(val) {
  return isObject$a(val) && typeof val.constructor !== 'undefined'
}

/**
 * Get the native `ownPropertyNames` from the constructor of the
 * given `object`. An empty array is returned if the object does
 * not have a constructor.
 *
 * ```js
 * nativeKeys({a: 'b', b: 'c', c: 'd'})
 * //=> ['a', 'b', 'c']
 *
 * nativeKeys(function(){})
 * //=> ['length', 'caller']
 * ```
 *
 * @param  {Object} `obj` Object that has a `constructor`.
 * @return {Array} Array of keys.
 */

function nativeKeys(val) {
  if (!hasConstructor(val)) return []
  return Object.getOwnPropertyNames(val)
}

/**
 * Expose `copy`
 */

var D__git_packageInherit_node_modules_objectCopy = copy$2

/**
 * Expose `copy.has` for tests
 */

var has_1 = has$2
D__git_packageInherit_node_modules_objectCopy.has = has_1

/**
 * Returns a function for extending the static properties,
 * prototype properties, and descriptors from the `Parent`
 * constructor onto `Child` constructors.
 *
 * ```js
 * var extend = require('static-extend');
 * Parent.extend = extend(Parent);
 *
 * // optionally pass a custom merge function as the second arg
 * Parent.extend = extend(Parent, function(Child) {
 *   Child.prototype.mixin = function(key, val) {
 *     Child.prototype[key] = val;
 *   };
 * });
 *
 * // extend "child" constructors
 * Parent.extend(Child);
 *
 * // optionally define prototype methods as the second arg
 * Parent.extend(Child, {
 *   foo: function() {},
 *   bar: function() {}
 * });
 * ```
 * @param {Function} `Parent` Parent ctor
 * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.
 *   @param {Function} `Child` Child ctor
 *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.
 *   @return {Object}
 * @api public
 */

function extend$1(Parent, extendFn) {
  if (typeof Parent !== 'function') {
    throw new TypeError('expected Parent to be a function.')
  }

  return function (Ctor, proto) {
    if (typeof Ctor !== 'function') {
      throw new TypeError('expected Ctor to be a function.')
    }

    util__default['default'].inherits(Ctor, Parent)
    D__git_packageInherit_node_modules_objectCopy(Ctor, Parent)

    // proto can be null or a plain object
    if (typeof proto === 'object') {
      var obj = Object.create(proto)

      for (var k in obj) {
        Ctor.prototype[k] = obj[k]
      }
    }

    // keep a reference to the parent prototype
    D__git_packageInherit_node_modules_defineProperty(
      Ctor.prototype,
      '_parent_',
      {
        configurable: true,
        set: function () {},
        get: function () {
          return Parent.prototype
        },
      },
    )

    if (typeof extendFn === 'function') {
      extendFn(Ctor, Parent)
    }

    Ctor.extend = extend$1(Ctor, extendFn)
  }
}
/**
 * Expose `extend`
 */

var D__git_packageInherit_node_modules_staticExtend = extend$1

var D__git_packageInherit_node_modules_classUtils = createCommonjsModule(
  function (module) {
    /**
     * Expose class utils
     */

    var cu = module.exports

    /**
     * Expose class utils: `cu`
     */

    cu.isObject = function isObject(val) {
      return isobject(val) || typeof val === 'function'
    }

    /**
     * Returns true if an array has any of the given elements, or an
     * object has any of the give keys.
     *
     * ```js
     * cu.has(['a', 'b', 'c'], 'c');
     * //=> true
     *
     * cu.has(['a', 'b', 'c'], ['c', 'z']);
     * //=> true
     *
     * cu.has({a: 'b', c: 'd'}, ['c', 'z']);
     * //=> true
     * ```
     * @param {Object} `obj`
     * @param {String|Array} `val`
     * @return {Boolean}
     * @api public
     */

    cu.has = function has(obj, val) {
      val = cu.arrayify(val)
      var len = val.length

      if (cu.isObject(obj)) {
        for (var key in obj) {
          if (val.indexOf(key) > -1) {
            return true
          }
        }

        var keys = cu.nativeKeys(obj)
        return cu.has(keys, val)
      }

      if (Array.isArray(obj)) {
        var arr = obj
        while (len--) {
          if (arr.indexOf(val[len]) > -1) {
            return true
          }
        }
        return false
      }

      throw new TypeError('expected an array or object.')
    }

    /**
     * Returns true if an array or object has all of the given values.
     *
     * ```js
     * cu.hasAll(['a', 'b', 'c'], 'c');
     * //=> true
     *
     * cu.hasAll(['a', 'b', 'c'], ['c', 'z']);
     * //=> false
     *
     * cu.hasAll({a: 'b', c: 'd'}, ['c', 'z']);
     * //=> false
     * ```
     * @param {Object|Array} `val`
     * @param {String|Array} `values`
     * @return {Boolean}
     * @api public
     */

    cu.hasAll = function hasAll(val, values) {
      values = cu.arrayify(values)
      var len = values.length
      while (len--) {
        if (!cu.has(val, values[len])) {
          return false
        }
      }
      return true
    }

    /**
     * Cast the given value to an array.
     *
     * ```js
     * cu.arrayify('foo');
     * //=> ['foo']
     *
     * cu.arrayify(['foo']);
     * //=> ['foo']
     * ```
     *
     * @param {String|Array} `val`
     * @return {Array}
     * @api public
     */

    cu.arrayify = function arrayify(val) {
      return val ? (Array.isArray(val) ? val : [val]) : []
    }

    /**
     * Noop
     */

    cu.noop = function noop() {
      return
    }

    /**
     * Returns the first argument passed to the function.
     */

    cu.identity = function identity(val) {
      return val
    }

    /**
     * Returns true if a value has a `contructor`
     *
     * ```js
     * cu.hasConstructor({});
     * //=> true
     *
     * cu.hasConstructor(Object.create(null));
     * //=> false
     * ```
     * @param  {Object} `value`
     * @return {Boolean}
     * @api public
     */

    cu.hasConstructor = function hasConstructor(val) {
      return cu.isObject(val) && typeof val.constructor !== 'undefined'
    }

    /**
     * Get the native `ownPropertyNames` from the constructor of the
     * given `object`. An empty array is returned if the object does
     * not have a constructor.
     *
     * ```js
     * cu.nativeKeys({a: 'b', b: 'c', c: 'd'})
     * //=> ['a', 'b', 'c']
     *
     * cu.nativeKeys(function(){})
     * //=> ['length', 'caller']
     * ```
     *
     * @param  {Object} `obj` Object that has a `constructor`.
     * @return {Array} Array of keys.
     * @api public
     */

    cu.nativeKeys = function nativeKeys(val) {
      if (!cu.hasConstructor(val)) return []
      var keys = Object.getOwnPropertyNames(val)
      if ('caller' in val) keys.push('caller')
      return keys
    }

    /**
     * Returns property descriptor `key` if it's an "own" property
     * of the given object.
     *
     * ```js
     * function App() {}
     * Object.defineProperty(App.prototype, 'count', {
     *   get: function() {
     *     return Object.keys(this).length;
     *   }
     * });
     * cu.getDescriptor(App.prototype, 'count');
     * // returns:
     * // {
     * //   get: [Function],
     * //   set: undefined,
     * //   enumerable: false,
     * //   configurable: false
     * // }
     * ```
     *
     * @param {Object} `obj`
     * @param {String} `key`
     * @return {Object} Returns descriptor `key`
     * @api public
     */

    cu.getDescriptor = function getDescriptor(obj, key) {
      if (!cu.isObject(obj)) {
        throw new TypeError('expected an object.')
      }
      if (typeof key !== 'string') {
        throw new TypeError('expected key to be a string.')
      }
      return Object.getOwnPropertyDescriptor(obj, key)
    }

    /**
     * Copy a descriptor from one object to another.
     *
     * ```js
     * function App() {}
     * Object.defineProperty(App.prototype, 'count', {
     *   get: function() {
     *     return Object.keys(this).length;
     *   }
     * });
     * var obj = {};
     * cu.copyDescriptor(obj, App.prototype, 'count');
     * ```
     * @param {Object} `receiver`
     * @param {Object} `provider`
     * @param {String} `name`
     * @return {Object}
     * @api public
     */

    cu.copyDescriptor = function copyDescriptor(receiver, provider, name) {
      if (!cu.isObject(receiver)) {
        throw new TypeError('expected receiving object to be an object.')
      }
      if (!cu.isObject(provider)) {
        throw new TypeError('expected providing object to be an object.')
      }
      if (typeof name !== 'string') {
        throw new TypeError('expected name to be a string.')
      }

      var val = cu.getDescriptor(provider, name)
      if (val) Object.defineProperty(receiver, name, val)
    }

    /**
     * Copy static properties, prototype properties, and descriptors
     * from one object to another.
     *
     * @param {Object} `receiver`
     * @param {Object} `provider`
     * @param {String|Array} `omit` One or more properties to omit
     * @return {Object}
     * @api public
     */

    cu.copy = function copy(receiver, provider, omit) {
      if (!cu.isObject(receiver)) {
        throw new TypeError('expected receiving object to be an object.')
      }
      if (!cu.isObject(provider)) {
        throw new TypeError('expected providing object to be an object.')
      }
      var props = Object.getOwnPropertyNames(provider)
      var keys = Object.keys(provider)
      var len = props.length,
        key
      omit = cu.arrayify(omit)

      while (len--) {
        key = props[len]

        if (cu.has(keys, key)) {
          D__git_packageInherit_node_modules_defineProperty(
            receiver,
            key,
            provider[key],
          )
        } else if (!(key in receiver) && !cu.has(omit, key)) {
          cu.copyDescriptor(receiver, provider, key)
        }
      }
    }

    /**
     * Inherit the static properties, prototype properties, and descriptors
     * from of an object.
     *
     * @param {Object} `receiver`
     * @param {Object} `provider`
     * @param {String|Array} `omit` One or more properties to omit
     * @return {Object}
     * @api public
     */

    cu.inherit = function inherit(receiver, provider, omit) {
      if (!cu.isObject(receiver)) {
        throw new TypeError('expected receiving object to be an object.')
      }
      if (!cu.isObject(provider)) {
        throw new TypeError('expected providing object to be an object.')
      }

      var keys = []
      for (var key in provider) {
        keys.push(key)
        receiver[key] = provider[key]
      }

      keys = keys.concat(cu.arrayify(omit))

      var a = provider.prototype || provider
      var b = receiver.prototype || receiver
      cu.copy(b, a, keys)
    }

    /**
     * Returns a function for extending the static properties,
     * prototype properties, and descriptors from the `Parent`
     * constructor onto `Child` constructors.
     *
     * ```js
     * var extend = cu.extend(Parent);
     * Parent.extend(Child);
     *
     * // optional methods
     * Parent.extend(Child, {
     *   foo: function() {},
     *   bar: function() {}
     * });
     * ```
     * @param {Function} `Parent` Parent ctor
     * @param {Function} `extend` Optional extend function to handle custom extensions. Useful when updating methods that require a specific prototype.
     *   @param {Function} `Child` Child ctor
     *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.
     *   @return {Object}
     * @api public
     */

    cu.extend = function () {
      // keep it lazy, instead of assigning to `cu.extend`
      return D__git_packageInherit_node_modules_staticExtend.apply(
        null,
        arguments,
      )
    }

    /**
     * Bubble up events emitted from static methods on the Parent ctor.
     *
     * @param {Object} `Parent`
     * @param {Array} `events` Event names to bubble up
     * @api public
     */

    cu.bubble = function (Parent, events) {
      events = events || []
      Parent.bubble = function (Child, arr) {
        if (Array.isArray(arr)) {
          events = D__git_packageInherit_node_modules_arrUnion([], events, arr)
        }
        var len = events.length
        var idx = -1
        while (++idx < len) {
          var name = events[idx]
          Parent.on(name, Child.emit.bind(Child, name))
        }
        cu.bubble(Child, events)
      }
    }
  },
)

/**
 * Optionally define a custom `cache` namespace to use.
 */

function namespace$1(name) {
  var Cache = name
    ? D__git_packageInherit_node_modules_cacheBase.namespace(name)
    : D__git_packageInherit_node_modules_cacheBase
  var fns = []

  /**
   * Create an instance of `Base` with the given `config` and `options`.
   *
   * ```js
   * // initialize with `config` and `options`
   * var app = new Base({isApp: true}, {abc: true});
   * app.set('foo', 'bar');
   *
   * // values defined with the given `config` object will be on the root of the instance
   * console.log(app.baz); //=> undefined
   * console.log(app.foo); //=> 'bar'
   * // or use `.get`
   * console.log(app.get('isApp')); //=> true
   * console.log(app.get('foo')); //=> 'bar'
   *
   * // values defined with the given `options` object will be on `app.options
   * console.log(app.options.abc); //=> true
   * ```
   *
   * @param {Object} `config` If supplied, this object is passed to [cache-base][] to merge onto the the instance upon instantiation.
   * @param {Object} `options` If supplied, this object is used to initialize the `base.options` object.
   * @api public
   */

  function Base(config, options) {
    if (!(this instanceof Base)) {
      return new Base(config, options)
    }
    Cache.call(this, config)
    this.is('base')
    this.initBase(config, options)
  }

  /**
   * Inherit cache-base
   */

  util__default['default'].inherits(Base, Cache)

  /**
   * Add static emitter methods
   */

  D__git_packageInherit_node_modules_componentEmitter(Base)

  /**
   * Initialize `Base` defaults with the given `config` object
   */

  Base.prototype.initBase = function (config, options) {
    this.options = D__git_packageInherit_node_modules_mixinDeep(
      {},
      this.options,
      options,
    )
    this.cache = this.cache || {}
    this.define('registered', {})
    if (name) this[name] = {}

    // make `app._callbacks` non-enumerable
    this.define('_callbacks', this._callbacks)
    if (isobject(config)) {
      this.visit('set', config)
    }
    Base.run(this, 'use', fns)
  }

  /**
   * Set the given `name` on `app._name` and `app.is*` properties. Used for doing
   * lookups in plugins.
   *
   * ```js
   * app.is('foo');
   * console.log(app._name);
   * //=> 'foo'
   * console.log(app.isFoo);
   * //=> true
   * app.is('bar');
   * console.log(app.isFoo);
   * //=> true
   * console.log(app.isBar);
   * //=> true
   * console.log(app._name);
   * //=> 'bar'
   * ```
   * @name .is
   * @param {String} `name`
   * @return {Boolean}
   * @api public
   */

  Base.prototype.is = function (name) {
    if (typeof name !== 'string') {
      throw new TypeError('expected name to be a string')
    }
    this.define(
      'is' + D__git_packageInherit_node_modules_pascalcase(name),
      true,
    )
    this.define('_name', name)
    this.define('_appname', name)
    return this
  }

  /**
   * Returns true if a plugin has already been registered on an instance.
   *
   * Plugin implementors are encouraged to use this first thing in a plugin
   * to prevent the plugin from being called more than once on the same
   * instance.
   *
   * ```js
   * var base = new Base();
   * base.use(function(app) {
   *   if (app.isRegistered('myPlugin')) return;
   *   // do stuff to `app`
   * });
   *
   * // to also record the plugin as being registered
   * base.use(function(app) {
   *   if (app.isRegistered('myPlugin', true)) return;
   *   // do stuff to `app`
   * });
   * ```
   * @name .isRegistered
   * @emits `plugin` Emits the name of the plugin being registered. Useful for unit tests, to ensure plugins are only registered once.
   * @param {String} `name` The plugin name.
   * @param {Boolean} `register` If the plugin if not already registered, to record it as being registered pass `true` as the second argument.
   * @return {Boolean} Returns true if a plugin is already registered.
   * @api public
   */

  Base.prototype.isRegistered = function (name, register) {
    if (this.registered.hasOwnProperty(name)) {
      return true
    }
    if (register !== false) {
      this.registered[name] = true
      this.emit('plugin', name)
    }
    return false
  }

  /**
   * Define a plugin function to be called immediately upon init. Plugins are chainable
   * and expose the following arguments to the plugin function:
   *
   * - `app`: the current instance of `Base`
   * - `base`: the [first ancestor instance](#base) of `Base`
   *
   * ```js
   * var app = new Base()
   *   .use(foo)
   *   .use(bar)
   *   .use(baz)
   * ```
   * @name .use
   * @param {Function} `fn` plugin function to call
   * @return {Object} Returns the item instance for chaining.
   * @api public
   */

  Base.prototype.use = function (fn) {
    fn.call(this, this)
    return this
  }

  /**
   * The `.define` method is used for adding non-enumerable property on the instance.
   * Dot-notation is **not supported** with `define`.
   *
   * ```js
   * // arbitrary `render` function using lodash `template`
   * app.define('render', function(str, locals) {
   *   return _.template(str)(locals);
   * });
   * ```
   * @name .define
   * @param {String} `key` The name of the property to define.
   * @param {any} `value`
   * @return {Object} Returns the instance for chaining.
   * @api public
   */

  Base.prototype.define = function (key, val) {
    if (isobject(key)) {
      return this.visit('define', key)
    }
    D__git_packageInherit_node_modules_base_node_modules_defineProperty(
      this,
      key,
      val,
    )
    return this
  }

  /**
   * Mix property `key` onto the Base prototype. If base is inherited using
   * `Base.extend` this method will be overridden by a new `mixin` method that will
   * only add properties to the prototype of the inheriting application.
   *
   * ```js
   * app.mixin('foo', function() {
   *   // do stuff
   * });
   * ```
   * @name .mixin
   * @param {String} `key`
   * @param {Object|Array} `val`
   * @return {Object} Returns the `base` instance for chaining.
   * @api public
   */

  Base.prototype.mixin = function (key, val) {
    Base.prototype[key] = val
    return this
  }

  /**
   * Non-enumberable mixin array, used by the static [Base.mixin]() method.
   */

  Base.prototype.mixins = Base.prototype.mixins || []

  /**
   * Getter/setter used when creating nested instances of `Base`, for storing a reference
   * to the first ancestor instance. This works by setting an instance of `Base` on the `parent`
   * property of a "child" instance. The `base` property defaults to the current instance if
   * no `parent` property is defined.
   *
   * ```js
   * // create an instance of `Base`, this is our first ("base") instance
   * var first = new Base();
   * first.foo = 'bar'; // arbitrary property, to make it easier to see what's happening later
   *
   * // create another instance
   * var second = new Base();
   * // create a reference to the first instance (`first`)
   * second.parent = first;
   *
   * // create another instance
   * var third = new Base();
   * // create a reference to the previous instance (`second`)
   * // repeat this pattern every time a "child" instance is created
   * third.parent = second;
   *
   * // we can always access the first instance using the `base` property
   * console.log(first.base.foo);
   * //=> 'bar'
   * console.log(second.base.foo);
   * //=> 'bar'
   * console.log(third.base.foo);
   * //=> 'bar'
   * // and now you know how to get to third base ;)
   * ```
   * @name .base
   * @api public
   */

  Object.defineProperty(Base.prototype, 'base', {
    configurable: true,
    get: function () {
      return this.parent ? this.parent.base : this
    },
  })

  /**
   * Static method for adding global plugin functions that will
   * be added to an instance when created.
   *
   * ```js
   * Base.use(function(app) {
   *   app.foo = 'bar';
   * });
   * var app = new Base();
   * console.log(app.foo);
   * //=> 'bar'
   * ```
   * @name #use
   * @param {Function} `fn` Plugin function to use on each instance.
   * @return {Object} Returns the `Base` constructor for chaining
   * @api public
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'use',
    function (fn) {
      fns.push(fn)
      return Base
    },
  )

  /**
   * Run an array of functions by passing each function
   * to a method on the given object specified by the given property.
   *
   * @param  {Object} `obj` Object containing method to use.
   * @param  {String} `prop` Name of the method on the object to use.
   * @param  {Array} `arr` Array of functions to pass to the method.
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'run',
    function (obj, prop, arr) {
      var len = arr.length,
        i = 0
      while (len--) {
        obj[prop](arr[i++])
      }
      return Base
    },
  )

  /**
   * Static method for inheriting the prototype and static methods of the `Base` class.
   * This method greatly simplifies the process of creating inheritance-based applications.
   * See [static-extend][] for more details.
   *
   * ```js
   * var extend = cu.extend(Parent);
   * Parent.extend(Child);
   *
   * // optional methods
   * Parent.extend(Child, {
   *   foo: function() {},
   *   bar: function() {}
   * });
   * ```
   * @name #extend
   * @param {Function} `Ctor` constructor to extend
   * @param {Object} `methods` Optional prototype properties to mix in.
   * @return {Object} Returns the `Base` constructor for chaining
   * @api public
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'extend',
    D__git_packageInherit_node_modules_classUtils.extend(
      Base,
      function (Ctor, Parent) {
        Ctor.prototype.mixins = Ctor.prototype.mixins || []

        D__git_packageInherit_node_modules_base_node_modules_defineProperty(
          Ctor,
          'mixin',
          function (fn) {
            var mixin = fn(Ctor.prototype, Ctor)
            if (typeof mixin === 'function') {
              Ctor.prototype.mixins.push(mixin)
            }
            return Ctor
          },
        )

        D__git_packageInherit_node_modules_base_node_modules_defineProperty(
          Ctor,
          'mixins',
          function (Child) {
            Base.run(Child, 'mixin', Ctor.prototype.mixins)
            return Ctor
          },
        )

        Ctor.prototype.mixin = function (key, value) {
          Ctor.prototype[key] = value
          return this
        }
        return Base
      },
    ),
  )

  /**
   * Used for adding methods to the `Base` prototype, and/or to the prototype of child instances.
   * When a mixin function returns a function, the returned function is pushed onto the `.mixins`
   * array, making it available to be used on inheriting classes whenever `Base.mixins()` is
   * called (e.g. `Base.mixins(Child)`).
   *
   * ```js
   * Base.mixin(function(proto) {
   *   proto.foo = function(msg) {
   *     return 'foo ' + msg;
   *   };
   * });
   * ```
   * @name #mixin
   * @param {Function} `fn` Function to call
   * @return {Object} Returns the `Base` constructor for chaining
   * @api public
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'mixin',
    function (fn) {
      var mixin = fn(Base.prototype, Base)
      if (typeof mixin === 'function') {
        Base.prototype.mixins.push(mixin)
      }
      return Base
    },
  )

  /**
   * Static method for running global mixin functions against a child constructor.
   * Mixins must be registered before calling this method.
   *
   * ```js
   * Base.extend(Child);
   * Base.mixins(Child);
   * ```
   * @name #mixins
   * @param {Function} `Child` Constructor function of a child class
   * @return {Object} Returns the `Base` constructor for chaining
   * @api public
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'mixins',
    function (Child) {
      Base.run(Child, 'mixin', Base.prototype.mixins)
      return Base
    },
  )

  /**
   * Similar to `util.inherit`, but copies all static properties, prototype properties, and
   * getters/setters from `Provider` to `Receiver`. See [class-utils][]{#inherit} for more details.
   *
   * ```js
   * Base.inherit(Foo, Bar);
   * ```
   * @name #inherit
   * @param {Function} `Receiver` Receiving (child) constructor
   * @param {Function} `Provider` Providing (parent) constructor
   * @return {Object} Returns the `Base` constructor for chaining
   * @api public
   */

  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'inherit',
    D__git_packageInherit_node_modules_classUtils.inherit,
  )
  D__git_packageInherit_node_modules_base_node_modules_defineProperty(
    Base,
    'bubble',
    D__git_packageInherit_node_modules_classUtils.bubble,
  )
  return Base
}

/**
 * Expose `Base` with default settings
 */

var D__git_packageInherit_node_modules_base = namespace$1()

/**
 * Allow users to define a namespace
 */

var namespace_1$1 = namespace$1
D__git_packageInherit_node_modules_base.namespace = namespace_1$1

/*!
 * use <https://github.com/jonschlinkert/use>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var D__git_packageInherit_node_modules_use = function base(app, options) {
  if (!isObject$b(app) && typeof app !== 'function') {
    throw new TypeError('expected an object or function')
  }

  var opts = isObject$b(options) ? options : {}
  var prop = typeof opts.prop === 'string' ? opts.prop : 'fns'
  if (!Array.isArray(app[prop])) {
    define$2(app, prop, [])
  }

  /**
   * Define a plugin function to be passed to use. The only
   * parameter exposed to the plugin is `app`, the object or function.
   * passed to `use(app)`. `app` is also exposed as `this` in plugins.
   *
   * Additionally, **if a plugin returns a function, the function will
   * be pushed onto the `fns` array**, allowing the plugin to be
   * called at a later point by the `run` method.
   *
   * ```js
   * var use = require('use');
   *
   * // define a plugin
   * function foo(app) {
   *   // do stuff
   * }
   *
   * var app = function(){};
   * use(app);
   *
   * // register plugins
   * app.use(foo);
   * app.use(bar);
   * app.use(baz);
   * ```
   * @name .use
   * @param {Function} `fn` plugin function to call
   * @api public
   */

  define$2(app, 'use', use)

  /**
   * Run all plugins on `fns`. Any plugin that returns a function
   * when called by `use` is pushed onto the `fns` array.
   *
   * ```js
   * var config = {};
   * app.run(config);
   * ```
   * @name .run
   * @param {Object} `value` Object to be modified by plugins.
   * @return {Object} Returns the object passed to `run`
   * @api public
   */

  define$2(app, 'run', function (val) {
    if (!isObject$b(val)) return

    if (!val.use || !val.run) {
      define$2(val, prop, val[prop] || [])
      define$2(val, 'use', use)
    }

    if (!val[prop] || val[prop].indexOf(base) === -1) {
      val.use(base)
    }

    var self = this || app
    var fns = self[prop]
    var len = fns.length
    var idx = -1

    while (++idx < len) {
      val.use(fns[idx])
    }
    return val
  })

  /**
   * Call plugin `fn`. If a function is returned push it into the
   * `fns` array to be called by the `run` method.
   */

  function use(type, fn, options) {
    var offset = 1

    if (typeof type === 'string' || Array.isArray(type)) {
      fn = wrap(type, fn)
      offset++
    } else {
      options = fn
      fn = type
    }

    if (typeof fn !== 'function') {
      throw new TypeError('expected a function')
    }

    var self = this || app
    var fns = self[prop]

    var args = [].slice.call(arguments, offset)
    args.unshift(self)

    if (typeof opts.hook === 'function') {
      opts.hook.apply(self, args)
    }

    var val = fn.apply(self, args)
    if (typeof val === 'function' && fns.indexOf(val) === -1) {
      fns.push(val)
    }
    return self
  }

  /**
   * Wrap a named plugin function so that it's only called on objects of the
   * given `type`
   *
   * @param {String} `type`
   * @param {Function} `fn` Plugin function
   * @return {Function}
   */

  function wrap(type, fn) {
    return function plugin() {
      return this.type === type ? fn.apply(this, arguments) : plugin
    }
  }

  return app
}

function isObject$b(val) {
  return val && typeof val === 'object' && !Array.isArray(val)
}

function define$2(obj, key, val) {
  Object.defineProperty(obj, key, {
    configurable: true,
    writable: true,
    value: val,
  })
}

/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var D__git_packageInherit_node_modules_ms = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse$4(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val)
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val),
  )
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse$4(str) {
  str = String(str)
  if (str.length > 100) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str,
  )
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return (
    plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
  )
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

var debug = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug[
    'default'
  ] = createDebug
  exports.coerce = coerce
  exports.disable = disable
  exports.enable = enable
  exports.enabled = enabled
  exports.humanize = D__git_packageInherit_node_modules_ms

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = []
  exports.skips = []

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {}

  /**
   * Previous log timestamp.
   */

  var prevTime

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0,
      i

    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i)
      hash |= 0 // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length]
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {
    function debug() {
      // disabled?
      if (!debug.enabled) return

      var self = debug

      // set `diff` timestamp
      var curr = +new Date()
      var ms = curr - (prevTime || curr)
      self.diff = ms
      self.prev = prevTime
      self.curr = curr
      prevTime = curr

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length)
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i]
      }

      args[0] = exports.coerce(args[0])

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O')
      }

      // apply any `formatters` transformations
      var index = 0
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match
        index++
        var formatter = exports.formatters[format]
        if ('function' === typeof formatter) {
          var val = args[index]
          match = formatter.call(self, val)

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1)
          index--
        }
        return match
      })

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args)

      var logFn = debug.log || exports.log || console.log.bind(console)
      logFn.apply(self, args)
    }

    debug.namespace = namespace
    debug.enabled = exports.enabled(namespace)
    debug.useColors = exports.useColors()
    debug.color = selectColor(namespace)

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug)
    }

    return debug
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces)

    exports.names = []
    exports.skips = []

    var split = (typeof namespaces === 'string' ? namespaces : '').split(
      /[\s,]+/,
    )
    var len = split.length

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?')
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'))
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'))
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('')
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true
      }
    }
    return false
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message
    return val
  }
})

var browser = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug
  exports.log = log
  exports.formatArgs = formatArgs
  exports.save = save
  exports.load = load
  exports.useColors = useColors
  exports.storage =
    'undefined' != typeof chrome && 'undefined' != typeof chrome.storage
      ? chrome.storage.local
      : localstorage()

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson',
  ]

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (
      typeof window !== 'undefined' &&
      window.process &&
      window.process.type === 'renderer'
    ) {
      return true
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (
      (typeof document !== 'undefined' &&
        document.documentElement &&
        document.documentElement.style &&
        document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' &&
        window.console &&
        (window.console.firebug ||
          (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
        parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
    )
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function (v) {
    try {
      return JSON.stringify(v)
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message
    }
  }

  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors

    args[0] =
      (useColors ? '%c' : '') +
      this.namespace +
      (useColors ? ' %c' : ' ') +
      args[0] +
      (useColors ? '%c ' : ' ') +
      '+' +
      exports.humanize(this.diff)

    if (!useColors) return

    var c = 'color: ' + this.color
    args.splice(1, 0, c, 'color: inherit')

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0
    var lastC = 0
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if ('%%' === match) return
      index++
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index
      }
    })

    args.splice(lastC, 0, c)
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return (
      'object' === typeof console &&
      console.log &&
      Function.prototype.apply.call(console.log, console, arguments)
    )
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug')
      } else {
        exports.storage.debug = namespaces
      }
    } catch (e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r
    try {
      r = exports.storage.debug
    } catch (e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG
    }

    return r
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load())

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage
    } catch (e) {}
  }
})

var node = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */

  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug
  exports.init = init
  exports.log = log
  exports.formatArgs = formatArgs
  exports.save = save
  exports.load = load
  exports.useColors = useColors

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1]

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env)
    .filter(function (key) {
      return /^debug_/i.test(key)
    })
    .reduce(function (obj, key) {
      // camel-case
      var prop = key
        .substring(6)
        .toLowerCase()
        .replace(/_([a-z])/g, function (_, k) {
          return k.toUpperCase()
        })

      // coerce string value into JS value
      var val = process.env[key]
      if (/^(yes|on|true|enabled)$/i.test(val)) val = true
      else if (/^(no|off|false|disabled)$/i.test(val)) val = false
      else if (val === 'null') val = null
      else val = Number(val)

      obj[prop] = val
      return obj
    }, {})

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2

  if (1 !== fd && 2 !== fd) {
    util__default['default'].deprecate(function () {},
    'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
  }

  var stream =
    1 === fd
      ? process.stdout
      : 2 === fd
      ? process.stderr
      : createWritableStdioStream(fd)

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty__default['default'].isatty(fd)
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors
    return util__default['default']
      .inspect(v, this.inspectOpts)
      .split('\n')
      .map(function (str) {
        return str.trim()
      })
      .join(' ')
  }

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors
    return util__default['default'].inspect(v, this.inspectOpts)
  }

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace
    var useColors = this.useColors

    if (useColors) {
      var c = this.color
      var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m'

      args[0] = prefix + args[0].split('\n').join('\n' + prefix)
      args.push(
        '\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m',
      )
    } else {
      args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0]
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to `stream`.
   */

  function log() {
    return stream.write(
      util__default['default'].format.apply(
        util__default['default'],
        arguments,
      ) + '\n',
    )
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG
    } else {
      process.env.DEBUG = namespaces
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream(fd) {
    var stream
    var tty_wrap = process.binding('tty_wrap')

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty__default['default'].WriteStream(fd)
        stream._type = 'tty'

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref()
        }
        break

      case 'FILE':
        var fs = fs__default['default']
        stream = new fs.SyncWriteStream(fd, { autoClose: false })
        stream._type = 'fs'
        break

      case 'PIPE':
      case 'TCP':
        var net = require$$2__default['default']
        stream = new net.Socket({
          fd: fd,
          readable: false,
          writable: true,
        })

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false
        stream.read = null
        stream._type = 'pipe'

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref()
        }
        break

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!')
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd

    stream._isStdio = true

    return stream
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init(debug) {
    debug.inspectOpts = {}

    var keys = Object.keys(exports.inspectOpts)
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]]
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load())
})

var D__git_packageInherit_node_modules_debug_src = createCommonjsModule(
  function (module) {
    /**
     * Detect Electron renderer process, which is node, but we should
     * treat as a browser.
     */

    if (typeof process !== 'undefined' && process.type === 'renderer') {
      module.exports = browser
    } else {
      module.exports = node
    }
  },
)

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split(
  '',
)

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
var encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number]
  }
  throw new TypeError('Must be between 0 and 63: ' + number)
}

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
var decode = function (charCode) {
  var bigA = 65 // 'A'
  var bigZ = 90 // 'Z'

  var littleA = 97 // 'a'
  var littleZ = 122 // 'z'

  var zero = 48 // '0'
  var nine = 57 // '9'

  var plus = 43 // '+'
  var slash = 47 // '/'

  var littleOffset = 26
  var numberOffset = 52

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return charCode - bigA
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return charCode - littleA + littleOffset
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return charCode - zero + numberOffset
  }

  // 62: +
  if (charCode == plus) {
    return 62
  }

  // 63: /
  if (charCode == slash) {
    return 63
  }

  // Invalid base64 digit.
  return -1
}

var base64 = {
  encode: encode,
  decode: decode,
}

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1
  var shifted = aValue >> 1
  return isNegative ? -shifted : shifted
}

/**
 * Returns the base 64 VLQ encoded value.
 */
var encode$1 = function base64VLQ_encode(aValue) {
  var encoded = ''
  var digit

  var vlq = toVLQSigned(aValue)

  do {
    digit = vlq & VLQ_BASE_MASK
    vlq >>>= VLQ_BASE_SHIFT
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT
    }
    encoded += base64.encode(digit)
  } while (vlq > 0)

  return encoded
}

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
var decode$1 = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length
  var result = 0
  var shift = 0
  var continuation, digit

  do {
    if (aIndex >= strLen) {
      throw new Error('Expected more digits in base 64 VLQ value.')
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++))
    if (digit === -1) {
      throw new Error('Invalid base64 digit: ' + aStr.charAt(aIndex - 1))
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT)
    digit &= VLQ_BASE_MASK
    result = result + (digit << shift)
    shift += VLQ_BASE_SHIFT
  } while (continuation)

  aOutParam.value = fromVLQSigned(result)
  aOutParam.rest = aIndex
}

var base64Vlq = {
  encode: encode$1,
  decode: decode$1,
}

var util$1 = createCommonjsModule(function (module, exports) {
  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName]
    } else if (arguments.length === 3) {
      return aDefaultValue
    } else {
      throw new Error('"' + aName + '" is a required argument.')
    }
  }
  exports.getArg = getArg

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/
  var dataUrlRegexp = /^data:.+\,.+$/

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp)
    if (!match) {
      return null
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5],
    }
  }
  exports.urlParse = urlParse

  function urlGenerate(aParsedUrl) {
    var url = ''
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':'
    }
    url += '//'
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@'
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host
    }
    if (aParsedUrl.port) {
      url += ':' + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path
    }
    return url
  }
  exports.urlGenerate = urlGenerate

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consecutive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath
    var url = urlParse(aPath)
    if (url) {
      if (!url.path) {
        return aPath
      }
      path = url.path
    }
    var isAbsolute = exports.isAbsolute(path)

    var parts = path.split(/\/+/)
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i]
      if (part === '.') {
        parts.splice(i, 1)
      } else if (part === '..') {
        up++
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up)
          up = 0
        } else {
          parts.splice(i, 2)
          up--
        }
      }
    }
    path = parts.join('/')

    if (path === '') {
      path = isAbsolute ? '/' : '.'
    }

    if (url) {
      url.path = path
      return urlGenerate(url)
    }
    return path
  }
  exports.normalize = normalize

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === '') {
      aRoot = '.'
    }
    if (aPath === '') {
      aPath = '.'
    }
    var aPathUrl = urlParse(aPath)
    var aRootUrl = urlParse(aRoot)
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/'
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme
      }
      return urlGenerate(aPathUrl)
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath
      return urlGenerate(aRootUrl)
    }

    var joined =
      aPath.charAt(0) === '/'
        ? aPath
        : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath)

    if (aRootUrl) {
      aRootUrl.path = joined
      return urlGenerate(aRootUrl)
    }
    return joined
  }
  exports.join = join

  exports.isAbsolute = function (aPath) {
    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp)
  }

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === '') {
      aRoot = '.'
    }

    aRoot = aRoot.replace(/\/$/, '')

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf('/')
      if (index < 0) {
        return aPath
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index)
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath
      }

      ++level
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join('../') + aPath.substr(aRoot.length + 1)
  }
  exports.relative = relative

  var supportsNullProto = (function () {
    var obj = Object.create(null)
    return !('__proto__' in obj)
  })()

  function identity(s) {
    return s
  }

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return '$' + aStr
    }

    return aStr
  }
  exports.toSetString = supportsNullProto ? identity : toSetString

  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1)
    }

    return aStr
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString

  function isProtoString(s) {
    if (!s) {
      return false
    }

    var length = s.length

    if (length < 9 /* "__proto__".length */) {
      return false
    }

    if (
      s.charCodeAt(length - 1) !== 95 /* '_' */ ||
      s.charCodeAt(length - 2) !== 95 /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95 /* '_' */ ||
      s.charCodeAt(length - 9) !== 95 /* '_' */
    ) {
      return false
    }

    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36 /* '$' */) {
        return false
      }
    }

    return true
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = mappingA.source - mappingB.source
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalLine - mappingB.originalLine
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine
    if (cmp !== 0) {
      return cmp
    }

    return mappingA.name - mappingB.name
  }
  exports.compareByOriginalPositions = compareByOriginalPositions

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(
    mappingA,
    mappingB,
    onlyCompareGenerated,
  ) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp
    }

    cmp = mappingA.source - mappingB.source
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalLine - mappingB.originalLine
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn
    if (cmp !== 0) {
      return cmp
    }

    return mappingA.name - mappingB.name
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0
    }

    if (aStr1 > aStr2) {
      return 1
    }

    return -1
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn
    if (cmp !== 0) {
      return cmp
    }

    cmp = strcmp(mappingA.source, mappingB.source)
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalLine - mappingB.originalLine
    if (cmp !== 0) {
      return cmp
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn
    if (cmp !== 0) {
      return cmp
    }

    return strcmp(mappingA.name, mappingB.name)
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated
})

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var has$3 = Object.prototype.hasOwnProperty
var hasNativeMap = typeof Map !== 'undefined'

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = []
  this._set = hasNativeMap ? new Map() : Object.create(null)
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet()
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates)
  }
  return set
}

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap
    ? this._set.size
    : Object.getOwnPropertyNames(this._set).length
}

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util$1.toSetString(aStr)
  var isDuplicate = hasNativeMap ? this.has(aStr) : has$3.call(this._set, sStr)
  var idx = this._array.length
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr)
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx)
    } else {
      this._set[sStr] = idx
    }
  }
}

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr)
  } else {
    var sStr = util$1.toSetString(aStr)
    return has$3.call(this._set, sStr)
  }
}

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr)
    if (idx >= 0) {
      return idx
    }
  } else {
    var sStr = util$1.toSetString(aStr)
    if (has$3.call(this._set, sStr)) {
      return this._set[sStr]
    }
  }

  throw new Error('"' + aStr + '" is not in the set.')
}

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx]
  }
  throw new Error('No element indexed by ' + aIdx)
}

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice()
}

var ArraySet_1 = ArraySet

var arraySet = {
  ArraySet: ArraySet_1,
}

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine
  var lineB = mappingB.generatedLine
  var columnA = mappingA.generatedColumn
  var columnB = mappingB.generatedColumn
  return (
    lineB > lineA ||
    (lineB == lineA && columnB >= columnA) ||
    util$1.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0
  )
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = []
  this._sorted = true
  // Serves as infimum
  this._last = { generatedLine: -1, generatedColumn: 0 }
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach = function MappingList_forEach(
  aCallback,
  aThisArg,
) {
  this._array.forEach(aCallback, aThisArg)
}

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping
    this._array.push(aMapping)
  } else {
    this._sorted = false
    this._array.push(aMapping)
  }
}

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util$1.compareByGeneratedPositionsInflated)
    this._sorted = true
  }
  return this._array
}

var MappingList_1 = MappingList

var mappingList = {
  MappingList: MappingList_1,
}

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var ArraySet$1 = arraySet.ArraySet
var MappingList$1 = mappingList.MappingList

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {}
  }
  this._file = util$1.getArg(aArgs, 'file', null)
  this._sourceRoot = util$1.getArg(aArgs, 'sourceRoot', null)
  this._skipValidation = util$1.getArg(aArgs, 'skipValidation', false)
  this._sources = new ArraySet$1()
  this._names = new ArraySet$1()
  this._mappings = new MappingList$1()
  this._sourcesContents = null
}

SourceMapGenerator.prototype._version = 3

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(
  aSourceMapConsumer,
) {
  var sourceRoot = aSourceMapConsumer.sourceRoot
  var generator = new SourceMapGenerator({
    file: aSourceMapConsumer.file,
    sourceRoot: sourceRoot,
  })
  aSourceMapConsumer.eachMapping(function (mapping) {
    var newMapping = {
      generated: {
        line: mapping.generatedLine,
        column: mapping.generatedColumn,
      },
    }

    if (mapping.source != null) {
      newMapping.source = mapping.source
      if (sourceRoot != null) {
        newMapping.source = util$1.relative(sourceRoot, newMapping.source)
      }

      newMapping.original = {
        line: mapping.originalLine,
        column: mapping.originalColumn,
      }

      if (mapping.name != null) {
        newMapping.name = mapping.name
      }
    }

    generator.addMapping(newMapping)
  })
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile)
    if (content != null) {
      generator.setSourceContent(sourceFile, content)
    }
  })
  return generator
}

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(
  aArgs,
) {
  var generated = util$1.getArg(aArgs, 'generated')
  var original = util$1.getArg(aArgs, 'original', null)
  var source = util$1.getArg(aArgs, 'source', null)
  var name = util$1.getArg(aArgs, 'name', null)

  if (!this._skipValidation) {
    this._validateMapping(generated, original, source, name)
  }

  if (source != null) {
    source = String(source)
    if (!this._sources.has(source)) {
      this._sources.add(source)
    }
  }

  if (name != null) {
    name = String(name)
    if (!this._names.has(name)) {
      this._names.add(name)
    }
  }

  this._mappings.add({
    generatedLine: generated.line,
    generatedColumn: generated.column,
    originalLine: original != null && original.line,
    originalColumn: original != null && original.column,
    source: source,
    name: name,
  })
}

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(
  aSourceFile,
  aSourceContent,
) {
  var source = aSourceFile
  if (this._sourceRoot != null) {
    source = util$1.relative(this._sourceRoot, source)
  }

  if (aSourceContent != null) {
    // Add the source content to the _sourcesContents map.
    // Create a new _sourcesContents map if the property is null.
    if (!this._sourcesContents) {
      this._sourcesContents = Object.create(null)
    }
    this._sourcesContents[util$1.toSetString(source)] = aSourceContent
  } else if (this._sourcesContents) {
    // Remove the source file from the _sourcesContents map.
    // If the _sourcesContents map is empty, set the property to null.
    delete this._sourcesContents[util$1.toSetString(source)]
    if (Object.keys(this._sourcesContents).length === 0) {
      this._sourcesContents = null
    }
  }
}

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(
  aSourceMapConsumer,
  aSourceFile,
  aSourceMapPath,
) {
  var sourceFile = aSourceFile
  // If aSourceFile is omitted, we will use the file property of the SourceMap
  if (aSourceFile == null) {
    if (aSourceMapConsumer.file == null) {
      throw new Error(
        'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.',
      )
    }
    sourceFile = aSourceMapConsumer.file
  }
  var sourceRoot = this._sourceRoot
  // Make "sourceFile" relative if an absolute Url is passed.
  if (sourceRoot != null) {
    sourceFile = util$1.relative(sourceRoot, sourceFile)
  }
  // Applying the SourceMap can add and remove items from the sources and
  // the names array.
  var newSources = new ArraySet$1()
  var newNames = new ArraySet$1()

  // Find mappings for the "sourceFile"
  this._mappings.unsortedForEach(function (mapping) {
    if (mapping.source === sourceFile && mapping.originalLine != null) {
      // Check if it can be mapped by the source map, then update the mapping.
      var original = aSourceMapConsumer.originalPositionFor({
        line: mapping.originalLine,
        column: mapping.originalColumn,
      })
      if (original.source != null) {
        // Copy mapping
        mapping.source = original.source
        if (aSourceMapPath != null) {
          mapping.source = util$1.join(aSourceMapPath, mapping.source)
        }
        if (sourceRoot != null) {
          mapping.source = util$1.relative(sourceRoot, mapping.source)
        }
        mapping.originalLine = original.line
        mapping.originalColumn = original.column
        if (original.name != null) {
          mapping.name = original.name
        }
      }
    }

    var source = mapping.source
    if (source != null && !newSources.has(source)) {
      newSources.add(source)
    }

    var name = mapping.name
    if (name != null && !newNames.has(name)) {
      newNames.add(name)
    }
  }, this)
  this._sources = newSources
  this._names = newNames

  // Copy sourcesContents of applied map.
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile)
    if (content != null) {
      if (aSourceMapPath != null) {
        sourceFile = util$1.join(aSourceMapPath, sourceFile)
      }
      if (sourceRoot != null) {
        sourceFile = util$1.relative(sourceRoot, sourceFile)
      }
      this.setSourceContent(sourceFile, content)
    }
  }, this)
}

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(
  aGenerated,
  aOriginal,
  aSource,
  aName,
) {
  // When aOriginal is truthy but has empty values for .line and .column,
  // it is most likely a programmer error. In this case we throw a very
  // specific error message to try to guide them the right way.
  // For example: https://github.com/Polymer/polymer-bundler/pull/519
  if (
    aOriginal &&
    typeof aOriginal.line !== 'number' &&
    typeof aOriginal.column !== 'number'
  ) {
    throw new Error(
      'original.line and original.column are not numbers -- you probably meant to omit ' +
        'the original mapping entirely and only map the generated position. If so, pass ' +
        'null for the original mapping instead of an object with empty or null values.',
    )
  }

  if (
    aGenerated &&
    'line' in aGenerated &&
    'column' in aGenerated &&
    aGenerated.line > 0 &&
    aGenerated.column >= 0 &&
    !aOriginal &&
    !aSource &&
    !aName
  ) {
    // Case 1.
    return
  } else if (
    aGenerated &&
    'line' in aGenerated &&
    'column' in aGenerated &&
    aOriginal &&
    'line' in aOriginal &&
    'column' in aOriginal &&
    aGenerated.line > 0 &&
    aGenerated.column >= 0 &&
    aOriginal.line > 0 &&
    aOriginal.column >= 0 &&
    aSource
  ) {
    // Cases 2 and 3.
    return
  } else {
    throw new Error(
      'Invalid mapping: ' +
        JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName,
        }),
    )
  }
}

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
  var previousGeneratedColumn = 0
  var previousGeneratedLine = 1
  var previousOriginalColumn = 0
  var previousOriginalLine = 0
  var previousName = 0
  var previousSource = 0
  var result = ''
  var next
  var mapping
  var nameIdx
  var sourceIdx

  var mappings = this._mappings.toArray()
  for (var i = 0, len = mappings.length; i < len; i++) {
    mapping = mappings[i]
    next = ''

    if (mapping.generatedLine !== previousGeneratedLine) {
      previousGeneratedColumn = 0
      while (mapping.generatedLine !== previousGeneratedLine) {
        next += ';'
        previousGeneratedLine++
      }
    } else {
      if (i > 0) {
        if (
          !util$1.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])
        ) {
          continue
        }
        next += ','
      }
    }

    next += base64Vlq.encode(mapping.generatedColumn - previousGeneratedColumn)
    previousGeneratedColumn = mapping.generatedColumn

    if (mapping.source != null) {
      sourceIdx = this._sources.indexOf(mapping.source)
      next += base64Vlq.encode(sourceIdx - previousSource)
      previousSource = sourceIdx

      // lines are stored 0-based in SourceMap spec version 3
      next += base64Vlq.encode(mapping.originalLine - 1 - previousOriginalLine)
      previousOriginalLine = mapping.originalLine - 1

      next += base64Vlq.encode(mapping.originalColumn - previousOriginalColumn)
      previousOriginalColumn = mapping.originalColumn

      if (mapping.name != null) {
        nameIdx = this._names.indexOf(mapping.name)
        next += base64Vlq.encode(nameIdx - previousName)
        previousName = nameIdx
      }
    }

    result += next
  }

  return result
}

SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(
  aSources,
  aSourceRoot,
) {
  return aSources.map(function (source) {
    if (!this._sourcesContents) {
      return null
    }
    if (aSourceRoot != null) {
      source = util$1.relative(aSourceRoot, source)
    }
    var key = util$1.toSetString(source)
    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
      ? this._sourcesContents[key]
      : null
  }, this)
}

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
  var map = {
    version: this._version,
    sources: this._sources.toArray(),
    names: this._names.toArray(),
    mappings: this._serializeMappings(),
  }
  if (this._file != null) {
    map.file = this._file
  }
  if (this._sourceRoot != null) {
    map.sourceRoot = this._sourceRoot
  }
  if (this._sourcesContents) {
    map.sourcesContent = this._generateSourcesContent(
      map.sources,
      map.sourceRoot,
    )
  }

  return map
}

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
  return JSON.stringify(this.toJSON())
}

var SourceMapGenerator_1 = SourceMapGenerator

var sourceMapGenerator = {
  SourceMapGenerator: SourceMapGenerator_1,
}

var binarySearch = createCommonjsModule(function (module, exports) {
  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  exports.GREATEST_LOWER_BOUND = 1
  exports.LEAST_UPPER_BOUND = 2

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow
    var cmp = aCompare(aNeedle, aHaystack[mid], true)
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid
    } else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias)
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1
      } else {
        return mid
      }
    } else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias)
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid
      } else {
        return aLow < 0 ? -1 : aLow
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1
    }

    var index = recursiveSearch(
      -1,
      aHaystack.length,
      aNeedle,
      aHaystack,
      aCompare,
      aBias || exports.GREATEST_LOWER_BOUND,
    )
    if (index < 0) {
      return -1
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break
      }
      --index
    }

    return index
  }
})

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x]
  ary[x] = ary[y]
  ary[y] = temp
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + Math.random() * (high - low))
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r)
    var i = p - 1

    swap(ary, pivotIndex, r)
    var pivot = ary[r]

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1
        swap(ary, i, j)
      }
    }

    swap(ary, i + 1, j)
    var q = i + 1

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1)
    doQuickSort(ary, comparator, q + 1, r)
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
var quickSort_1 = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1)
}

var quickSort = {
  quickSort: quickSort_1,
}

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var ArraySet$2 = arraySet.ArraySet

var quickSort$1 = quickSort.quickSort

function SourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap)
    : new BasicSourceMapConsumer(sourceMap)
}

SourceMapConsumer.fromSourceMap = function (aSourceMap) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap)
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot)
    }

    return this.__generatedMappings
  },
})

SourceMapConsumer.prototype.__originalMappings = null
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot)
    }

    return this.__originalMappings
  },
})

SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(
  aStr,
  index,
) {
  var c = aStr.charAt(index)
  return c === ';' || c === ','
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
  aStr,
  aSourceRoot,
) {
  throw new Error('Subclasses must implement _parseMappings')
}

SourceMapConsumer.GENERATED_ORDER = 1
SourceMapConsumer.ORIGINAL_ORDER = 2

SourceMapConsumer.GREATEST_LOWER_BOUND = 1
SourceMapConsumer.LEAST_UPPER_BOUND = 2

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(
  aCallback,
  aContext,
  aOrder,
) {
  var context = aContext || null
  var order = aOrder || SourceMapConsumer.GENERATED_ORDER

  var mappings
  switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings
      break
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings
      break
    default:
      throw new Error('Unknown order of iteration.')
  }

  var sourceRoot = this.sourceRoot
  mappings
    .map(function (mapping) {
      var source =
        mapping.source === null ? null : this._sources.at(mapping.source)
      if (source != null && sourceRoot != null) {
        source = util$1.join(sourceRoot, source)
      }
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name),
      }
    }, this)
    .forEach(aCallback, context)
}

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: Optional. the column number in the original source.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(
  aArgs,
) {
  var line = util$1.getArg(aArgs, 'line')

  // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
  // returns the index of the closest mapping less than the needle. By
  // setting needle.originalColumn to 0, we thus find the last mapping for
  // the given line, provided such a mapping exists.
  var needle = {
    source: util$1.getArg(aArgs, 'source'),
    originalLine: line,
    originalColumn: util$1.getArg(aArgs, 'column', 0),
  }

  if (this.sourceRoot != null) {
    needle.source = util$1.relative(this.sourceRoot, needle.source)
  }
  if (!this._sources.has(needle.source)) {
    return []
  }
  needle.source = this._sources.indexOf(needle.source)

  var mappings = []

  var index = this._findMapping(
    needle,
    this._originalMappings,
    'originalLine',
    'originalColumn',
    util$1.compareByOriginalPositions,
    binarySearch.LEAST_UPPER_BOUND,
  )
  if (index >= 0) {
    var mapping = this._originalMappings[index]

    if (aArgs.column === undefined) {
      var originalLine = mapping.originalLine

      // Iterate until either we run out of mappings, or we run into
      // a mapping for a different line than the one we found. Since
      // mappings are sorted, this is guaranteed to find all mappings for
      // the line we found.
      while (mapping && mapping.originalLine === originalLine) {
        mappings.push({
          line: util$1.getArg(mapping, 'generatedLine', null),
          column: util$1.getArg(mapping, 'generatedColumn', null),
          lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null),
        })

        mapping = this._originalMappings[++index]
      }
    } else {
      var originalColumn = mapping.originalColumn

      // Iterate until either we run out of mappings, or we run into
      // a mapping for a different line than the one we were searching for.
      // Since mappings are sorted, this is guaranteed to find all mappings for
      // the line we are searching for.
      while (
        mapping &&
        mapping.originalLine === line &&
        mapping.originalColumn == originalColumn
      ) {
        mappings.push({
          line: util$1.getArg(mapping, 'generatedLine', null),
          column: util$1.getArg(mapping, 'generatedColumn', null),
          lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null),
        })

        mapping = this._originalMappings[++index]
      }
    }
  }

  return mappings
}

var SourceMapConsumer_1 = SourceMapConsumer

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The only parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
  }

  var version = util$1.getArg(sourceMap, 'version')
  var sources = util$1.getArg(sourceMap, 'sources')
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util$1.getArg(sourceMap, 'names', [])
  var sourceRoot = util$1.getArg(sourceMap, 'sourceRoot', null)
  var sourcesContent = util$1.getArg(sourceMap, 'sourcesContent', null)
  var mappings = util$1.getArg(sourceMap, 'mappings')
  var file = util$1.getArg(sourceMap, 'file', null)

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version)
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util$1.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot &&
        util$1.isAbsolute(sourceRoot) &&
        util$1.isAbsolute(source)
        ? util$1.relative(sourceRoot, source)
        : source
    })

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet$2.fromArray(names.map(String), true)
  this._sources = ArraySet$2.fromArray(sources, true)

  this.sourceRoot = sourceRoot
  this.sourcesContent = sourcesContent
  this._mappings = mappings
  this.file = file
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype)
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(
  aSourceMap,
) {
  var smc = Object.create(BasicSourceMapConsumer.prototype)

  var names = (smc._names = ArraySet$2.fromArray(
    aSourceMap._names.toArray(),
    true,
  ))
  var sources = (smc._sources = ArraySet$2.fromArray(
    aSourceMap._sources.toArray(),
    true,
  ))
  smc.sourceRoot = aSourceMap._sourceRoot
  smc.sourcesContent = aSourceMap._generateSourcesContent(
    smc._sources.toArray(),
    smc.sourceRoot,
  )
  smc.file = aSourceMap._file

  // Because we are modifying the entries (by converting string sources and
  // names to indices into the sources and names ArraySets), we have to make
  // a copy of the entry or else bad things happen. Shared mutable state
  // strikes again! See github issue #191.

  var generatedMappings = aSourceMap._mappings.toArray().slice()
  var destGeneratedMappings = (smc.__generatedMappings = [])
  var destOriginalMappings = (smc.__originalMappings = [])

  for (var i = 0, length = generatedMappings.length; i < length; i++) {
    var srcMapping = generatedMappings[i]
    var destMapping = new Mapping()
    destMapping.generatedLine = srcMapping.generatedLine
    destMapping.generatedColumn = srcMapping.generatedColumn

    if (srcMapping.source) {
      destMapping.source = sources.indexOf(srcMapping.source)
      destMapping.originalLine = srcMapping.originalLine
      destMapping.originalColumn = srcMapping.originalColumn

      if (srcMapping.name) {
        destMapping.name = names.indexOf(srcMapping.name)
      }

      destOriginalMappings.push(destMapping)
    }

    destGeneratedMappings.push(destMapping)
  }

  quickSort$1(smc.__originalMappings, util$1.compareByOriginalPositions)

  return smc
}

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._sources.toArray().map(function (s) {
      return this.sourceRoot != null ? util$1.join(this.sourceRoot, s) : s
    }, this)
  },
})

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0
  this.generatedColumn = 0
  this.source = null
  this.originalLine = null
  this.originalColumn = null
  this.name = null
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
  aStr,
  aSourceRoot,
) {
  var generatedLine = 1
  var previousGeneratedColumn = 0
  var previousOriginalLine = 0
  var previousOriginalColumn = 0
  var previousSource = 0
  var previousName = 0
  var length = aStr.length
  var index = 0
  var cachedSegments = {}
  var temp = {}
  var originalMappings = []
  var generatedMappings = []
  var mapping, str, segment, end, value

  while (index < length) {
    if (aStr.charAt(index) === ';') {
      generatedLine++
      index++
      previousGeneratedColumn = 0
    } else if (aStr.charAt(index) === ',') {
      index++
    } else {
      mapping = new Mapping()
      mapping.generatedLine = generatedLine

      // Because each offset is encoded relative to the previous one,
      // many segments often have the same encoding. We can exploit this
      // fact by caching the parsed variable length fields of each segment,
      // allowing us to avoid a second parse if we encounter the same
      // segment again.
      for (end = index; end < length; end++) {
        if (this._charIsMappingSeparator(aStr, end)) {
          break
        }
      }
      str = aStr.slice(index, end)

      segment = cachedSegments[str]
      if (segment) {
        index += str.length
      } else {
        segment = []
        while (index < end) {
          base64Vlq.decode(aStr, index, temp)
          value = temp.value
          index = temp.rest
          segment.push(value)
        }

        if (segment.length === 2) {
          throw new Error('Found a source, but no line and column')
        }

        if (segment.length === 3) {
          throw new Error('Found a source and line, but no column')
        }

        cachedSegments[str] = segment
      }

      // Generated column.
      mapping.generatedColumn = previousGeneratedColumn + segment[0]
      previousGeneratedColumn = mapping.generatedColumn

      if (segment.length > 1) {
        // Original source.
        mapping.source = previousSource + segment[1]
        previousSource += segment[1]

        // Original line.
        mapping.originalLine = previousOriginalLine + segment[2]
        previousOriginalLine = mapping.originalLine
        // Lines are stored 0-based
        mapping.originalLine += 1

        // Original column.
        mapping.originalColumn = previousOriginalColumn + segment[3]
        previousOriginalColumn = mapping.originalColumn

        if (segment.length > 4) {
          // Original name.
          mapping.name = previousName + segment[4]
          previousName += segment[4]
        }
      }

      generatedMappings.push(mapping)
      if (typeof mapping.originalLine === 'number') {
        originalMappings.push(mapping)
      }
    }
  }

  quickSort$1(generatedMappings, util$1.compareByGeneratedPositionsDeflated)
  this.__generatedMappings = generatedMappings

  quickSort$1(originalMappings, util$1.compareByOriginalPositions)
  this.__originalMappings = originalMappings
}

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(
  aNeedle,
  aMappings,
  aLineName,
  aColumnName,
  aComparator,
  aBias,
) {
  // To return the position we are searching for, we must first find the
  // mapping for the given position and then return the opposite position it
  // points to. Because the mappings are sorted, we can use binary search to
  // find the best mapping.

  if (aNeedle[aLineName] <= 0) {
    throw new TypeError(
      'Line must be greater than or equal to 1, got ' + aNeedle[aLineName],
    )
  }
  if (aNeedle[aColumnName] < 0) {
    throw new TypeError(
      'Column must be greater than or equal to 0, got ' + aNeedle[aColumnName],
    )
  }

  return binarySearch.search(aNeedle, aMappings, aComparator, aBias)
}

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
  for (var index = 0; index < this._generatedMappings.length; ++index) {
    var mapping = this._generatedMappings[index]

    // Mappings do not contain a field for the last generated columnt. We
    // can come up with an optimistic estimate, however, by assuming that
    // mappings are contiguous (i.e. given two consecutive mappings, the
    // first mapping ends where the second one starts).
    if (index + 1 < this._generatedMappings.length) {
      var nextMapping = this._generatedMappings[index + 1]

      if (mapping.generatedLine === nextMapping.generatedLine) {
        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1
        continue
      }
    }

    // The last mapping for each line spans the entire line.
    mapping.lastGeneratedColumn = Infinity
  }
}

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(
  aArgs,
) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, 'line'),
    generatedColumn: util$1.getArg(aArgs, 'column'),
  }

  var index = this._findMapping(
    needle,
    this._generatedMappings,
    'generatedLine',
    'generatedColumn',
    util$1.compareByGeneratedPositionsDeflated,
    util$1.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND),
  )

  if (index >= 0) {
    var mapping = this._generatedMappings[index]

    if (mapping.generatedLine === needle.generatedLine) {
      var source = util$1.getArg(mapping, 'source', null)
      if (source !== null) {
        source = this._sources.at(source)
        if (this.sourceRoot != null) {
          source = util$1.join(this.sourceRoot, source)
        }
      }
      var name = util$1.getArg(mapping, 'name', null)
      if (name !== null) {
        name = this._names.at(name)
      }
      return {
        source: source,
        line: util$1.getArg(mapping, 'originalLine', null),
        column: util$1.getArg(mapping, 'originalColumn', null),
        name: name,
      }
    }
  }

  return {
    source: null,
    line: null,
    column: null,
    name: null,
  }
}

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
  if (!this.sourcesContent) {
    return false
  }
  return (
    this.sourcesContent.length >= this._sources.size() &&
    !this.sourcesContent.some(function (sc) {
      return sc == null
    })
  )
}

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(
  aSource,
  nullOnMissing,
) {
  if (!this.sourcesContent) {
    return null
  }

  if (this.sourceRoot != null) {
    aSource = util$1.relative(this.sourceRoot, aSource)
  }

  if (this._sources.has(aSource)) {
    return this.sourcesContent[this._sources.indexOf(aSource)]
  }

  var url
  if (this.sourceRoot != null && (url = util$1.urlParse(this.sourceRoot))) {
    // XXX: file:// URIs and absolute paths lead to unexpected behavior for
    // many users. We can help them out when they expect file:// URIs to
    // behave like it would if they were running a local HTTP server. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
    var fileUriAbsPath = aSource.replace(/^file:\/\//, '')
    if (url.scheme == 'file' && this._sources.has(fileUriAbsPath)) {
      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
    }

    if ((!url.path || url.path == '/') && this._sources.has('/' + aSource)) {
      return this.sourcesContent[this._sources.indexOf('/' + aSource)]
    }
  }

  // This function is used recursively from
  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
  // don't want to throw if we can't find the source - we just want to
  // return null, so we provide a flag to exit gracefully.
  if (nullOnMissing) {
    return null
  } else {
    throw new Error('"' + aSource + '" is not in the SourceMap.')
  }
}

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(
  aArgs,
) {
  var source = util$1.getArg(aArgs, 'source')
  if (this.sourceRoot != null) {
    source = util$1.relative(this.sourceRoot, source)
  }
  if (!this._sources.has(source)) {
    return {
      line: null,
      column: null,
      lastColumn: null,
    }
  }
  source = this._sources.indexOf(source)

  var needle = {
    source: source,
    originalLine: util$1.getArg(aArgs, 'line'),
    originalColumn: util$1.getArg(aArgs, 'column'),
  }

  var index = this._findMapping(
    needle,
    this._originalMappings,
    'originalLine',
    'originalColumn',
    util$1.compareByOriginalPositions,
    util$1.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND),
  )

  if (index >= 0) {
    var mapping = this._originalMappings[index]

    if (mapping.source === needle.source) {
      return {
        line: util$1.getArg(mapping, 'generatedLine', null),
        column: util$1.getArg(mapping, 'generatedColumn', null),
        lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null),
      }
    }
  }

  return {
    line: null,
    column: null,
    lastColumn: null,
  }
}

var BasicSourceMapConsumer_1 = BasicSourceMapConsumer

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The only parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
  }

  var version = util$1.getArg(sourceMap, 'version')
  var sections = util$1.getArg(sourceMap, 'sections')

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version)
  }

  this._sources = new ArraySet$2()
  this._names = new ArraySet$2()

  var lastOffset = {
    line: -1,
    column: 0,
  }
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.')
    }
    var offset = util$1.getArg(s, 'offset')
    var offsetLine = util$1.getArg(offset, 'line')
    var offsetColumn = util$1.getArg(offset, 'column')

    if (
      offsetLine < lastOffset.line ||
      (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)
    ) {
      throw new Error('Section offsets must be ordered and non-overlapping.')
    }
    lastOffset = offset

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1,
      },
      consumer: new SourceMapConsumer(util$1.getArg(s, 'map')),
    }
  })
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype)
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = []
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j])
      }
    }
    return sources
  },
})

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(
  aArgs,
) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, 'line'),
    generatedColumn: util$1.getArg(aArgs, 'column'),
  }

  // Find the section containing the generated position we're trying to map
  // to an original position.
  var sectionIndex = binarySearch.search(
    needle,
    this._sections,
    function (needle, section) {
      var cmp = needle.generatedLine - section.generatedOffset.generatedLine
      if (cmp) {
        return cmp
      }

      return needle.generatedColumn - section.generatedOffset.generatedColumn
    },
  )
  var section = this._sections[sectionIndex]

  if (!section) {
    return {
      source: null,
      line: null,
      column: null,
      name: null,
    }
  }

  return section.consumer.originalPositionFor({
    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
    column:
      needle.generatedColumn -
      (section.generatedOffset.generatedLine === needle.generatedLine
        ? section.generatedOffset.generatedColumn - 1
        : 0),
    bias: aArgs.bias,
  })
}

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
  return this._sections.every(function (s) {
    return s.consumer.hasContentsOfAllSources()
  })
}

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(
  aSource,
  nullOnMissing,
) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i]

    var content = section.consumer.sourceContentFor(aSource, true)
    if (content) {
      return content
    }
  }
  if (nullOnMissing) {
    return null
  } else {
    throw new Error('"' + aSource + '" is not in the SourceMap.')
  }
}

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(
  aArgs,
) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i]

    // Only consider this section if the requested source is in the list of
    // sources of the consumer.
    if (
      section.consumer.sources.indexOf(util$1.getArg(aArgs, 'source')) === -1
    ) {
      continue
    }
    var generatedPosition = section.consumer.generatedPositionFor(aArgs)
    if (generatedPosition) {
      var ret = {
        line:
          generatedPosition.line + (section.generatedOffset.generatedLine - 1),
        column:
          generatedPosition.column +
          (section.generatedOffset.generatedLine === generatedPosition.line
            ? section.generatedOffset.generatedColumn - 1
            : 0),
      }
      return ret
    }
  }

  return {
    line: null,
    column: null,
  }
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(
  aStr,
  aSourceRoot,
) {
  this.__generatedMappings = []
  this.__originalMappings = []
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i]
    var sectionMappings = section.consumer._generatedMappings
    for (var j = 0; j < sectionMappings.length; j++) {
      var mapping = sectionMappings[j]

      var source = section.consumer._sources.at(mapping.source)
      if (section.consumer.sourceRoot !== null) {
        source = util$1.join(section.consumer.sourceRoot, source)
      }
      this._sources.add(source)
      source = this._sources.indexOf(source)

      var name = section.consumer._names.at(mapping.name)
      this._names.add(name)
      name = this._names.indexOf(name)

      // The mappings coming from the consumer for the section have
      // generated positions relative to the start of the section, so we
      // need to offset them to be relative to the start of the concatenated
      // generated file.
      var adjustedMapping = {
        source: source,
        generatedLine:
          mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
        generatedColumn:
          mapping.generatedColumn +
          (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: name,
      }

      this.__generatedMappings.push(adjustedMapping)
      if (typeof adjustedMapping.originalLine === 'number') {
        this.__originalMappings.push(adjustedMapping)
      }
    }
  }

  quickSort$1(
    this.__generatedMappings,
    util$1.compareByGeneratedPositionsDeflated,
  )
  quickSort$1(this.__originalMappings, util$1.compareByOriginalPositions)
}

var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer

var sourceMapConsumer = {
  SourceMapConsumer: SourceMapConsumer_1,
  BasicSourceMapConsumer: BasicSourceMapConsumer_1,
  IndexedSourceMapConsumer: IndexedSourceMapConsumer_1,
}

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = '$$$isSourceNode$$$'

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = []
  this.sourceContents = {}
  this.line = aLine == null ? null : aLine
  this.column = aColumn == null ? null : aColumn
  this.source = aSource == null ? null : aSource
  this.name = aName == null ? null : aName
  this[isSourceNode] = true
  if (aChunks != null) this.add(aChunks)
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(
  aGeneratedCode,
  aSourceMapConsumer,
  aRelativePath,
) {
  // The SourceNode we want to fill with the generated code
  // and the SourceMap
  var node = new SourceNode()

  // All even indices of this array are one line of the generated code,
  // while all odd indices are the newlines between two adjacent lines
  // (since `REGEX_NEWLINE` captures its match).
  // Processed fragments are accessed by calling `shiftNextLine`.
  var remainingLines = aGeneratedCode.split(REGEX_NEWLINE)
  var remainingLinesIndex = 0
  var shiftNextLine = function () {
    var lineContents = getNextLine()
    // The last line of a file might not have a newline.
    var newLine = getNextLine() || ''
    return lineContents + newLine

    function getNextLine() {
      return remainingLinesIndex < remainingLines.length
        ? remainingLines[remainingLinesIndex++]
        : undefined
    }
  }

  // We need to remember the position of "remainingLines"
  var lastGeneratedLine = 1,
    lastGeneratedColumn = 0

  // The generate SourceNodes we need a code range.
  // To extract it current and last mapping is used.
  // Here we store the last mapping.
  var lastMapping = null

  aSourceMapConsumer.eachMapping(function (mapping) {
    if (lastMapping !== null) {
      // We add the code from "lastMapping" to "mapping":
      // First check if there is a new line in between.
      if (lastGeneratedLine < mapping.generatedLine) {
        // Associate first line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine())
        lastGeneratedLine++
        lastGeneratedColumn = 0
        // The remaining code is added without mapping
      } else {
        // There is no new line in between.
        // Associate the code between "lastGeneratedColumn" and
        // "mapping.generatedColumn" with "lastMapping"
        var nextLine = remainingLines[remainingLinesIndex]
        var code = nextLine.substr(
          0,
          mapping.generatedColumn - lastGeneratedColumn,
        )
        remainingLines[remainingLinesIndex] = nextLine.substr(
          mapping.generatedColumn - lastGeneratedColumn,
        )
        lastGeneratedColumn = mapping.generatedColumn
        addMappingWithCode(lastMapping, code)
        // No more remaining code, continue
        lastMapping = mapping
        return
      }
    }
    // We add the generated code until the first mapping
    // to the SourceNode without any mapping.
    // Each line is added as separate string.
    while (lastGeneratedLine < mapping.generatedLine) {
      node.add(shiftNextLine())
      lastGeneratedLine++
    }
    if (lastGeneratedColumn < mapping.generatedColumn) {
      var nextLine = remainingLines[remainingLinesIndex]
      node.add(nextLine.substr(0, mapping.generatedColumn))
      remainingLines[remainingLinesIndex] = nextLine.substr(
        mapping.generatedColumn,
      )
      lastGeneratedColumn = mapping.generatedColumn
    }
    lastMapping = mapping
  }, this)
  // We have processed all mappings.
  if (remainingLinesIndex < remainingLines.length) {
    if (lastMapping) {
      // Associate the remaining code in the current line with "lastMapping"
      addMappingWithCode(lastMapping, shiftNextLine())
    }
    // and add the remaining lines without any mapping
    node.add(remainingLines.splice(remainingLinesIndex).join(''))
  }

  // Copy sourcesContent into SourceNode
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile)
    if (content != null) {
      if (aRelativePath != null) {
        sourceFile = util$1.join(aRelativePath, sourceFile)
      }
      node.setSourceContent(sourceFile, content)
    }
  })

  return node

  function addMappingWithCode(mapping, code) {
    if (mapping === null || mapping.source === undefined) {
      node.add(code)
    } else {
      var source = aRelativePath
        ? util$1.join(aRelativePath, mapping.source)
        : mapping.source
      node.add(
        new SourceNode(
          mapping.originalLine,
          mapping.originalColumn,
          source,
          code,
          mapping.name,
        ),
      )
    }
  }
}

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk)
    }, this)
  } else if (aChunk[isSourceNode] || typeof aChunk === 'string') {
    if (aChunk) {
      this.children.push(aChunk)
    }
  } else {
    throw new TypeError(
      'Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' +
        aChunk,
    )
  }
  return this
}

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length - 1; i >= 0; i--) {
      this.prepend(aChunk[i])
    }
  } else if (aChunk[isSourceNode] || typeof aChunk === 'string') {
    this.children.unshift(aChunk)
  } else {
    throw new TypeError(
      'Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' +
        aChunk,
    )
  }
  return this
}

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i]
    if (chunk[isSourceNode]) {
      chunk.walk(aFn)
    } else {
      if (chunk !== '') {
        aFn(chunk, {
          source: this.source,
          line: this.line,
          column: this.column,
          name: this.name,
        })
      }
    }
  }
}

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren
  var i
  var len = this.children.length
  if (len > 0) {
    newChildren = []
    for (i = 0; i < len - 1; i++) {
      newChildren.push(this.children[i])
      newChildren.push(aSep)
    }
    newChildren.push(this.children[i])
    this.children = newChildren
  }
  return this
}

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(
  aPattern,
  aReplacement,
) {
  var lastChild = this.children[this.children.length - 1]
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement)
  } else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(
      aPattern,
      aReplacement,
    )
  } else {
    this.children.push(''.replace(aPattern, aReplacement))
  }
  return this
}

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(
  aSourceFile,
  aSourceContent,
) {
  this.sourceContents[util$1.toSetString(aSourceFile)] = aSourceContent
}

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(
  aFn,
) {
  for (var i = 0, len = this.children.length; i < len; i++) {
    if (this.children[i][isSourceNode]) {
      this.children[i].walkSourceContents(aFn)
    }
  }

  var sources = Object.keys(this.sourceContents)
  for (var i = 0, len = sources.length; i < len; i++) {
    aFn(util$1.fromSetString(sources[i]), this.sourceContents[sources[i]])
  }
}

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = ''
  this.walk(function (chunk) {
    str += chunk
  })
  return str
}

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(
  aArgs,
) {
  var generated = {
    code: '',
    line: 1,
    column: 0,
  }
  var map = new SourceMapGenerator$1(aArgs)
  var sourceMappingActive = false
  var lastOriginalSource = null
  var lastOriginalLine = null
  var lastOriginalColumn = null
  var lastOriginalName = null
  this.walk(function (chunk, original) {
    generated.code += chunk
    if (
      original.source !== null &&
      original.line !== null &&
      original.column !== null
    ) {
      if (
        lastOriginalSource !== original.source ||
        lastOriginalLine !== original.line ||
        lastOriginalColumn !== original.column ||
        lastOriginalName !== original.name
      ) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column,
          },
          generated: {
            line: generated.line,
            column: generated.column,
          },
          name: original.name,
        })
      }
      lastOriginalSource = original.source
      lastOriginalLine = original.line
      lastOriginalColumn = original.column
      lastOriginalName = original.name
      sourceMappingActive = true
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column,
        },
      })
      lastOriginalSource = null
      sourceMappingActive = false
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++
        generated.column = 0
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null
          sourceMappingActive = false
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column,
            },
            generated: {
              line: generated.line,
              column: generated.column,
            },
            name: original.name,
          })
        }
      } else {
        generated.column++
      }
    }
  })
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent)
  })

  return { code: generated.code, map: map }
}

var SourceNode_1 = SourceNode

var sourceNode = {
  SourceNode: SourceNode_1,
}

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
var SourceMapGenerator$2 = sourceMapGenerator.SourceMapGenerator
var SourceMapConsumer$1 = sourceMapConsumer.SourceMapConsumer
var SourceNode$1 = sourceNode.SourceNode

var sourceMap = {
  SourceMapGenerator: SourceMapGenerator$2,
  SourceMapConsumer: SourceMapConsumer$1,
  SourceNode: SourceNode$1,
}

var sourceMapUrl = createCommonjsModule(function (module, exports) {
  // Copyright 2014 Simon Lydell
  // X11 (“MIT”) Licensed. (See LICENSE.)

  void (function (root, factory) {
    {
      module.exports = factory()
    }
  })(commonjsGlobal, function () {
    var innerRegex = /[#@] sourceMappingURL=([^\s'"]*)/

    var regex = RegExp(
      '(?:' +
        '/\\*' +
        '(?:\\s*\r?\n(?://)?)?' +
        '(?:' +
        innerRegex.source +
        ')' +
        '\\s*' +
        '\\*/' +
        '|' +
        '//(?:' +
        innerRegex.source +
        ')' +
        ')' +
        '\\s*',
    )

    return {
      regex: regex,
      _innerRegex: innerRegex,

      getFrom: function (code) {
        var match = code.match(regex)
        return match ? match[1] || match[2] || '' : null
      },

      existsIn: function (code) {
        return regex.test(code)
      },

      removeFrom: function (code) {
        return code.replace(regex, '')
      },

      insertBefore: function (code, string) {
        var match = code.match(regex)
        if (match) {
          return code.slice(0, match.index) + string + code.slice(match.index)
        } else {
          return code + string
        }
      },
    }
  })
})

function resolveUrl(/* ...urls */) {
  return Array.prototype.reduce.call(arguments, function (resolved, nextUrl) {
    return url__default['default'].resolve(resolved, nextUrl)
  })
}

var resolveUrl_1 = resolveUrl

var token = '%[a-f0-9]{2}'
var singleMatcher = new RegExp(token, 'gi')
var multiMatcher = new RegExp('(' + token + ')+', 'gi')

function decodeComponents(components, split) {
  try {
    // Try to decode the entire string first
    return decodeURIComponent(components.join(''))
  } catch (err) {
    // Do nothing
  }

  if (components.length === 1) {
    return components
  }

  split = split || 1

  // Split the array in 2 parts
  var left = components.slice(0, split)
  var right = components.slice(split)

  return Array.prototype.concat.call(
    [],
    decodeComponents(left),
    decodeComponents(right),
  )
}

function decode$2(input) {
  try {
    return decodeURIComponent(input)
  } catch (err) {
    var tokens = input.match(singleMatcher)

    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('')

      tokens = input.match(singleMatcher)
    }

    return input
  }
}

function customDecodeURIComponent(input) {
  // Keep track of all the replacements and prefill the map with the `BOM`
  var replaceMap = {
    '%FE%FF': '\uFFFD\uFFFD',
    '%FF%FE': '\uFFFD\uFFFD',
  }

  var match = multiMatcher.exec(input)
  while (match) {
    try {
      // Decode as big chunks as possible
      replaceMap[match[0]] = decodeURIComponent(match[0])
    } catch (err) {
      var result = decode$2(match[0])

      if (result !== match[0]) {
        replaceMap[match[0]] = result
      }
    }

    match = multiMatcher.exec(input)
  }

  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
  replaceMap['%C2'] = '\uFFFD'

  var entries = Object.keys(replaceMap)

  for (var i = 0; i < entries.length; i++) {
    // Replace all decoded components
    var key = entries[i]
    input = input.replace(new RegExp(key, 'g'), replaceMap[key])
  }

  return input
}

var D__git_packageInherit_node_modules_decodeUriComponent = function (
  encodedURI,
) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError(
      'Expected `encodedURI` to be of type `string`, got `' +
        typeof encodedURI +
        '`',
    )
  }

  try {
    encodedURI = encodedURI.replace(/\+/g, ' ')

    // Try the built in decoder first
    return decodeURIComponent(encodedURI)
  } catch (err) {
    // Fallback to a more advanced decoder
    return customDecodeURIComponent(encodedURI)
  }
}

function customDecodeUriComponent(string) {
  // `decodeUriComponent` turns `+` into ` `, but that's not wanted.
  return D__git_packageInherit_node_modules_decodeUriComponent(
    string.replace(/\+/g, '%2B'),
  )
}

var decodeUriComponent_1 = customDecodeUriComponent

function urix(aPath) {
  if (path__default['default'].sep === '\\') {
    return aPath.replace(/\\/g, '/').replace(/^[a-z]:\/?/i, '/')
  }
  return aPath
}

var D__git_packageInherit_node_modules_urix = urix

function atob(str) {
  return Buffer.from(str, 'base64').toString('binary')
}

var nodeAtob = (atob.atob = atob)

function callbackAsync(callback, error, result) {
  setImmediate(function () {
    callback(error, result)
  })
}

function parseMapToJSON(string, data) {
  try {
    return JSON.parse(string.replace(/^\)\]\}'/, ''))
  } catch (error) {
    error.sourceMapData = data
    throw error
  }
}

function readSync(read, url, data) {
  var readUrl = decodeUriComponent_1(url)
  try {
    return String(read(readUrl))
  } catch (error) {
    error.sourceMapData = data
    throw error
  }
}

function resolveSourceMap(code, codeUrl, read, callback) {
  var mapData
  try {
    mapData = resolveSourceMapHelper(code, codeUrl)
  } catch (error) {
    return callbackAsync(callback, error)
  }
  if (!mapData || mapData.map) {
    return callbackAsync(callback, null, mapData)
  }
  var readUrl = decodeUriComponent_1(mapData.url)
  read(readUrl, function (error, result) {
    if (error) {
      error.sourceMapData = mapData
      return callback(error)
    }
    mapData.map = String(result)
    try {
      mapData.map = parseMapToJSON(mapData.map, mapData)
    } catch (error) {
      return callback(error)
    }
    callback(null, mapData)
  })
}

function resolveSourceMapSync(code, codeUrl, read) {
  var mapData = resolveSourceMapHelper(code, codeUrl)
  if (!mapData || mapData.map) {
    return mapData
  }
  mapData.map = readSync(read, mapData.url, mapData)
  mapData.map = parseMapToJSON(mapData.map, mapData)
  return mapData
}

var dataUriRegex = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/

/**
 * The media type for JSON text is application/json.
 *
 * {@link https://tools.ietf.org/html/rfc8259#section-11 | IANA Considerations }
 *
 * `text/json` is non-standard media type
 */
var jsonMimeTypeRegex = /^(?:application|text)\/json$/

/**
 * JSON text exchanged between systems that are not part of a closed ecosystem
 * MUST be encoded using UTF-8.
 *
 * {@link https://tools.ietf.org/html/rfc8259#section-8.1 | Character Encoding}
 */
var jsonCharacterEncoding = 'utf-8'

function base64ToBuf(b64) {
  var binStr = nodeAtob(b64)
  var len = binStr.length
  var arr = new Uint8Array(len)
  for (var i = 0; i < len; i++) {
    arr[i] = binStr.charCodeAt(i)
  }
  return arr
}

function decodeBase64String(b64) {
  if (typeof TextDecoder === 'undefined' || typeof Uint8Array === 'undefined') {
    return nodeAtob(b64)
  }
  var buf = base64ToBuf(b64)
  // Note: `decoder.decode` method will throw a `DOMException` with the
  // `"EncodingError"` value when an coding error is found.
  var decoder = new TextDecoder(jsonCharacterEncoding, { fatal: true })
  return decoder.decode(buf)
}

function resolveSourceMapHelper(code, codeUrl) {
  codeUrl = D__git_packageInherit_node_modules_urix(codeUrl)

  var url = sourceMapUrl.getFrom(code)
  if (!url) {
    return null
  }

  var dataUri = url.match(dataUriRegex)
  if (dataUri) {
    var mimeType = dataUri[1] || 'text/plain'
    var lastParameter = dataUri[2] || ''
    var encoded = dataUri[3] || ''
    var data = {
      sourceMappingURL: url,
      url: null,
      sourcesRelativeTo: codeUrl,
      map: encoded,
    }
    if (!jsonMimeTypeRegex.test(mimeType)) {
      var error = new Error('Unuseful data uri mime type: ' + mimeType)
      error.sourceMapData = data
      throw error
    }
    try {
      data.map = parseMapToJSON(
        lastParameter === ';base64'
          ? decodeBase64String(encoded)
          : decodeURIComponent(encoded),
        data,
      )
    } catch (error) {
      error.sourceMapData = data
      throw error
    }
    return data
  }

  var mapUrl = resolveUrl_1(codeUrl, url)
  return {
    sourceMappingURL: url,
    url: mapUrl,
    sourcesRelativeTo: mapUrl,
    map: null,
  }
}

function resolveSources(map, mapUrl, read, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }
  var pending = map.sources ? map.sources.length : 0
  var result = {
    sourcesResolved: [],
    sourcesContent: [],
  }

  if (pending === 0) {
    callbackAsync(callback, null, result)
    return
  }

  var done = function () {
    pending--
    if (pending === 0) {
      callback(null, result)
    }
  }

  resolveSourcesHelper(
    map,
    mapUrl,
    options,
    function (fullUrl, sourceContent, index) {
      result.sourcesResolved[index] = fullUrl
      if (typeof sourceContent === 'string') {
        result.sourcesContent[index] = sourceContent
        callbackAsync(done, null)
      } else {
        var readUrl = decodeUriComponent_1(fullUrl)
        read(readUrl, function (error, source) {
          result.sourcesContent[index] = error ? error : String(source)
          done()
        })
      }
    },
  )
}

function resolveSourcesSync(map, mapUrl, read, options) {
  var result = {
    sourcesResolved: [],
    sourcesContent: [],
  }

  if (!map.sources || map.sources.length === 0) {
    return result
  }

  resolveSourcesHelper(
    map,
    mapUrl,
    options,
    function (fullUrl, sourceContent, index) {
      result.sourcesResolved[index] = fullUrl
      if (read !== null) {
        if (typeof sourceContent === 'string') {
          result.sourcesContent[index] = sourceContent
        } else {
          var readUrl = decodeUriComponent_1(fullUrl)
          try {
            result.sourcesContent[index] = String(read(readUrl))
          } catch (error) {
            result.sourcesContent[index] = error
          }
        }
      }
    },
  )

  return result
}

var endingSlash = /\/?$/

function resolveSourcesHelper(map, mapUrl, options, fn) {
  options = options || {}
  mapUrl = D__git_packageInherit_node_modules_urix(mapUrl)
  var fullUrl
  var sourceContent
  var sourceRoot
  for (var index = 0, len = map.sources.length; index < len; index++) {
    sourceRoot = null
    if (typeof options.sourceRoot === 'string') {
      sourceRoot = options.sourceRoot
    } else if (
      typeof map.sourceRoot === 'string' &&
      options.sourceRoot !== false
    ) {
      sourceRoot = map.sourceRoot
    }
    // If the sourceRoot is the empty string, it is equivalent to not setting
    // the property at all.
    if (sourceRoot === null || sourceRoot === '') {
      fullUrl = resolveUrl_1(mapUrl, map.sources[index])
    } else {
      // Make sure that the sourceRoot ends with a slash, so that `/scripts/subdir` becomes
      // `/scripts/subdir/<source>`, not `/scripts/<source>`. Pointing to a file as source root
      // does not make sense.
      fullUrl = resolveUrl_1(
        mapUrl,
        sourceRoot.replace(endingSlash, '/'),
        map.sources[index],
      )
    }
    sourceContent = (map.sourcesContent || [])[index]
    fn(fullUrl, sourceContent, index)
  }
}

function resolve(code, codeUrl, read, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }
  if (code === null) {
    var mapUrl = codeUrl
    var data = {
      sourceMappingURL: null,
      url: mapUrl,
      sourcesRelativeTo: mapUrl,
      map: null,
    }
    var readUrl = decodeUriComponent_1(mapUrl)
    read(readUrl, function (error, result) {
      if (error) {
        error.sourceMapData = data
        return callback(error)
      }
      data.map = String(result)
      try {
        data.map = parseMapToJSON(data.map, data)
      } catch (error) {
        return callback(error)
      }
      _resolveSources(data)
    })
  } else {
    resolveSourceMap(code, codeUrl, read, function (error, mapData) {
      if (error) {
        return callback(error)
      }
      if (!mapData) {
        return callback(null, null)
      }
      _resolveSources(mapData)
    })
  }

  function _resolveSources(mapData) {
    resolveSources(
      mapData.map,
      mapData.sourcesRelativeTo,
      read,
      options,
      function (error, result) {
        if (error) {
          return callback(error)
        }
        mapData.sourcesResolved = result.sourcesResolved
        mapData.sourcesContent = result.sourcesContent
        callback(null, mapData)
      },
    )
  }
}

function resolveSync(code, codeUrl, read, options) {
  var mapData
  if (code === null) {
    var mapUrl = codeUrl
    mapData = {
      sourceMappingURL: null,
      url: mapUrl,
      sourcesRelativeTo: mapUrl,
      map: null,
    }
    mapData.map = readSync(read, mapUrl, mapData)
    mapData.map = parseMapToJSON(mapData.map, mapData)
  } else {
    mapData = resolveSourceMapSync(code, codeUrl, read)
    if (!mapData) {
      return null
    }
  }
  var result = resolveSourcesSync(
    mapData.map,
    mapData.sourcesRelativeTo,
    read,
    options,
  )
  mapData.sourcesResolved = result.sourcesResolved
  mapData.sourcesContent = result.sourcesContent
  return mapData
}

var sourceMapResolveNode = {
  resolveSourceMap: resolveSourceMap,
  resolveSourceMapSync: resolveSourceMapSync,
  resolveSources: resolveSources,
  resolveSourcesSync: resolveSourcesSync,
  resolve: resolve,
  resolveSync: resolveSync,
  parseMapToJSON: parseMapToJSON,
}

/**
 * Module dependencies
 */

var extend$2 = D__git_packageInherit_node_modules_extendShallow
var SourceMap = sourceMap
var sourceMapResolve = sourceMapResolveNode

/**
 * Convert backslash in the given string to forward slashes
 */

var unixify = function (fp) {
  return fp.split(/\\+/).join('/')
}

/**
 * Return true if `val` is a non-empty string
 *
 * @param {String} `str`
 * @return {Boolean}
 */

var isString$4 = function (str) {
  return str && typeof str === 'string'
}

/**
 * Cast `val` to an array
 * @return {Array}
 */

var arrayify$3 = function (val) {
  if (typeof val === 'string') return [val]
  return val ? (Array.isArray(val) ? val : [val]) : []
}

/**
 * Get the last `n` element from the given `array`
 * @param {Array} `array`
 * @return {*}
 */

var last = function (arr, n) {
  return arr[arr.length - (n || 1)]
}

var utils$4 = {
  extend: extend$2,
  SourceMap: SourceMap,
  sourceMapResolve: sourceMapResolve,
  unixify: unixify,
  isString: isString$4,
  arrayify: arrayify$3,
  last: last,
}

var sourceMaps = createCommonjsModule(function (module, exports) {
  /**
   * Expose `mixin()`.
   * This code is based on `source-maps-support.js` in reworkcss/css
   * https://github.com/reworkcss/css/blob/master/lib/stringify/source-map-support.js
   * Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>
   */

  module.exports = mixin

  /**
   * Mixin source map support into `compiler`.
   *
   * @param {Object} `compiler`
   * @api public
   */

  function mixin(compiler) {
    D__git_packageInherit_node_modules_defineProperty(
      compiler,
      '_comment',
      compiler.comment,
    )
    compiler.map = new utils$4.SourceMap.SourceMapGenerator()
    compiler.position = { line: 1, column: 1 }
    compiler.content = {}
    compiler.files = {}

    for (var key in exports) {
      D__git_packageInherit_node_modules_defineProperty(
        compiler,
        key,
        exports[key],
      )
    }
  }

  /**
   * Update position.
   *
   * @param {String} str
   */

  exports.updatePosition = function (str) {
    var lines = str.match(/\n/g)
    if (lines) this.position.line += lines.length
    var i = str.lastIndexOf('\n')
    this.position.column = ~i
      ? str.length - i
      : this.position.column + str.length
  }

  /**
   * Emit `str` with `position`.
   *
   * @param {String} str
   * @param {Object} [pos]
   * @return {String}
   */

  exports.emit = function (str, node) {
    var position = node.position || {}
    var source = position.source
    if (source) {
      if (position.filepath) {
        source = utils$4.unixify(position.filepath)
      }

      this.map.addMapping({
        source: source,
        generated: {
          line: this.position.line,
          column: Math.max(this.position.column - 1, 0),
        },
        original: {
          line: position.start.line,
          column: position.start.column - 1,
        },
      })

      if (position.content) {
        this.addContent(source, position)
      }
      if (position.filepath) {
        this.addFile(source, position)
      }

      this.updatePosition(str)
      this.output += str
    }
    return str
  }

  /**
   * Adds a file to the source map output if it has not already been added
   * @param {String} `file`
   * @param {Object} `pos`
   */

  exports.addFile = function (file, position) {
    if (typeof position.content !== 'string') return
    if (Object.prototype.hasOwnProperty.call(this.files, file)) return
    this.files[file] = position.content
  }

  /**
   * Adds a content source to the source map output if it has not already been added
   * @param {String} `source`
   * @param {Object} `position`
   */

  exports.addContent = function (source, position) {
    if (typeof position.content !== 'string') return
    if (Object.prototype.hasOwnProperty.call(this.content, source)) return
    this.map.setSourceContent(source, position.content)
  }

  /**
   * Applies any original source maps to the output and embeds the source file
   * contents in the source map.
   */

  exports.applySourceMaps = function () {
    Object.keys(this.files).forEach(function (file) {
      var content = this.files[file]
      this.map.setSourceContent(file, content)

      if (this.options.inputSourcemaps === true) {
        var originalMap = utils$4.sourceMapResolve.resolveSync(
          content,
          file,
          fs__default['default'].readFileSync,
        )
        if (originalMap) {
          var map = new utils$4.SourceMap.SourceMapConsumer(originalMap.map)
          var relativeTo = originalMap.sourcesRelativeTo
          this.map.applySourceMap(
            map,
            file,
            utils$4.unixify(path__default['default'].dirname(relativeTo)),
          )
        }
      }
    }, this)
  }

  /**
   * Process comments, drops sourceMap comments.
   * @param {Object} node
   */

  exports.comment = function (node) {
    if (/^# sourceMappingURL=/.test(node.comment)) {
      return this.emit('', node.position)
    }
    return this._comment(node)
  }
})

var debug$1 = D__git_packageInherit_node_modules_debug_src(
  'snapdragon:compiler',
)

/**
 * Create a new `Compiler` with the given `options`.
 * @param {Object} `options`
 */

function Compiler(options, state) {
  debug$1('initializing', __filename)
  this.options = utils$4.extend({ source: 'string' }, options)
  this.state = state || {}
  this.compilers = {}
  this.output = ''
  this.set('eos', function (node) {
    return this.emit(node.val, node)
  })
  this.set('noop', function (node) {
    return this.emit(node.val, node)
  })
  this.set('bos', function (node) {
    return this.emit(node.val, node)
  })
  D__git_packageInherit_node_modules_use(this)
}

/**
 * Prototype methods
 */

Compiler.prototype = {
  /**
   * Throw an error message with details including the cursor position.
   * @param {String} `msg` Message to use in the Error.
   */

  error: function (msg, node) {
    var pos = node.position || { start: { column: 0 } }
    var message =
      this.options.source + ' column:' + pos.start.column + ': ' + msg

    var err = new Error(message)
    err.reason = msg
    err.column = pos.start.column
    err.source = this.pattern

    if (this.options.silent) {
      this.errors.push(err)
    } else {
      throw err
    }
  },

  /**
   * Define a non-enumberable property on the `Compiler` instance.
   *
   * ```js
   * compiler.define('foo', 'bar');
   * ```
   * @name .define
   * @param {String} `key` propery name
   * @param {any} `val` property value
   * @return {Object} Returns the Compiler instance for chaining.
   * @api public
   */

  define: function (key, val) {
    D__git_packageInherit_node_modules_defineProperty(this, key, val)
    return this
  },

  /**
   * Emit `node.val`
   */

  emit: function (str, node) {
    this.output += str
    return str
  },

  /**
   * Add a compiler `fn` with the given `name`
   */

  set: function (name, fn) {
    this.compilers[name] = fn
    return this
  },

  /**
   * Get compiler `name`.
   */

  get: function (name) {
    return this.compilers[name]
  },

  /**
   * Get the previous AST node.
   */

  prev: function (n) {
    return this.ast.nodes[this.idx - (n || 1)] || { type: 'bos', val: '' }
  },

  /**
   * Get the next AST node.
   */

  next: function (n) {
    return this.ast.nodes[this.idx + (n || 1)] || { type: 'eos', val: '' }
  },

  /**
   * Visit `node`.
   */

  visit: function (node, nodes, i) {
    var fn = this.compilers[node.type]
    this.idx = i

    if (typeof fn !== 'function') {
      throw this.error('compiler "' + node.type + '" is not registered', node)
    }
    return fn.call(this, node, nodes, i)
  },

  /**
   * Map visit over array of `nodes`.
   */

  mapVisit: function (nodes) {
    if (!Array.isArray(nodes)) {
      throw new TypeError('expected an array')
    }
    var len = nodes.length
    var idx = -1
    while (++idx < len) {
      this.visit(nodes[idx], nodes, idx)
    }
    return this
  },

  /**
   * Compile `ast`.
   */

  compile: function (ast, options) {
    var opts = utils$4.extend({}, this.options, options)
    this.ast = ast
    this.parsingErrors = this.ast.errors
    this.output = ''

    // source map support
    if (opts.sourcemap) {
      var sourcemaps = sourceMaps
      sourcemaps(this)
      this.mapVisit(this.ast.nodes)
      this.applySourceMaps()
      this.map = opts.sourcemap === 'generator' ? this.map : this.map.toJSON()
      return this
    }

    this.mapVisit(this.ast.nodes)
    return this
  },
}

/**
 * Expose `Compiler`
 */

var compiler = Compiler

/*!
 * map-cache <https://github.com/jonschlinkert/map-cache>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var hasOwn$4 = Object.prototype.hasOwnProperty

/**
 * Expose `MapCache`
 */

var D__git_packageInherit_node_modules_mapCache = MapCache

/**
 * Creates a cache object to store key/value pairs.
 *
 * ```js
 * var cache = new MapCache();
 * ```
 *
 * @api public
 */

function MapCache(data) {
  this.__data__ = data || {}
}

/**
 * Adds `value` to `key` on the cache.
 *
 * ```js
 * cache.set('foo', 'bar');
 * ```
 *
 * @param {String} `key` The key of the value to cache.
 * @param {*} `value` The value to cache.
 * @returns {Object} Returns the `Cache` object for chaining.
 * @api public
 */

MapCache.prototype.set = function mapSet(key, value) {
  if (key !== '__proto__') {
    this.__data__[key] = value
  }
  return this
}

/**
 * Gets the cached value for `key`.
 *
 * ```js
 * cache.get('foo');
 * //=> 'bar'
 * ```
 *
 * @param {String} `key` The key of the value to get.
 * @returns {*} Returns the cached value.
 * @api public
 */

MapCache.prototype.get = function mapGet(key) {
  return key === '__proto__' ? undefined : this.__data__[key]
}

/**
 * Checks if a cached value for `key` exists.
 *
 * ```js
 * cache.has('foo');
 * //=> true
 * ```
 *
 * @param {String} `key` The key of the entry to check.
 * @returns {Boolean} Returns `true` if an entry for `key` exists, else `false`.
 * @api public
 */

MapCache.prototype.has = function mapHas(key) {
  return key !== '__proto__' && hasOwn$4.call(this.__data__, key)
}

/**
 * Removes `key` and its value from the cache.
 *
 * ```js
 * cache.del('foo');
 * ```
 * @title .del
 * @param {String} `key` The key of the value to remove.
 * @returns {Boolean} Returns `true` if the entry was removed successfully, else `false`.
 * @api public
 */

MapCache.prototype.del = function mapDelete(key) {
  return this.has(key) && delete this.__data__[key]
}

/**
 * Store position for a node
 */

var position = function Position(start, parser) {
  this.start = start
  this.end = { line: parser.line, column: parser.column }
  D__git_packageInherit_node_modules_defineProperty(
    this,
    'content',
    parser.orig,
  )
  D__git_packageInherit_node_modules_defineProperty(
    this,
    'source',
    parser.options.source,
  )
}

var debug$2 = D__git_packageInherit_node_modules_debug_src('snapdragon:parser')

/**
 * Create a new `Parser` with the given `input` and `options`.
 * @param {String} `input`
 * @param {Object} `options`
 * @api public
 */

function Parser(options) {
  debug$2('initializing', __filename)
  this.options = utils$4.extend({ source: 'string' }, options)
  this.init(this.options)
  D__git_packageInherit_node_modules_use(this)
}

/**
 * Prototype methods
 */

Parser.prototype = {
  constructor: Parser,

  init: function (options) {
    this.orig = ''
    this.input = ''
    this.parsed = ''

    this.column = 1
    this.line = 1

    this.regex = new D__git_packageInherit_node_modules_mapCache()
    this.errors = this.errors || []
    this.parsers = this.parsers || {}
    this.types = this.types || []
    this.sets = this.sets || {}
    this.fns = this.fns || []
    this.currentType = 'root'

    var pos = this.position()
    this.bos = pos({ type: 'bos', val: '' })

    this.ast = {
      type: 'root',
      errors: this.errors,
      nodes: [this.bos],
    }

    D__git_packageInherit_node_modules_defineProperty(
      this.bos,
      'parent',
      this.ast,
    )
    this.nodes = [this.ast]

    this.count = 0
    this.setCount = 0
    this.stack = []
  },

  /**
   * Throw a formatted error with the cursor column and `msg`.
   * @param {String} `msg` Message to use in the Error.
   */

  error: function (msg, node) {
    var pos = node.position || { start: { column: 0, line: 0 } }
    var line = pos.start.line
    var column = pos.start.column
    var source = this.options.source

    var message = source + ' <line:' + line + ' column:' + column + '>: ' + msg
    var err = new Error(message)
    err.source = source
    err.reason = msg
    err.pos = pos

    if (this.options.silent) {
      this.errors.push(err)
    } else {
      throw err
    }
  },

  /**
   * Define a non-enumberable property on the `Parser` instance.
   *
   * ```js
   * parser.define('foo', 'bar');
   * ```
   * @name .define
   * @param {String} `key` propery name
   * @param {any} `val` property value
   * @return {Object} Returns the Parser instance for chaining.
   * @api public
   */

  define: function (key, val) {
    D__git_packageInherit_node_modules_defineProperty(this, key, val)
    return this
  },

  /**
   * Mark position and patch `node.position`.
   */

  position: function () {
    var start = { line: this.line, column: this.column }
    var self = this

    return function (node) {
      D__git_packageInherit_node_modules_defineProperty(
        node,
        'position',
        new position(start, self),
      )
      return node
    }
  },

  /**
   * Set parser `name` with the given `fn`
   * @param {String} `name`
   * @param {Function} `fn`
   * @api public
   */

  set: function (type, fn) {
    if (this.types.indexOf(type) === -1) {
      this.types.push(type)
    }
    this.parsers[type] = fn.bind(this)
    return this
  },

  /**
   * Get parser `name`
   * @param {String} `name`
   * @api public
   */

  get: function (name) {
    return this.parsers[name]
  },

  /**
   * Push a `token` onto the `type` stack.
   *
   * @param {String} `type`
   * @return {Object} `token`
   * @api public
   */

  push: function (type, token) {
    this.sets[type] = this.sets[type] || []
    this.count++
    this.stack.push(token)
    return this.sets[type].push(token)
  },

  /**
   * Pop a token off of the `type` stack
   * @param {String} `type`
   * @returns {Object} Returns a token
   * @api public
   */

  pop: function (type) {
    this.sets[type] = this.sets[type] || []
    this.count--
    this.stack.pop()
    return this.sets[type].pop()
  },

  /**
   * Return true if inside a `stack` node. Types are `braces`, `parens` or `brackets`.
   *
   * @param {String} `type`
   * @return {Boolean}
   * @api public
   */

  isInside: function (type) {
    this.sets[type] = this.sets[type] || []
    return this.sets[type].length > 0
  },

  /**
   * Return true if `node` is the given `type`.
   *
   * ```js
   * parser.isType(node, 'brace');
   * ```
   * @param {Object} `node`
   * @param {String} `type`
   * @return {Boolean}
   * @api public
   */

  isType: function (node, type) {
    return node && node.type === type
  },

  /**
   * Get the previous AST node
   * @return {Object}
   */

  prev: function (n) {
    return this.stack.length > 0
      ? utils$4.last(this.stack, n)
      : utils$4.last(this.nodes, n)
  },

  /**
   * Update line and column based on `str`.
   */

  consume: function (len) {
    this.input = this.input.substr(len)
  },

  /**
   * Update column based on `str`.
   */

  updatePosition: function (str, len) {
    var lines = str.match(/\n/g)
    if (lines) this.line += lines.length
    var i = str.lastIndexOf('\n')
    this.column = ~i ? len - i : this.column + len
    this.parsed += str
    this.consume(len)
  },

  /**
   * Match `regex`, return captures, and update the cursor position by `match[0]` length.
   * @param {RegExp} `regex`
   * @return {Object}
   */

  match: function (regex) {
    var m = regex.exec(this.input)
    if (m) {
      this.updatePosition(m[0], m[0].length)
      return m
    }
  },

  /**
   * Capture `type` with the given regex.
   * @param {String} `type`
   * @param {RegExp} `regex`
   * @return {Function}
   */

  capture: function (type, regex) {
    if (typeof regex === 'function') {
      return this.set.apply(this, arguments)
    }

    this.regex.set(type, regex)
    this.set(
      type,
      function () {
        var parsed = this.parsed
        var pos = this.position()
        var m = this.match(regex)
        if (!m || !m[0]) return

        var prev = this.prev()
        var node = pos({
          type: type,
          val: m[0],
          parsed: parsed,
          rest: this.input,
        })

        if (m[1]) {
          node.inner = m[1]
        }

        D__git_packageInherit_node_modules_defineProperty(
          node,
          'inside',
          this.stack.length > 0,
        )
        D__git_packageInherit_node_modules_defineProperty(node, 'parent', prev)
        prev.nodes.push(node)
      }.bind(this),
    )
    return this
  },

  /**
   * Create a parser with open and close for parens,
   * brackets or braces
   */

  capturePair: function (type, openRegex, closeRegex, fn) {
    this.sets[type] = this.sets[type] || []

    /**
     * Open
     */

    this.set(type + '.open', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(openRegex)
      if (!m || !m[0]) return

      var val = m[0]
      this.setCount++
      this.specialChars = true
      var open = pos({
        type: type + '.open',
        val: val,
        rest: this.input,
      })

      if (typeof m[1] !== 'undefined') {
        open.inner = m[1]
      }

      var prev = this.prev()
      var node = pos({
        type: type,
        nodes: [open],
      })

      D__git_packageInherit_node_modules_defineProperty(
        node,
        'rest',
        this.input,
      )
      D__git_packageInherit_node_modules_defineProperty(node, 'parsed', parsed)
      D__git_packageInherit_node_modules_defineProperty(node, 'prefix', m[1])
      D__git_packageInherit_node_modules_defineProperty(node, 'parent', prev)
      D__git_packageInherit_node_modules_defineProperty(open, 'parent', node)

      if (typeof fn === 'function') {
        fn.call(this, open, node)
      }

      this.push(type, node)
      prev.nodes.push(node)
    })

    /**
     * Close
     */

    this.set(type + '.close', function () {
      var pos = this.position()
      var m = this.match(closeRegex)
      if (!m || !m[0]) return

      var parent = this.pop(type)
      var node = pos({
        type: type + '.close',
        rest: this.input,
        suffix: m[1],
        val: m[0],
      })

      if (!this.isType(parent, type)) {
        if (this.options.strict) {
          throw new Error('missing opening "' + type + '"')
        }

        this.setCount--
        node.escaped = true
        return node
      }

      if (node.suffix === '\\') {
        parent.escaped = true
        node.escaped = true
      }

      parent.nodes.push(node)
      D__git_packageInherit_node_modules_defineProperty(node, 'parent', parent)
    })

    return this
  },

  /**
   * Capture end-of-string
   */

  eos: function () {
    var pos = this.position()
    if (this.input) return
    var prev = this.prev()

    while (prev.type !== 'root' && !prev.visited) {
      if (this.options.strict === true) {
        throw new SyntaxError(
          'invalid syntax:' + util__default['default'].inspect(prev, null, 2),
        )
      }

      if (!hasDelims(prev)) {
        prev.parent.escaped = true
        prev.escaped = true
      }

      visit(prev, function (node) {
        if (!hasDelims(node.parent)) {
          node.parent.escaped = true
          node.escaped = true
        }
      })

      prev = prev.parent
    }

    var tok = pos({
      type: 'eos',
      val: this.append || '',
    })

    D__git_packageInherit_node_modules_defineProperty(tok, 'parent', this.ast)
    return tok
  },

  /**
   * Run parsers to advance the cursor position
   */

  next: function () {
    var parsed = this.parsed
    var len = this.types.length
    var idx = -1
    var tok

    while (++idx < len) {
      if ((tok = this.parsers[this.types[idx]].call(this))) {
        D__git_packageInherit_node_modules_defineProperty(
          tok,
          'rest',
          this.input,
        )
        D__git_packageInherit_node_modules_defineProperty(tok, 'parsed', parsed)
        this.last = tok
        return tok
      }
    }
  },

  /**
   * Parse the given string.
   * @return {Array}
   */

  parse: function (input) {
    if (typeof input !== 'string') {
      throw new TypeError('expected a string')
    }

    this.init(this.options)
    this.orig = input
    this.input = input
    var self = this

    function parse() {
      // check input before calling `.next()`
      input = self.input

      // get the next AST ndoe
      var node = self.next()
      if (node) {
        var prev = self.prev()
        if (prev) {
          D__git_packageInherit_node_modules_defineProperty(
            node,
            'parent',
            prev,
          )
          if (prev.nodes) {
            prev.nodes.push(node)
          }
        }

        if (self.sets.hasOwnProperty(prev.type)) {
          self.currentType = prev.type
        }
      }

      // if we got here but input is not changed, throw an error
      if (self.input && input === self.input) {
        throw new Error(
          'no parsers registered for: "' + self.input.slice(0, 5) + '"',
        )
      }
    }

    while (this.input) parse()
    if (this.stack.length && this.options.strict) {
      var node = this.stack.pop()
      throw this.error('missing opening ' + node.type + ': "' + this.orig + '"')
    }

    var eos = this.eos()
    var tok = this.prev()
    if (tok.type !== 'eos') {
      this.ast.nodes.push(eos)
    }

    return this.ast
  },
}

/**
 * Visit `node` with the given `fn`
 */

function visit(node, fn) {
  if (!node.visited) {
    D__git_packageInherit_node_modules_defineProperty(node, 'visited', true)
    return node.nodes ? mapVisit(node.nodes, fn) : fn(node)
  }
  return node
}

/**
 * Map visit over array of `nodes`.
 */

function mapVisit(nodes, fn) {
  var len = nodes.length
  var idx = -1
  while (++idx < len) {
    visit(nodes[idx], fn)
  }
}

function hasOpen(node) {
  return node.nodes && node.nodes[0].type === node.type + '.open'
}

function hasClose(node) {
  return node.nodes && utils$4.last(node.nodes).type === node.type + '.close'
}

function hasDelims(node) {
  return hasOpen(node) && hasClose(node)
}

/**
 * Expose `Parser`
 */

var parser$1 = Parser

/**
 * Create a new instance of `Snapdragon` with the given `options`.
 *
 * ```js
 * var snapdragon = new Snapdragon();
 * ```
 *
 * @param {Object} `options`
 * @api public
 */

function Snapdragon(options) {
  D__git_packageInherit_node_modules_base.call(this, null, options)
  this.options = utils$4.extend({ source: 'string' }, this.options)
  this.compiler = new compiler(this.options)
  this.parser = new parser$1(this.options)

  Object.defineProperty(this, 'compilers', {
    get: function () {
      return this.compiler.compilers
    },
  })

  Object.defineProperty(this, 'parsers', {
    get: function () {
      return this.parser.parsers
    },
  })

  Object.defineProperty(this, 'regex', {
    get: function () {
      return this.parser.regex
    },
  })
}

/**
 * Inherit Base
 */

D__git_packageInherit_node_modules_base.extend(Snapdragon)

/**
 * Add a parser to `snapdragon.parsers` for capturing the given `type` using
 * the specified regex or parser function. A function is useful if you need
 * to customize how the token is created and/or have access to the parser
 * instance to check options, etc.
 *
 * ```js
 * snapdragon
 *   .capture('slash', /^\//)
 *   .capture('dot', function() {
 *     var pos = this.position();
 *     var m = this.match(/^\./);
 *     if (!m) return;
 *     return pos({
 *       type: 'dot',
 *       val: m[0]
 *     });
 *   });
 * ```
 * @param {String} `type`
 * @param {RegExp|Function} `regex`
 * @return {Object} Returns the parser instance for chaining
 * @api public
 */

Snapdragon.prototype.capture = function () {
  return this.parser.capture.apply(this.parser, arguments)
}

/**
 * Register a plugin `fn`.
 *
 * ```js
 * var snapdragon = new Snapdgragon([options]);
 * snapdragon.use(function() {
 *   console.log(this);          //<= snapdragon instance
 *   console.log(this.parser);   //<= parser instance
 *   console.log(this.compiler); //<= compiler instance
 * });
 * ```
 * @param {Object} `fn`
 * @api public
 */

Snapdragon.prototype.use = function (fn) {
  fn.call(this, this)
  return this
}

/**
 * Parse the given `str`.
 *
 * ```js
 * var snapdragon = new Snapdgragon([options]);
 * // register parsers
 * snapdragon.parser.use(function() {});
 *
 * // parse
 * var ast = snapdragon.parse('foo/bar');
 * console.log(ast);
 * ```
 * @param {String} `str`
 * @param {Object} `options` Set `options.sourcemap` to true to enable source maps.
 * @return {Object} Returns an AST.
 * @api public
 */

Snapdragon.prototype.parse = function (str, options) {
  this.options = utils$4.extend({}, this.options, options)
  var parsed = this.parser.parse(str, this.options)

  // add non-enumerable parser reference
  D__git_packageInherit_node_modules_defineProperty(
    parsed,
    'parser',
    this.parser,
  )
  return parsed
}

/**
 * Compile the given `AST`.
 *
 * ```js
 * var snapdragon = new Snapdgragon([options]);
 * // register plugins
 * snapdragon.use(function() {});
 * // register parser plugins
 * snapdragon.parser.use(function() {});
 * // register compiler plugins
 * snapdragon.compiler.use(function() {});
 *
 * // parse
 * var ast = snapdragon.parse('foo/bar');
 *
 * // compile
 * var res = snapdragon.compile(ast);
 * console.log(res.output);
 * ```
 * @param {Object} `ast`
 * @param {Object} `options`
 * @return {Object} Returns an object with an `output` property with the rendered string.
 * @api public
 */

Snapdragon.prototype.compile = function (ast, options) {
  this.options = utils$4.extend({}, this.options, options)
  var compiled = this.compiler.compile(ast, this.options)

  // add non-enumerable compiler reference
  D__git_packageInherit_node_modules_defineProperty(
    compiled,
    'compiler',
    this.compiler,
  )
  return compiled
}

/**
 * Expose `Snapdragon`
 */

var D__git_packageInherit_node_modules_snapdragon = Snapdragon

/**
 * Expose `Parser` and `Compiler`
 */

var Compiler_1 = compiler
var Parser_1 = parser$1
D__git_packageInherit_node_modules_snapdragon.Compiler = Compiler_1
D__git_packageInherit_node_modules_snapdragon.Parser = Parser_1

/**
 * Customize Snapdragon parser and renderer
 */

function Braces(options) {
  this.options = D__git_packageInherit_node_modules_extendShallow({}, options)
}

/**
 * Initialize braces
 */

Braces.prototype.init = function (options) {
  if (this.isInitialized) return
  this.isInitialized = true
  var opts = utils_1.createOptions({}, this.options, options)
  this.snapdragon =
    this.options.snapdragon ||
    new D__git_packageInherit_node_modules_snapdragon(opts)
  this.compiler = this.snapdragon.compiler
  this.parser = this.snapdragon.parser

  compilers(this.snapdragon, opts)
  parsers(this.snapdragon, opts)

  /**
   * Call Snapdragon `.parse` method. When AST is returned, we check to
   * see if any unclosed braces are left on the stack and, if so, we iterate
   * over the stack and correct the AST so that compilers are called in the correct
   * order and unbalance braces are properly escaped.
   */

  utils_1.define(this.snapdragon, 'parse', function (pattern, options) {
    var parsed = D__git_packageInherit_node_modules_snapdragon.prototype.parse.apply(
      this,
      arguments,
    )
    this.parser.ast.input = pattern

    var stack = this.parser.stack
    while (stack.length) {
      addParent({ type: 'brace.close', val: '' }, stack.pop())
    }

    function addParent(node, parent) {
      utils_1.define(node, 'parent', parent)
      parent.nodes.push(node)
    }

    // add non-enumerable parser reference
    utils_1.define(parsed, 'parser', this.parser)
    return parsed
  })
}

/**
 * Decorate `.parse` method
 */

Braces.prototype.parse = function (ast, options) {
  if (ast && typeof ast === 'object' && ast.nodes) return ast
  this.init(options)
  return this.snapdragon.parse(ast, options)
}

/**
 * Decorate `.compile` method
 */

Braces.prototype.compile = function (ast, options) {
  if (typeof ast === 'string') {
    ast = this.parse(ast, options)
  } else {
    this.init(options)
  }
  return this.snapdragon.compile(ast, options)
}

/**
 * Expand
 */

Braces.prototype.expand = function (pattern) {
  var ast = this.parse(pattern, { expand: true })
  return this.compile(ast, { expand: true })
}

/**
 * Optimize
 */

Braces.prototype.optimize = function (pattern) {
  var ast = this.parse(pattern, { optimize: true })
  return this.compile(ast, { optimize: true })
}

/**
 * Expose `Braces`
 */

var braces$1 = Braces

/**
 * Module dependencies
 */

/**
 * Local dependencies
 */

var MAX_LENGTH$3 = 1024 * 64
var cache$3 = {}

/**
 * Convert the given `braces` pattern into a regex-compatible string. By default, only one string is generated for every input string. Set `options.expand` to true to return an array of patterns (similar to Bash or minimatch. Before using `options.expand`, it's recommended that you read the [performance notes](#performance)).
 *
 * ```js
 * var braces = require('braces');
 * console.log(braces('{a,b,c}'));
 * //=> ['(a|b|c)']
 *
 * console.log(braces('{a,b,c}', {expand: true}));
 * //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

function braces$2(pattern, options) {
  var key = utils_1.createKey(String(pattern), options)
  var arr = []

  var disabled = options && options.cache === false
  if (!disabled && cache$3.hasOwnProperty(key)) {
    return cache$3[key]
  }

  if (Array.isArray(pattern)) {
    for (var i = 0; i < pattern.length; i++) {
      arr.push.apply(arr, braces$2.create(pattern[i], options))
    }
  } else {
    arr = braces$2.create(pattern, options)
  }

  if (options && options.nodupes === true) {
    arr = D__git_packageInherit_node_modules_arrayUnique(arr)
  }

  if (!disabled) {
    cache$3[key] = arr
  }
  return arr
}

/**
 * Expands a brace pattern into an array. This method is called by the main [braces](#braces) function when `options.expand` is true. Before using this method it's recommended that you read the [performance notes](#performance)) and advantages of using [.optimize](#optimize) instead.
 *
 * ```js
 * var braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces$2.expand = function (pattern, options) {
  return braces$2.create(
    pattern,
    D__git_packageInherit_node_modules_extendShallow({}, options, {
      expand: true,
    }),
  )
}

/**
 * Expands a brace pattern into a regex-compatible, optimized string. This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * var braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces$2.optimize = function (pattern, options) {
  return braces$2.create(pattern, options)
}

/**
 * Processes a brace pattern and returns either an expanded array (if `options.expand` is true), a highly optimized regex-compatible string. This method is called by the main [braces](#braces) function.
 *
 * ```js
 * var braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces$2.create = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  var maxLength = (options && options.maxLength) || MAX_LENGTH$3
  if (pattern.length >= maxLength) {
    throw new Error(
      'expected pattern to be less than ' + maxLength + ' characters',
    )
  }

  function create() {
    if (pattern === '' || pattern.length < 3) {
      return [pattern]
    }

    if (utils_1.isEmptySets(pattern)) {
      return []
    }

    if (utils_1.isQuotedString(pattern)) {
      return [pattern.slice(1, -1)]
    }

    var proto = new braces$1(options)
    var result =
      !options || options.expand !== true
        ? proto.optimize(pattern, options)
        : proto.expand(pattern, options)

    // get the generated pattern(s)
    var arr = result.output

    // filter out empty strings if specified
    if (options && options.noempty === true) {
      arr = arr.filter(Boolean)
    }

    // filter out duplicates if specified
    if (options && options.nodupes === true) {
      arr = D__git_packageInherit_node_modules_arrayUnique(arr)
    }

    Object.defineProperty(arr, 'result', {
      enumerable: false,
      value: result,
    })

    return arr
  }

  return memoize$1('create', pattern, options, create)
}

/**
 * Create a regular expression from the given string `pattern`.
 *
 * ```js
 * var braces = require('braces');
 *
 * console.log(braces.makeRe('id-{200..300}'));
 * //=> /^(?:id-(20[0-9]|2[1-9][0-9]|300))$/
 * ```
 * @param {String} `pattern` The pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

braces$2.makeRe = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  var maxLength = (options && options.maxLength) || MAX_LENGTH$3
  if (pattern.length >= maxLength) {
    throw new Error(
      'expected pattern to be less than ' + maxLength + ' characters',
    )
  }

  function makeRe() {
    var arr = braces$2(pattern, options)
    var opts = D__git_packageInherit_node_modules_extendShallow(
      { strictErrors: false },
      options,
    )
    return D__git_packageInherit_node_modules_toRegex(arr, opts)
  }

  return memoize$1('makeRe', pattern, options, makeRe)
}

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * var braces = require('braces');
 * var ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * // { type: 'root',
 * //   errors: [],
 * //   input: 'a/{b,c}/d',
 * //   nodes:
 * //    [ { type: 'bos', val: '' },
 * //      { type: 'text', val: 'a/' },
 * //      { type: 'brace',
 * //        nodes:
 * //         [ { type: 'brace.open', val: '{' },
 * //           { type: 'text', val: 'b,c' },
 * //           { type: 'brace.close', val: '}' } ] },
 * //      { type: 'text', val: '/d' },
 * //      { type: 'eos', val: '' } ] }
 * ```
 * @param {String} `pattern` Brace pattern to parse
 * @param {Object} `options`
 * @return {Object} Returns an AST
 * @api public
 */

braces$2.parse = function (pattern, options) {
  var proto = new braces$1(options)
  return proto.parse(pattern, options)
}

/**
 * Compile the given `ast` or string with the given `options`.
 *
 * ```js
 * var braces = require('braces');
 * var ast = braces.parse('a/{b,c}/d');
 * console.log(braces.compile(ast));
 * // { options: { source: 'string' },
 * //   state: {},
 * //   compilers:
 * //    { eos: [Function],
 * //      noop: [Function],
 * //      bos: [Function],
 * //      brace: [Function],
 * //      'brace.open': [Function],
 * //      text: [Function],
 * //      'brace.close': [Function] },
 * //   output: [ 'a/(b|c)/d' ],
 * //   ast:
 * //    { ... },
 * //   parsingErrors: [] }
 * ```
 * @param {Object|String} `ast` AST from [.parse](#parse). If a string is passed it will be parsed first.
 * @param {Object} `options`
 * @return {Object} Returns an object that has an `output` property with the compiled string.
 * @api public
 */

braces$2.compile = function (ast, options) {
  var proto = new braces$1(options)
  return proto.compile(ast, options)
}

/**
 * Clear the regex cache.
 *
 * ```js
 * braces.clearCache();
 * ```
 * @api public
 */

braces$2.clearCache = function () {
  cache$3 = braces$2.cache = {}
}

/**
 * Memoize a generated regex or function. A unique key is generated
 * from the method name, pattern, and user-defined options. Set
 * options.memoize to false to disable.
 */

function memoize$1(type, pattern, options, fn) {
  var key = utils_1.createKey(type + ':' + pattern, options)
  var disabled = options && options.cache === false
  if (disabled) {
    braces$2.clearCache()
    return fn(pattern, options)
  }

  if (cache$3.hasOwnProperty(key)) {
    return cache$3[key]
  }

  var res = fn(pattern, options)
  cache$3[key] = res
  return res
}

/**
 * Expose `Braces` constructor and methods
 * @type {Function}
 */

braces$2.Braces = braces$1
braces$2.compilers = compilers
braces$2.parsers = parsers
braces$2.cache = cache$3

/**
 * Expose `braces`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_braces = braces$2

var isExtendable$4 = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

var D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow =
  Object.assign ||
  function (obj /*, objects*/) {
    if (obj === null || typeof obj === 'undefined') {
      throw new TypeError('Cannot convert undefined or null to object')
    }
    if (!isObject$c(obj)) {
      obj = {}
    }
    for (var i = 1; i < arguments.length; i++) {
      var val = arguments[i]
      if (isString$5(val)) {
        val = toObject$3(val)
      }
      if (isObject$c(val)) {
        assign$5(obj, val)
        D__git_packageInherit_node_modules_assignSymbols(obj, val)
      }
    }
    return obj
  }

function assign$5(a, b) {
  for (var key in b) {
    if (hasOwn$5(b, key)) {
      a[key] = b[key]
    }
  }
}

function isString$5(val) {
  return val && typeof val === 'string'
}

function toObject$3(str) {
  var obj = {}
  for (var i in str) {
    obj[i] = str[i]
  }
  return obj
}

function isObject$c(val) {
  return (val && typeof val === 'object') || isExtendable$4(val)
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn$5(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

var isExtendable$5 = function isExtendable(val) {
  return isPlainObject(val) || typeof val === 'function' || Array.isArray(val)
}

var D__git_packageInherit_node_modules_nanomatch_node_modules_extendShallow =
  Object.assign ||
  function (obj /*, objects*/) {
    if (obj === null || typeof obj === 'undefined') {
      throw new TypeError('Cannot convert undefined or null to object')
    }
    if (!isObject$d(obj)) {
      obj = {}
    }
    for (var i = 1; i < arguments.length; i++) {
      var val = arguments[i]
      if (isString$6(val)) {
        val = toObject$4(val)
      }
      if (isObject$d(val)) {
        assign$6(obj, val)
        D__git_packageInherit_node_modules_assignSymbols(obj, val)
      }
    }
    return obj
  }

function assign$6(a, b) {
  for (var key in b) {
    if (hasOwn$6(b, key)) {
      a[key] = b[key]
    }
  }
}

function isString$6(val) {
  return val && typeof val === 'string'
}

function toObject$4(str) {
  var obj = {}
  for (var i in str) {
    obj[i] = str[i]
  }
  return obj
}

function isObject$d(val) {
  return (val && typeof val === 'object') || isExtendable$5(val)
}

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn$6(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

/**
 * Nanomatch compilers
 */

var compilers$1 = function (nanomatch, options) {
  function slash() {
    if (options && typeof options.slash === 'string') {
      return options.slash
    }
    if (options && typeof options.slash === 'function') {
      return options.slash.call(nanomatch)
    }
    return '\\\\/'
  }

  function star() {
    if (options && typeof options.star === 'string') {
      return options.star
    }
    if (options && typeof options.star === 'function') {
      return options.star.call(nanomatch)
    }
    return '[^' + slash() + ']*?'
  }

  var ast = (nanomatch.ast = nanomatch.parser.ast)
  ast.state = nanomatch.parser.state
  nanomatch.compiler.state = ast.state
  nanomatch.compiler

    /**
     * Negation / escaping
     */

    .set('not', function (node) {
      var prev = this.prev()
      if (this.options.nonegate === true || prev.type !== 'bos') {
        return this.emit('\\' + node.val, node)
      }
      return this.emit(node.val, node)
    })
    .set('escape', function (node) {
      if (this.options.unescape && /^[-\w_.]/.test(node.val)) {
        return this.emit(node.val, node)
      }
      return this.emit('\\' + node.val, node)
    })
    .set('quoted', function (node) {
      return this.emit(node.val, node)
    })

    /**
     * Regex
     */

    .set('dollar', function (node) {
      if (node.parent.type === 'bracket') {
        return this.emit(node.val, node)
      }
      return this.emit('\\' + node.val, node)
    })

    /**
     * Dot: "."
     */

    .set('dot', function (node) {
      if (node.dotfiles === true) this.dotfiles = true
      return this.emit('\\' + node.val, node)
    })

    /**
     * Slashes: "/" and "\"
     */

    .set('backslash', function (node) {
      return this.emit(node.val, node)
    })
    .set('slash', function (node, nodes, i) {
      var val = '[' + slash() + ']'
      var parent = node.parent
      var prev = this.prev()

      // set "node.hasSlash" to true on all ancestor parens nodes
      while (parent.type === 'paren' && !parent.hasSlash) {
        parent.hasSlash = true
        parent = parent.parent
      }

      if (prev.addQmark) {
        val += '?'
      }

      // word boundary
      if (node.rest.slice(0, 2) === '\\b') {
        return this.emit(val, node)
      }

      // globstars
      if (node.parsed === '**' || node.parsed === './**') {
        this.output = '(?:' + this.output
        return this.emit(val + ')?', node)
      }

      // negation
      if (node.parsed === '!**' && this.options.nonegate !== true) {
        return this.emit(val + '?\\b', node)
      }
      return this.emit(val, node)
    })

    /**
     * Square brackets
     */

    .set('bracket', function (node) {
      var close = node.close
      var open = !node.escaped ? '[' : '\\['
      var negated = node.negated
      var inner = node.inner
      var val = node.val

      if (node.escaped === true) {
        inner = inner.replace(/\\?(\W)/g, '\\$1')
        negated = ''
      }

      if (inner === ']-') {
        inner = '\\]\\-'
      }

      if (negated && inner.indexOf('.') === -1) {
        inner += '.'
      }
      if (negated && inner.indexOf('/') === -1) {
        inner += '/'
      }

      val = open + negated + inner + close
      return this.emit(val, node)
    })

    /**
     * Square: "[.]" (only matches a single character in brackets)
     */

    .set('square', function (node) {
      var val = (/^\W/.test(node.val) ? '\\' : '') + node.val
      return this.emit(val, node)
    })

    /**
     * Question mark: "?"
     */

    .set('qmark', function (node) {
      var prev = this.prev()
      // don't use "slash" variable so that we always avoid
      // matching backslashes and slashes with a qmark
      var val = '[^.\\\\/]'
      if (this.options.dot || (prev.type !== 'bos' && prev.type !== 'slash')) {
        val = '[^\\\\/]'
      }

      if (node.parsed.slice(-1) === '(') {
        var ch = node.rest.charAt(0)
        if (ch === '!' || ch === '=' || ch === ':') {
          return this.emit(node.val, node)
        }
      }

      if (node.val.length > 1) {
        val += '{' + node.val.length + '}'
      }
      return this.emit(val, node)
    })

    /**
     * Plus
     */

    .set('plus', function (node) {
      var prev = node.parsed.slice(-1)
      if (prev === ']' || prev === ')') {
        return this.emit(node.val, node)
      }
      if (
        !this.output ||
        (/[?*+]/.test(ch) && node.parent.type !== 'bracket')
      ) {
        return this.emit('\\+', node)
      }
      var ch = this.output.slice(-1)
      if (/\w/.test(ch) && !node.inside) {
        return this.emit('+\\+?', node)
      }
      return this.emit('+', node)
    })

    /**
     * globstar: '**'
     */

    .set('globstar', function (node, nodes, i) {
      if (!this.output) {
        this.state.leadingGlobstar = true
      }

      var prev = this.prev()
      var before = this.prev(2)
      var next = this.next()
      var after = this.next(2)
      var type = prev.type
      var val = node.val

      if (prev.type === 'slash' && next.type === 'slash') {
        if (before.type === 'text') {
          this.output += '?'

          if (after.type !== 'text') {
            this.output += '\\b'
          }
        }
      }

      var parsed = node.parsed
      if (parsed.charAt(0) === '!') {
        parsed = parsed.slice(1)
      }

      var isInside = node.isInside.paren || node.isInside.brace
      if (parsed && type !== 'slash' && type !== 'bos' && !isInside) {
        val = star()
      } else {
        val =
          this.options.dot !== true
            ? '(?:(?!(?:[' + slash() + ']|^)\\.).)*?'
            : '(?:(?!(?:[' +
              slash() +
              ']|^)(?:\\.{1,2})($|[' +
              slash() +
              ']))(?!\\.{2}).)*?'
      }

      if ((type === 'slash' || type === 'bos') && this.options.dot !== true) {
        val = '(?!\\.)' + val
      }

      if (
        prev.type === 'slash' &&
        next.type === 'slash' &&
        before.type !== 'text'
      ) {
        if (after.type === 'text' || after.type === 'star') {
          node.addQmark = true
        }
      }

      if (this.options.capture) {
        val = '(' + val + ')'
      }

      return this.emit(val, node)
    })

    /**
     * Star: "*"
     */

    .set('star', function (node, nodes, i) {
      var prior = nodes[i - 2] || {}
      var prev = this.prev()
      var next = this.next()
      var type = prev.type

      function isStart(n) {
        return n.type === 'bos' || n.type === 'slash'
      }

      if (this.output === '' && this.options.contains !== true) {
        this.output = '(?![' + slash() + '])'
      }

      if (type === 'bracket' && this.options.bash === false) {
        var str = next && next.type === 'bracket' ? star() : '*?'
        if (!prev.nodes || prev.nodes[1].type !== 'posix') {
          return this.emit(str, node)
        }
      }

      var prefix =
        !this.dotfiles && type !== 'text' && type !== 'escape'
          ? this.options.dot
            ? '(?!(?:^|[' + slash() + '])\\.{1,2}(?:$|[' + slash() + ']))'
            : '(?!\\.)'
          : ''

      if (isStart(prev) || (isStart(prior) && type === 'not')) {
        if (prefix !== '(?!\\.)') {
          prefix += '(?!(\\.{2}|\\.[' + slash() + ']))(?=.)'
        } else {
          prefix += '(?=.)'
        }
      } else if (prefix === '(?!\\.)') {
        prefix = ''
      }

      if (
        prev.type === 'not' &&
        prior.type === 'bos' &&
        this.options.dot === true
      ) {
        this.output = '(?!\\.)' + this.output
      }

      var output = prefix + star()
      if (this.options.capture) {
        output = '(' + output + ')'
      }

      return this.emit(output, node)
    })

    /**
     * Text
     */

    .set('text', function (node) {
      return this.emit(node.val, node)
    })

    /**
     * End-of-string
     */

    .set('eos', function (node) {
      var prev = this.prev()
      var val = node.val

      this.output = '(?:\\.[' + slash() + '](?=.))?' + this.output
      if (
        this.state.metachar &&
        prev.type !== 'qmark' &&
        prev.type !== 'slash'
      ) {
        val += this.options.contains
          ? '[' + slash() + ']?'
          : '(?:[' + slash() + ']|$)'
      }

      return this.emit(val, node)
    })

  /**
   * Allow custom compilers to be passed on options
   */

  if (options && typeof options.compilers === 'function') {
    options.compilers(nanomatch.compiler)
  }
}

/**
 * Characters to use in negation regex (we want to "not" match
 * characters that are matched by other parsers)
 */

var cached
var NOT_REGEX = '[\\[!*+?$^"\'.\\\\/]+'
var not = createTextRegex(NOT_REGEX)

/**
 * Nanomatch parsers
 */

var parsers$1 = function (nanomatch, options) {
  var parser = nanomatch.parser
  var opts = parser.options

  parser.state = {
    slashes: 0,
    paths: [],
  }

  parser.ast.state = parser.state
  parser

    /**
     * Beginning-of-string
     */

    .capture('prefix', function () {
      if (this.parsed) return
      var m = this.match(/^\.[\\/]/)
      if (!m) return
      this.state.strictOpen = !!this.options.strictOpen
      this.state.addPrefix = true
    })

    /**
     * Escape: "\\."
     */

    .capture('escape', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(/^(?:\\(.)|([$^]))/)
      if (!m) return

      return pos({
        type: 'escape',
        val: m[2] || m[1],
      })
    })

    /**
     * Quoted strings
     */

    .capture('quoted', function () {
      var pos = this.position()
      var m = this.match(/^["']/)
      if (!m) return

      var quote = m[0]
      if (this.input.indexOf(quote) === -1) {
        return pos({
          type: 'escape',
          val: quote,
        })
      }

      var tok = advanceTo(this.input, quote)
      this.consume(tok.len)

      return pos({
        type: 'quoted',
        val: tok.esc,
      })
    })

    /**
     * Negations: "!"
     */

    .capture('not', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(this.notRegex || /^!+/)
      if (!m) return
      var val = m[0]

      var isNegated = val.length % 2 === 1
      if (parsed === '' && !isNegated) {
        val = ''
      }

      // if nothing has been parsed, we know `!` is at the start,
      // so we need to wrap the result in a negation regex
      if (parsed === '' && isNegated && this.options.nonegate !== true) {
        this.bos.val = '(?!^(?:'
        this.append = ')$).*'
        val = ''
      }
      return pos({
        type: 'not',
        val: val,
      })
    })

    /**
     * Dot: "."
     */

    .capture('dot', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\.+/)
      if (!m) return

      var val = m[0]
      this.state.dot =
        val === '.' && (parsed === '' || parsed.slice(-1) === '/')

      return pos({
        type: 'dot',
        dotfiles: this.state.dot,
        val: val,
      })
    })

    /**
     * Plus: "+"
     */

    .capture('plus', /^\+(?!\()/)

    /**
     * Question mark: "?"
     */

    .capture('qmark', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\?+(?!\()/)
      if (!m) return

      this.state.metachar = true
      this.state.qmark = true

      return pos({
        type: 'qmark',
        parsed: parsed,
        val: m[0],
      })
    })

    /**
     * Globstar: "**"
     */

    .capture('globstar', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\*{2}(?![*(])(?=[,)/]|$)/)
      if (!m) return

      var type = opts.noglobstar !== true ? 'globstar' : 'star'
      var node = pos({ type: type, parsed: parsed })
      this.state.metachar = true

      while (this.input.slice(0, 4) === '/**/') {
        this.input = this.input.slice(3)
      }

      node.isInside = {
        brace: this.isInside('brace'),
        paren: this.isInside('paren'),
      }

      if (type === 'globstar') {
        this.state.globstar = true
        node.val = '**'
      } else {
        this.state.star = true
        node.val = '*'
      }

      return node
    })

    /**
     * Star: "*"
     */

    .capture('star', function () {
      var pos = this.position()
      var starRe = /^(?:\*(?![*(])|[*]{3,}(?!\()|[*]{2}(?![(/]|$)|\*(?=\*\())/
      var m = this.match(starRe)
      if (!m) return

      this.state.metachar = true
      this.state.star = true
      return pos({
        type: 'star',
        val: m[0],
      })
    })

    /**
     * Slash: "/"
     */

    .capture('slash', function () {
      var pos = this.position()
      var m = this.match(/^\//)
      if (!m) return

      this.state.slashes++
      return pos({
        type: 'slash',
        val: m[0],
      })
    })

    /**
     * Backslash: "\\"
     */

    .capture('backslash', function () {
      var pos = this.position()
      var m = this.match(/^\\(?![*+?(){}[\]'"])/)
      if (!m) return

      var val = m[0]

      if (this.isInside('bracket')) {
        val = '\\'
      } else if (val.length > 1) {
        val = '\\\\'
      }

      return pos({
        type: 'backslash',
        val: val,
      })
    })

    /**
     * Square: "[.]"
     */

    .capture('square', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(/^\[([^!^\\])\]/)
      if (!m) return

      return pos({
        type: 'square',
        val: m[1],
      })
    })

    /**
     * Brackets: "[...]" (basic, this can be overridden by other parsers)
     */

    .capture('bracket', function () {
      var pos = this.position()
      var m = this.match(/^(?:\[([!^]?)([^\]]+|\]-)(\]|[^*+?]+)|\[)/)
      if (!m) return

      var val = m[0]
      var negated = m[1] ? '^' : ''
      var inner = (m[2] || '').replace(/\\\\+/, '\\\\')
      var close = m[3] || ''

      if (m[2] && inner.length < m[2].length) {
        val = val.replace(/\\\\+/, '\\\\')
      }

      var esc = this.input.slice(0, 2)
      if (inner === '' && esc === '\\]') {
        inner += esc
        this.consume(2)

        var str = this.input
        var idx = -1
        var ch

        while ((ch = str[++idx])) {
          this.consume(1)
          if (ch === ']') {
            close = ch
            break
          }
          inner += ch
        }
      }

      return pos({
        type: 'bracket',
        val: val,
        escaped: close !== ']',
        negated: negated,
        inner: inner,
        close: close,
      })
    })

    /**
     * Text
     */

    .capture('text', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(not)
      if (!m || !m[0]) return

      return pos({
        type: 'text',
        val: m[0],
      })
    })

  /**
   * Allow custom parsers to be passed on options
   */

  if (options && typeof options.parsers === 'function') {
    options.parsers(nanomatch.parser)
  }
}

/**
 * Advance to the next non-escaped character
 */

function advanceTo(input, endChar) {
  var ch = input.charAt(0)
  var tok = { len: 1, val: '', esc: '' }
  var idx = 0

  function advance() {
    if (ch !== '\\') {
      tok.esc += '\\' + ch
      tok.val += ch
    }

    ch = input.charAt(++idx)
    tok.len++

    if (ch === '\\') {
      advance()
      advance()
    }
  }

  while (ch && ch !== endChar) {
    advance()
  }
  return tok
}

/**
 * Create text regex
 */

function createTextRegex(pattern) {
  if (cached) return cached
  var opts = { contains: true, strictClose: false }
  var not = D__git_packageInherit_node_modules_regexNot.create(pattern, opts)
  var re = D__git_packageInherit_node_modules_toRegex(
    '^(?:[*]\\((?=.)|' + not + ')',
    opts,
  )
  return (cached = re)
}

/**
 * Expose negation string
 */

var not_1 = NOT_REGEX
parsers$1.not = not_1

var D__git_packageInherit_node_modules_fragmentCache = createCommonjsModule(
  function (module, exports) {
    /**
     * Create a new `FragmentCache` with an optional object to use for `caches`.
     *
     * ```js
     * var fragment = new FragmentCache();
     * ```
     * @name FragmentCache
     * @param {String} `cacheName`
     * @return {Object} Returns the [map-cache][] instance.
     * @api public
     */

    function FragmentCache(caches) {
      this.caches = caches || {}
    }

    /**
     * Prototype
     */

    FragmentCache.prototype = {
      /**
       * Get cache `name` from the `fragment.caches` object. Creates a new
       * `MapCache` if it doesn't already exist.
       *
       * ```js
       * var cache = fragment.cache('files');
       * console.log(fragment.caches.hasOwnProperty('files'));
       * //=> true
       * ```
       * @name .cache
       * @param {String} `cacheName`
       * @return {Object} Returns the [map-cache][] instance.
       * @api public
       */

      cache: function (cacheName) {
        return (
          this.caches[cacheName] ||
          (this.caches[
            cacheName
          ] = new D__git_packageInherit_node_modules_mapCache())
        )
      },

      /**
       * Set a value for property `key` on cache `name`
       *
       * ```js
       * fragment.set('files', 'somefile.js', new File({path: 'somefile.js'}));
       * ```
       * @name .set
       * @param {String} `name`
       * @param {String} `key` Property name to set
       * @param {any} `val` The value of `key`
       * @return {Object} The cache instance for chaining
       * @api public
       */

      set: function (cacheName, key, val) {
        var cache = this.cache(cacheName)
        cache.set(key, val)
        return cache
      },

      /**
       * Returns true if a non-undefined value is set for `key` on fragment cache `name`.
       *
       * ```js
       * var cache = fragment.cache('files');
       * cache.set('somefile.js');
       *
       * console.log(cache.has('somefile.js'));
       * //=> true
       *
       * console.log(cache.has('some-other-file.js'));
       * //=> false
       * ```
       * @name .has
       * @param {String} `name` Cache name
       * @param {String} `key` Optionally specify a property to check for on cache `name`
       * @return {Boolean}
       * @api public
       */

      has: function (cacheName, key) {
        return typeof this.get(cacheName, key) !== 'undefined'
      },

      /**
       * Get `name`, or if specified, the value of `key`. Invokes the [cache]() method,
       * so that cache `name` will be created it doesn't already exist. If `key` is not passed,
       * the entire cache (`name`) is returned.
       *
       * ```js
       * var Vinyl = require('vinyl');
       * var cache = fragment.cache('files');
       * cache.set('somefile.js', new Vinyl({path: 'somefile.js'}));
       * console.log(cache.get('somefile.js'));
       * //=> <File "somefile.js">
       * ```
       * @name .get
       * @param {String} `name`
       * @return {Object} Returns cache `name`, or the value of `key` if specified
       * @api public
       */

      get: function (name, key) {
        var cache = this.cache(name)
        if (typeof key === 'string') {
          return cache.get(key)
        }
        return cache
      },
    }

    /**
     * Expose `FragmentCache`
     */

    exports = module.exports = FragmentCache
  },
)

var cache$4 = new D__git_packageInherit_node_modules_fragmentCache()

var D__git_packageInherit_node_modules_isWindows = createCommonjsModule(
  function (module, exports) {
    /*!
     * is-windows <https://github.com/jonschlinkert/is-windows>
     *
     * Copyright © 2015-2018, Jon Schlinkert.
     * Released under the MIT License.
     */

    ;(function (factory) {
      if (exports && 'object' === 'object' && 'object' !== 'undefined') {
        module.exports = factory()
      } else if (typeof window !== 'undefined') {
        window.isWindows = factory()
      } else if (typeof commonjsGlobal !== 'undefined') {
        commonjsGlobal.isWindows = factory()
      } else if (typeof self !== 'undefined') {
        self.isWindows = factory()
      } else {
        this.isWindows = factory()
      }
    })(function () {
      return function isWindows() {
        return (
          process &&
          (process.platform === 'win32' ||
            /^(msys|cygwin)$/.test(process.env.OSTYPE))
        )
      }
    })
  },
)

var define$3 =
  typeof Reflect !== 'undefined' && Reflect.defineProperty
    ? Reflect.defineProperty
    : Object.defineProperty

var D__git_packageInherit_node_modules_nanomatch_node_modules_defineProperty = function defineProperty(
  obj,
  key,
  val,
) {
  if (!isobject(obj) && typeof obj !== 'function' && !Array.isArray(obj)) {
    throw new TypeError('expected an object, function, or array')
  }

  if (typeof key !== 'string') {
    throw new TypeError('expected "key" to be a string')
  }

  if (D__git_packageInherit_node_modules_isDescriptor(val)) {
    define$3(obj, key, val)
    return obj
  }

  define$3(obj, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })

  return obj
}

/*!
 * arr-diff <https://github.com/jonschlinkert/arr-diff>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var D__git_packageInherit_node_modules_arrDiff = function diff(
  arr /*, arrays*/,
) {
  var len = arguments.length
  var idx = 0
  while (++idx < len) {
    arr = diffArray(arr, arguments[idx])
  }
  return arr
}

function diffArray(one, two) {
  if (!Array.isArray(two)) {
    return one.slice()
  }

  var tlen = two.length
  var olen = one.length
  var idx = -1
  var arr = []

  while (++idx < olen) {
    var ele = one[idx]

    var hasEle = false
    for (var i = 0; i < tlen; i++) {
      var val = two[i]

      if (ele === val) {
        hasEle = true
        break
      }
    }

    if (hasEle === false) {
      arr.push(ele)
    }
  }
  return arr
}

var D__git_packageInherit_node_modules_object_pick = function pick(obj, keys) {
  if (!isobject(obj) && typeof obj !== 'function') {
    return {}
  }

  var res = {}
  if (typeof keys === 'string') {
    if (keys in obj) {
      res[keys] = obj[keys]
    }
    return res
  }

  var len = keys.length
  var idx = -1

  while (++idx < len) {
    var key = keys[idx]
    if (key in obj) {
      res[key] = obj[key]
    }
  }
  return res
}

var toString$9 = Object.prototype.toString

var D__git_packageInherit_node_modules_nanomatch_node_modules_kindOf = function kindOf(
  val,
) {
  if (val === void 0) return 'undefined'
  if (val === null) return 'null'

  var type = typeof val
  if (type === 'boolean') return 'boolean'
  if (type === 'string') return 'string'
  if (type === 'number') return 'number'
  if (type === 'symbol') return 'symbol'
  if (type === 'function') {
    return isGeneratorFn$3(val) ? 'generatorfunction' : 'function'
  }

  if (isArray$3(val)) return 'array'
  if (isBuffer$5(val)) return 'buffer'
  if (isArguments$3(val)) return 'arguments'
  if (isDate$3(val)) return 'date'
  if (isError$3(val)) return 'error'
  if (isRegexp$3(val)) return 'regexp'

  switch (ctorName$3(val)) {
    case 'Symbol':
      return 'symbol'
    case 'Promise':
      return 'promise'

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap':
      return 'weakmap'
    case 'WeakSet':
      return 'weakset'
    case 'Map':
      return 'map'
    case 'Set':
      return 'set'

    // 8-bit typed arrays
    case 'Int8Array':
      return 'int8array'
    case 'Uint8Array':
      return 'uint8array'
    case 'Uint8ClampedArray':
      return 'uint8clampedarray'

    // 16-bit typed arrays
    case 'Int16Array':
      return 'int16array'
    case 'Uint16Array':
      return 'uint16array'

    // 32-bit typed arrays
    case 'Int32Array':
      return 'int32array'
    case 'Uint32Array':
      return 'uint32array'
    case 'Float32Array':
      return 'float32array'
    case 'Float64Array':
      return 'float64array'
  }

  if (isGeneratorObj$3(val)) {
    return 'generator'
  }

  // Non-plain objects
  type = toString$9.call(val)
  switch (type) {
    case '[object Object]':
      return 'object'
    // iterators
    case '[object Map Iterator]':
      return 'mapiterator'
    case '[object Set Iterator]':
      return 'setiterator'
    case '[object String Iterator]':
      return 'stringiterator'
    case '[object Array Iterator]':
      return 'arrayiterator'
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '')
}

function ctorName$3(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null
}

function isArray$3(val) {
  if (Array.isArray) return Array.isArray(val)
  return val instanceof Array
}

function isError$3(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  )
}

function isDate$3(val) {
  if (val instanceof Date) return true
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  )
}

function isRegexp$3(val) {
  if (val instanceof RegExp) return true
  return (
    typeof val.flags === 'string' &&
    typeof val.ignoreCase === 'boolean' &&
    typeof val.multiline === 'boolean' &&
    typeof val.global === 'boolean'
  )
}

function isGeneratorFn$3(name, val) {
  return ctorName$3(name) === 'GeneratorFunction'
}

function isGeneratorObj$3(val) {
  return (
    typeof val.throw === 'function' &&
    typeof val.return === 'function' &&
    typeof val.next === 'function'
  )
}

function isArguments$3(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true
    }
  }
  return false
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer$5(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val)
  }
  return false
}

var utils_1$1 = createCommonjsModule(function (module) {
  var utils = module.exports

  /**
   * Module dependencies
   */

  var isWindows = D__git_packageInherit_node_modules_isWindows()

  utils.define = D__git_packageInherit_node_modules_nanomatch_node_modules_defineProperty
  utils.diff = D__git_packageInherit_node_modules_arrDiff
  utils.extend = D__git_packageInherit_node_modules_nanomatch_node_modules_extendShallow
  utils.pick = D__git_packageInherit_node_modules_object_pick
  utils.typeOf = D__git_packageInherit_node_modules_nanomatch_node_modules_kindOf
  utils.unique = D__git_packageInherit_node_modules_arrayUnique

  /**
   * Returns true if the given value is effectively an empty string
   */

  utils.isEmptyString = function (val) {
    return String(val) === '' || String(val) === './'
  }

  /**
   * Returns true if the platform is windows, or `path.sep` is `\\`.
   * This is defined as a function to allow `path.sep` to be set in unit tests,
   * or by the user, if there is a reason to do so.
   * @return {Boolean}
   */

  utils.isWindows = function () {
    return path__default['default'].sep === '\\' || isWindows === true
  }

  /**
   * Return the last element from an array
   */

  utils.last = function (arr, n) {
    return arr[arr.length - (n || 1)]
  }

  /**
   * Get the `Snapdragon` instance to use
   */

  utils.instantiate = function (ast, options) {
    var snapdragon
    // if an instance was created by `.parse`, use that instance
    if (utils.typeOf(ast) === 'object' && ast.snapdragon) {
      snapdragon = ast.snapdragon
      // if the user supplies an instance on options, use that instance
    } else if (utils.typeOf(options) === 'object' && options.snapdragon) {
      snapdragon = options.snapdragon
      // create a new instance
    } else {
      snapdragon = new D__git_packageInherit_node_modules_snapdragon(options)
    }

    utils.define(snapdragon, 'parse', function (str, options) {
      var parsed = D__git_packageInherit_node_modules_snapdragon.prototype.parse.call(
        this,
        str,
        options,
      )
      parsed.input = str

      // escape unmatched brace/bracket/parens
      var last = this.parser.stack.pop()
      if (last && this.options.strictErrors !== true) {
        var open = last.nodes[0]
        var inner = last.nodes[1]
        if (last.type === 'bracket') {
          if (inner.val.charAt(0) === '[') {
            inner.val = '\\' + inner.val
          }
        } else {
          open.val = '\\' + open.val
          var sibling = open.parent.nodes[1]
          if (sibling.type === 'star') {
            sibling.loose = true
          }
        }
      }

      // add non-enumerable parser reference
      utils.define(parsed, 'parser', this.parser)
      return parsed
    })

    return snapdragon
  }

  /**
   * Create the key to use for memoization. The key is generated
   * by iterating over the options and concatenating key-value pairs
   * to the pattern string.
   */

  utils.createKey = function (pattern, options) {
    if (typeof options === 'undefined') {
      return pattern
    }
    var key = pattern
    for (var prop in options) {
      if (options.hasOwnProperty(prop)) {
        key += ';' + prop + '=' + String(options[prop])
      }
    }
    return key
  }

  /**
   * Cast `val` to an array
   * @return {Array}
   */

  utils.arrayify = function (val) {
    if (typeof val === 'string') return [val]
    return val ? (Array.isArray(val) ? val : [val]) : []
  }

  /**
   * Return true if `val` is a non-empty string
   */

  utils.isString = function (val) {
    return typeof val === 'string'
  }

  /**
   * Return true if `val` is a non-empty string
   */

  utils.isRegex = function (val) {
    return utils.typeOf(val) === 'regexp'
  }

  /**
   * Return true if `val` is a non-empty string
   */

  utils.isObject = function (val) {
    return utils.typeOf(val) === 'object'
  }

  /**
   * Escape regex characters in the given string
   */

  utils.escapeRegex = function (str) {
    return str.replace(/[-[\]{}()^$|*+?.\\/\s]/g, '\\$&')
  }

  /**
   * Combines duplicate characters in the provided `input` string.
   * @param {String} `input`
   * @returns {String}
   */

  utils.combineDupes = function (input, patterns) {
    patterns = utils.arrayify(patterns).join('|').split('|')
    patterns = patterns.map(function (s) {
      return s.replace(/\\?([+*\\/])/g, '\\$1')
    })
    var substr = patterns.join('|')
    var regex = new RegExp('(' + substr + ')(?=\\1)', 'g')
    return input.replace(regex, '')
  }

  /**
   * Returns true if the given `str` has special characters
   */

  utils.hasSpecialChars = function (str) {
    return /(?:(?:(^|\/)[!.])|[*?+()|[\]{}]|[+@]\()/.test(str)
  }

  /**
   * Normalize slashes in the given filepath.
   *
   * @param {String} `filepath`
   * @return {String}
   */

  utils.toPosixPath = function (str) {
    return str.replace(/\\+/g, '/')
  }

  /**
   * Strip backslashes before special characters in a string.
   *
   * @param {String} `str`
   * @return {String}
   */

  utils.unescape = function (str) {
    return utils.toPosixPath(str.replace(/\\(?=[*+?!.])/g, ''))
  }

  /**
   * Strip the drive letter from a windows filepath
   * @param {String} `fp`
   * @return {String}
   */

  utils.stripDrive = function (fp) {
    return utils.isWindows() ? fp.replace(/^[a-z]:[\\/]+?/i, '/') : fp
  }

  /**
   * Strip the prefix from a filepath
   * @param {String} `fp`
   * @return {String}
   */

  utils.stripPrefix = function (str) {
    if (
      str.charAt(0) === '.' &&
      (str.charAt(1) === '/' || str.charAt(1) === '\\')
    ) {
      return str.slice(2)
    }
    return str
  }

  /**
   * Returns true if `str` is a common character that doesn't need
   * to be processed to be used for matching.
   * @param {String} `str`
   * @return {Boolean}
   */

  utils.isSimpleChar = function (str) {
    return str.trim() === '' || str === '.'
  }

  /**
   * Returns true if the given str is an escaped or
   * unescaped path character
   */

  utils.isSlash = function (str) {
    return str === '/' || str === '\\/' || str === '\\' || str === '\\\\'
  }

  /**
   * Returns a function that returns true if the given
   * pattern matches or contains a `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.matchPath = function (pattern, options) {
    return options && options.contains
      ? utils.containsPattern(pattern, options)
      : utils.equalsPattern(pattern, options)
  }

  /**
   * Returns true if the given (original) filepath or unixified path are equal
   * to the given pattern.
   */

  utils._equals = function (filepath, unixPath, pattern) {
    return pattern === filepath || pattern === unixPath
  }

  /**
   * Returns true if the given (original) filepath or unixified path contain
   * the given pattern.
   */

  utils._contains = function (filepath, unixPath, pattern) {
    return filepath.indexOf(pattern) !== -1 || unixPath.indexOf(pattern) !== -1
  }

  /**
   * Returns a function that returns true if the given
   * pattern is the same as a given `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.equalsPattern = function (pattern, options) {
    var unixify = utils.unixify(options)
    options = options || {}

    return function fn(filepath) {
      var equal = utils._equals(filepath, unixify(filepath), pattern)
      if (equal === true || options.nocase !== true) {
        return equal
      }
      var lower = filepath.toLowerCase()
      return utils._equals(lower, unixify(lower), pattern)
    }
  }

  /**
   * Returns a function that returns true if the given
   * pattern contains a `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.containsPattern = function (pattern, options) {
    var unixify = utils.unixify(options)
    options = options || {}

    return function (filepath) {
      var contains = utils._contains(filepath, unixify(filepath), pattern)
      if (contains === true || options.nocase !== true) {
        return contains
      }
      var lower = filepath.toLowerCase()
      return utils._contains(lower, unixify(lower), pattern)
    }
  }

  /**
   * Returns a function that returns true if the given
   * regex matches the `filename` of a file path.
   *
   * @param {RegExp} `re` Matching regex
   * @return {Function}
   */

  utils.matchBasename = function (re) {
    return function (filepath) {
      return (
        re.test(filepath) ||
        re.test(path__default['default'].basename(filepath))
      )
    }
  }

  /**
   * Returns the given value unchanced.
   * @return {any}
   */

  utils.identity = function (val) {
    return val
  }

  /**
   * Determines the filepath to return based on the provided options.
   * @return {any}
   */

  utils.value = function (str, unixify, options) {
    if (options && options.unixify === false) {
      return str
    }
    if (options && typeof options.unixify === 'function') {
      return options.unixify(str)
    }
    return unixify(str)
  }

  /**
   * Returns a function that normalizes slashes in a string to forward
   * slashes, strips `./` from beginning of paths, and optionally unescapes
   * special characters.
   * @return {Function}
   */

  utils.unixify = function (options) {
    var opts = options || {}
    return function (filepath) {
      if (opts.stripPrefix !== false) {
        filepath = utils.stripPrefix(filepath)
      }
      if (opts.unescape === true) {
        filepath = utils.unescape(filepath)
      }
      if (opts.unixify === true || utils.isWindows()) {
        filepath = utils.toPosixPath(filepath)
      }
      return filepath
    }
  }
})

/**
 * Module dependencies
 */

/**
 * Local dependencies
 */

var MAX_LENGTH$4 = 1024 * 64

/**
 * The main function takes a list of strings and one or more
 * glob patterns to use for matching.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm(list, patterns[, options]);
 *
 * console.log(nm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {Array} `list` A list of strings to match
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

function nanomatch(list, patterns, options) {
  patterns = utils_1$1.arrayify(patterns)
  list = utils_1$1.arrayify(list)

  var len = patterns.length
  if (list.length === 0 || len === 0) {
    return []
  }

  if (len === 1) {
    return nanomatch.match(list, patterns[0], options)
  }

  var negated = false
  var omit = []
  var keep = []
  var idx = -1

  while (++idx < len) {
    var pattern = patterns[idx]

    if (typeof pattern === 'string' && pattern.charCodeAt(0) === 33 /* ! */) {
      omit.push.apply(omit, nanomatch.match(list, pattern.slice(1), options))
      negated = true
    } else {
      keep.push.apply(keep, nanomatch.match(list, pattern, options))
    }
  }

  // minimatch.match parity
  if (negated && keep.length === 0) {
    if (options && options.unixify === false) {
      keep = list.slice()
    } else {
      var unixify = utils_1$1.unixify(options)
      for (var i = 0; i < list.length; i++) {
        keep.push(unixify(list[i]))
      }
    }
  }

  var matches = utils_1$1.diff(keep, omit)
  if (!options || options.nodupes !== false) {
    return utils_1$1.unique(matches)
  }

  return matches
}

/**
 * Similar to the main function, but `pattern` must be a string.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.match(list, pattern[, options]);
 *
 * console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
 * //=> ['a.a', 'a.aa']
 * ```
 * @param {Array} `list` Array of strings to match
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of matches
 * @api public
 */

nanomatch.match = function (list, pattern, options) {
  if (Array.isArray(pattern)) {
    throw new TypeError('expected pattern to be a string')
  }

  var unixify = utils_1$1.unixify(options)
  var isMatch = memoize$2('match', pattern, options, nanomatch.matcher)
  var matches = []

  list = utils_1$1.arrayify(list)
  var len = list.length
  var idx = -1

  while (++idx < len) {
    var ele = list[idx]
    if (ele === pattern || isMatch(ele)) {
      matches.push(utils_1$1.value(ele, unixify, options))
    }
  }

  // if no options were passed, uniquify results and return
  if (typeof options === 'undefined') {
    return utils_1$1.unique(matches)
  }

  if (matches.length === 0) {
    if (options.failglob === true) {
      throw new Error('no matches found for "' + pattern + '"')
    }
    if (options.nonull === true || options.nullglob === true) {
      return [options.unescape ? utils_1$1.unescape(pattern) : pattern]
    }
  }

  // if `opts.ignore` was defined, diff ignored list
  if (options.ignore) {
    matches = nanomatch.not(matches, options.ignore, options)
  }

  return options.nodupes !== false ? utils_1$1.unique(matches) : matches
}

/**
 * Returns true if the specified `string` matches the given glob `pattern`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.isMatch(string, pattern[, options]);
 *
 * console.log(nm.isMatch('a.a', '*.a'));
 * //=> true
 * console.log(nm.isMatch('a.b', '*.a'));
 * //=> false
 * ```
 * @param {String} `string` String to match
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the string matches the glob pattern.
 * @api public
 */

nanomatch.isMatch = function (str, pattern, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (utils_1$1.isEmptyString(str) || utils_1$1.isEmptyString(pattern)) {
    return false
  }

  var equals = utils_1$1.equalsPattern(options)
  if (equals(str)) {
    return true
  }

  var isMatch = memoize$2('isMatch', pattern, options, nanomatch.matcher)
  return isMatch(str)
}

/**
 * Returns true if some of the elements in the given `list` match any of the
 * given glob `patterns`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.some(list, patterns[, options]);
 *
 * console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param  {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

nanomatch.some = function (list, patterns, options) {
  if (typeof list === 'string') {
    list = [list]
  }

  for (var i = 0; i < list.length; i++) {
    if (nanomatch(list[i], patterns, options).length === 1) {
      return true
    }
  }

  return false
}

/**
 * Returns true if every element in the given `list` matches
 * at least one of the given glob `patterns`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.every(list, patterns[, options]);
 *
 * console.log(nm.every('foo.js', ['foo.js']));
 * // true
 * console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));
 * // true
 * console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // false
 * console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param  {String|Array} `list` The string or array of strings to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

nanomatch.every = function (list, patterns, options) {
  if (typeof list === 'string') {
    list = [list]
  }

  for (var i = 0; i < list.length; i++) {
    if (nanomatch(list[i], patterns, options).length !== 1) {
      return false
    }
  }

  return true
}

/**
 * Returns true if **any** of the given glob `patterns`
 * match the specified `string`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.any(string, patterns[, options]);
 *
 * console.log(nm.any('a.a', ['b.*', '*.a']));
 * //=> true
 * console.log(nm.any('a.a', 'b.*'));
 * //=> false
 * ```
 * @param  {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

nanomatch.any = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (utils_1$1.isEmptyString(str) || utils_1$1.isEmptyString(patterns)) {
    return false
  }

  if (typeof patterns === 'string') {
    patterns = [patterns]
  }

  for (var i = 0; i < patterns.length; i++) {
    if (nanomatch.isMatch(str, patterns[i], options)) {
      return true
    }
  }
  return false
}

/**
 * Returns true if **all** of the given `patterns`
 * match the specified string.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.all(string, patterns[, options]);
 *
 * console.log(nm.all('foo.js', ['foo.js']));
 * // true
 *
 * console.log(nm.all('foo.js', ['*.js', '!foo.js']));
 * // false
 *
 * console.log(nm.all('foo.js', ['*.js', 'foo.js']));
 * // true
 *
 * console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
 * // true
 * ```
 * @param  {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

nanomatch.all = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (typeof patterns === 'string') {
    patterns = [patterns]
  }

  for (var i = 0; i < patterns.length; i++) {
    if (!nanomatch.isMatch(str, patterns[i], options)) {
      return false
    }
  }
  return true
}

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.not(list, patterns[, options]);
 *
 * console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

nanomatch.not = function (list, patterns, options) {
  var opts = D__git_packageInherit_node_modules_nanomatch_node_modules_extendShallow(
    {},
    options,
  )
  var ignore = opts.ignore
  delete opts.ignore

  list = utils_1$1.arrayify(list)

  var matches = utils_1$1.diff(list, nanomatch(list, patterns, opts))
  if (ignore) {
    matches = utils_1$1.diff(matches, nanomatch(list, ignore))
  }

  return opts.nodupes !== false ? utils_1$1.unique(matches) : matches
}

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.contains(string, pattern[, options]);
 *
 * console.log(nm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(nm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the patter matches any part of `str`.
 * @api public
 */

nanomatch.contains = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (typeof patterns === 'string') {
    if (utils_1$1.isEmptyString(str) || utils_1$1.isEmptyString(patterns)) {
      return false
    }

    var equals = utils_1$1.equalsPattern(patterns, options)
    if (equals(str)) {
      return true
    }
    var contains = utils_1$1.containsPattern(patterns, options)
    if (contains(str)) {
      return true
    }
  }

  var opts = D__git_packageInherit_node_modules_nanomatch_node_modules_extendShallow(
    {},
    options,
    { contains: true },
  )
  return nanomatch.any(str, patterns, opts)
}

/**
 * Returns true if the given pattern and options should enable
 * the `matchBase` option.
 * @return {Boolean}
 * @api private
 */

nanomatch.matchBase = function (pattern, options) {
  if ((pattern && pattern.indexOf('/') !== -1) || !options) return false
  return options.basename === true || options.matchBase === true
}

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.matchKeys(object, patterns[, options]);
 *
 * var obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(nm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

nanomatch.matchKeys = function (obj, patterns, options) {
  if (!utils_1$1.isObject(obj)) {
    throw new TypeError('expected the first argument to be an object')
  }
  var keys = nanomatch(Object.keys(obj), patterns, options)
  return utils_1$1.pick(obj, keys)
}

/**
 * Returns a memoized matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.matcher(pattern[, options]);
 *
 * var isMatch = nm.matcher('*.!(*a)');
 * console.log(isMatch('a.a'));
 * //=> false
 * console.log(isMatch('a.b'));
 * //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options` See available [options](#options) for changing how matches are performed.
 * @return {Function} Returns a matcher function.
 * @api public
 */

nanomatch.matcher = function matcher(pattern, options) {
  if (utils_1$1.isEmptyString(pattern)) {
    return function () {
      return false
    }
  }

  if (Array.isArray(pattern)) {
    return compose$1(pattern, options, matcher)
  }

  // if pattern is a regex
  if (pattern instanceof RegExp) {
    return test(pattern)
  }

  // if pattern is invalid
  if (!utils_1$1.isString(pattern)) {
    throw new TypeError('expected pattern to be an array, string or regex')
  }

  // if pattern is a non-glob string
  if (!utils_1$1.hasSpecialChars(pattern)) {
    if (options && options.nocase === true) {
      pattern = pattern.toLowerCase()
    }
    return utils_1$1.matchPath(pattern, options)
  }

  // if pattern is a glob string
  var re = nanomatch.makeRe(pattern, options)

  // if `options.matchBase` or `options.basename` is defined
  if (nanomatch.matchBase(pattern, options)) {
    return utils_1$1.matchBasename(re, options)
  }

  function test(regex) {
    var equals = utils_1$1.equalsPattern(options)
    var unixify = utils_1$1.unixify(options)

    return function (str) {
      if (equals(str)) {
        return true
      }

      if (regex.test(unixify(str))) {
        return true
      }
      return false
    }
  }

  // create matcher function
  var matcherFn = test(re)
  // set result object from compiler on matcher function,
  // as a non-enumerable property. useful for debugging
  utils_1$1.define(matcherFn, 'result', re.result)
  return matcherFn
}

/**
 * Returns an array of matches captured by `pattern` in `string, or
 * `null` if the pattern did not match.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.capture(pattern, string[, options]);
 *
 * console.log(nm.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(nm.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {String} `string` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns an array of captures if the string matches the glob pattern, otherwise `null`.
 * @api public
 */

nanomatch.capture = function (pattern, str, options) {
  var re = nanomatch.makeRe(
    pattern,
    D__git_packageInherit_node_modules_nanomatch_node_modules_extendShallow(
      { capture: true },
      options,
    ),
  )
  var unixify = utils_1$1.unixify(options)

  function match() {
    return function (string) {
      var match = re.exec(unixify(string))
      if (!match) {
        return null
      }

      return match.slice(1)
    }
  }

  var capture = memoize$2('capture', pattern, options, match)
  return capture(str)
}

/**
 * Create a regular expression from the given glob `pattern`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.makeRe(pattern[, options]);
 *
 * console.log(nm.makeRe('*.js'));
 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
 * ```
 * @param {String} `pattern` A glob pattern to convert to regex.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

nanomatch.makeRe = function (pattern, options) {
  if (pattern instanceof RegExp) {
    return pattern
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  if (pattern.length > MAX_LENGTH$4) {
    throw new Error(
      'expected pattern to be less than ' + MAX_LENGTH$4 + ' characters',
    )
  }

  function makeRe() {
    var opts = utils_1$1.extend({ wrap: false }, options)
    var result = nanomatch.create(pattern, opts)
    var regex = D__git_packageInherit_node_modules_toRegex(result.output, opts)
    utils_1$1.define(regex, 'result', result)
    return regex
  }

  return memoize$2('makeRe', pattern, options, makeRe)
}

/**
 * Parses the given glob `pattern` and returns an object with the compiled `output`
 * and optional source `map`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.create(pattern[, options]);
 *
 * console.log(nm.create('abc/*.js'));
 * // { options: { source: 'string', sourcemap: true },
 * //   state: {},
 * //   compilers:
 * //    { ... },
 * //   output: '(\\.[\\\\\\/])?abc\\/(?!\\.)(?=.)[^\\/]*?\\.js',
 * //   ast:
 * //    { type: 'root',
 * //      errors: [],
 * //      nodes:
 * //       [ ... ],
 * //      dot: false,
 * //      input: 'abc/*.js' },
 * //   parsingErrors: [],
 * //   map:
 * //    { version: 3,
 * //      sources: [ 'string' ],
 * //      names: [],
 * //      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',
 * //      sourcesContent: [ 'abc/*.js' ] },
 * //   position: { line: 1, column: 28 },
 * //   content: {},
 * //   files: {},
 * //   idx: 6 }
 * ```
 * @param {String} `pattern` Glob pattern to parse and compile.
 * @param {Object} `options` Any [options](#options) to change how parsing and compiling is performed.
 * @return {Object} Returns an object with the parsed AST, compiled string and optional source map.
 * @api public
 */

nanomatch.create = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }
  function create() {
    return nanomatch.compile(nanomatch.parse(pattern, options), options)
  }
  return memoize$2('create', pattern, options, create)
}

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.parse(pattern[, options]);
 *
 * var ast = nm.parse('a/{b,c}/d');
 * console.log(ast);
 * // { type: 'root',
 * //   errors: [],
 * //   input: 'a/{b,c}/d',
 * //   nodes:
 * //    [ { type: 'bos', val: '' },
 * //      { type: 'text', val: 'a/' },
 * //      { type: 'brace',
 * //        nodes:
 * //         [ { type: 'brace.open', val: '{' },
 * //           { type: 'text', val: 'b,c' },
 * //           { type: 'brace.close', val: '}' } ] },
 * //      { type: 'text', val: '/d' },
 * //      { type: 'eos', val: '' } ] }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an AST
 * @api public
 */

nanomatch.parse = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  function parse() {
    var snapdragon = utils_1$1.instantiate(null, options)
    parsers$1(snapdragon, options)

    var ast = snapdragon.parse(pattern, options)
    utils_1$1.define(ast, 'snapdragon', snapdragon)
    ast.input = pattern
    return ast
  }

  return memoize$2('parse', pattern, options, parse)
}

/**
 * Compile the given `ast` or string with the given `options`.
 *
 * ```js
 * var nm = require('nanomatch');
 * nm.compile(ast[, options]);
 *
 * var ast = nm.parse('a/{b,c}/d');
 * console.log(nm.compile(ast));
 * // { options: { source: 'string' },
 * //   state: {},
 * //   compilers:
 * //    { eos: [Function],
 * //      noop: [Function],
 * //      bos: [Function],
 * //      brace: [Function],
 * //      'brace.open': [Function],
 * //      text: [Function],
 * //      'brace.close': [Function] },
 * //   output: [ 'a/(b|c)/d' ],
 * //   ast:
 * //    { ... },
 * //   parsingErrors: [] }
 * ```
 * @param {Object|String} `ast`
 * @param {Object} `options`
 * @return {Object} Returns an object that has an `output` property with the compiled string.
 * @api public
 */

nanomatch.compile = function (ast, options) {
  if (typeof ast === 'string') {
    ast = nanomatch.parse(ast, options)
  }

  function compile() {
    var snapdragon = utils_1$1.instantiate(ast, options)
    compilers$1(snapdragon, options)
    return snapdragon.compile(ast, options)
  }

  return memoize$2('compile', ast.input, options, compile)
}

/**
 * Clear the regex cache.
 *
 * ```js
 * nm.clearCache();
 * ```
 * @api public
 */

nanomatch.clearCache = function () {
  nanomatch.cache.__data__ = {}
}

/**
 * Compose a matcher function with the given patterns.
 * This allows matcher functions to be compiled once and
 * called multiple times.
 */

function compose$1(patterns, options, matcher) {
  var matchers

  return memoize$2('compose', String(patterns), options, function () {
    return function (file) {
      // delay composition until it's invoked the first time,
      // after that it won't be called again
      if (!matchers) {
        matchers = []
        for (var i = 0; i < patterns.length; i++) {
          matchers.push(matcher(patterns[i], options))
        }
      }

      var len = matchers.length
      while (len--) {
        if (matchers[len](file) === true) {
          return true
        }
      }
      return false
    }
  })
}

/**
 * Memoize a generated regex or function. A unique key is generated
 * from the `type` (usually method name), the `pattern`, and
 * user-defined options.
 */

function memoize$2(type, pattern, options, fn) {
  var key = utils_1$1.createKey(type + '=' + pattern, options)

  if (options && options.cache === false) {
    return fn(pattern, options)
  }

  if (cache$4.has(type, key)) {
    return cache$4.get(type, key)
  }

  var val = fn(pattern, options)
  cache$4.set(type, key, val)
  return val
}

/**
 * Expose compiler, parser and cache on `nanomatch`
 */

nanomatch.compilers = compilers$1
nanomatch.parsers = parsers$1
nanomatch.cache = cache$4

/**
 * Expose `nanomatch`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_nanomatch = nanomatch

/**
 * POSIX character classes
 */

var D__git_packageInherit_node_modules_posixCharacterClasses = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9',
}

var compilers$2 = function (brackets) {
  brackets.compiler

    /**
     * Escaped characters
     */

    .set('escape', function (node) {
      return this.emit('\\' + node.val.replace(/^\\/, ''), node)
    })

    /**
     * Text
     */

    .set('text', function (node) {
      return this.emit(node.val.replace(/([{}])/g, '\\$1'), node)
    })

    /**
     * POSIX character classes
     */

    .set('posix', function (node) {
      if (node.val === '[::]') {
        return this.emit('\\[::\\]', node)
      }

      var val =
        D__git_packageInherit_node_modules_posixCharacterClasses[node.inner]
      if (typeof val === 'undefined') {
        val = '[' + node.inner + ']'
      }
      return this.emit(val, node)
    })

    /**
     * Non-posix brackets
     */

    .set('bracket', function (node) {
      return this.mapVisit(node.nodes)
    })
    .set('bracket.open', function (node) {
      return this.emit(node.val, node)
    })
    .set('bracket.inner', function (node) {
      var inner = node.val

      if (inner === '[' || inner === ']') {
        return this.emit('\\' + node.val, node)
      }
      if (inner === '^]') {
        return this.emit('^\\]', node)
      }
      if (inner === '^') {
        return this.emit('^', node)
      }

      if (/-/.test(inner) && !/(\d-\d|\w-\w)/.test(inner)) {
        inner = inner.split('-').join('\\-')
      }

      var isNegated = inner.charAt(0) === '^'
      // add slashes to negated brackets, per spec
      if (isNegated && inner.indexOf('/') === -1) {
        inner += '/'
      }
      if (isNegated && inner.indexOf('.') === -1) {
        inner += '.'
      }

      // don't unescape `0` (octal literal)
      inner = inner.replace(/\\([1-9])/g, '$1')
      return this.emit(inner, node)
    })
    .set('bracket.close', function (node) {
      var val = node.val.replace(/^\\/, '')
      if (node.parent.escaped === true) {
        return this.emit('\\' + val, node)
      }
      return this.emit(val, node)
    })
}

var cached$1

/**
 * Get the last element from `array`
 * @param {Array} `array`
 * @return {*}
 */

var last$1 = function (arr) {
  return arr[arr.length - 1]
}

/**
 * Create and cache regex to use for text nodes
 */

var createRegex = function (pattern, include) {
  if (cached$1) return cached$1
  var opts = { contains: true, strictClose: false }
  var not = D__git_packageInherit_node_modules_regexNot.create(pattern, opts)
  var re

  if (typeof include === 'string') {
    re = D__git_packageInherit_node_modules_toRegex(
      '^(?:' + include + '|' + not + ')',
      opts,
    )
  } else {
    re = D__git_packageInherit_node_modules_toRegex(not, opts)
  }

  return (cached$1 = re)
}

var utils$5 = {
  last: last$1,
  createRegex: createRegex,
}

/**
 * Text regex
 */

var TEXT_REGEX = '(\\[(?=.*\\])|\\])+'
var not$1 = utils$5.createRegex(TEXT_REGEX)

/**
 * Brackets parsers
 */

function parsers$2(brackets) {
  brackets.state = brackets.state || {}
  brackets.parser.sets.bracket = brackets.parser.sets.bracket || []
  brackets.parser

    .capture('escape', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(/^\\(.)/)
      if (!m) return

      return pos({
        type: 'escape',
        val: m[0],
      })
    })

    /**
     * Text parser
     */

    .capture('text', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(not$1)
      if (!m || !m[0]) return

      return pos({
        type: 'text',
        val: m[0],
      })
    })

    /**
     * POSIX character classes: "[[:alpha:][:digits:]]"
     */

    .capture('posix', function () {
      var pos = this.position()
      var m = this.match(/^\[:(.*?):\](?=.*\])/)
      if (!m) return

      var inside = this.isInside('bracket')
      if (inside) {
        brackets.posix++
      }

      return pos({
        type: 'posix',
        insideBracket: inside,
        inner: m[1],
        val: m[0],
      })
    })

    /**
     * Bracket (noop)
     */

    .capture('bracket', function () {})

    /**
     * Open: '['
     */

    .capture('bracket.open', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\[(?=.*\])/)
      if (!m) return

      var prev = this.prev()
      var last = utils$5.last(prev.nodes)

      if (parsed.slice(-1) === '\\' && !this.isInside('bracket')) {
        last.val = last.val.slice(0, last.val.length - 1)
        return pos({
          type: 'escape',
          val: m[0],
        })
      }

      var open = pos({
        type: 'bracket.open',
        val: m[0],
      })

      if (last.type === 'bracket.open' || this.isInside('bracket')) {
        open.val = '\\' + open.val
        open.type = 'bracket.inner'
        open.escaped = true
        return open
      }

      var node = pos({
        type: 'bracket',
        nodes: [open],
      })

      D__git_packageInherit_node_modules_defineProperty(node, 'parent', prev)
      D__git_packageInherit_node_modules_defineProperty(open, 'parent', node)
      this.push('bracket', node)
      prev.nodes.push(node)
    })

    /**
     * Bracket text
     */

    .capture('bracket.inner', function () {
      if (!this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(not$1)
      if (!m || !m[0]) return

      var next = this.input.charAt(0)
      var val = m[0]

      var node = pos({
        type: 'bracket.inner',
        val: val,
      })

      if (val === '\\\\') {
        return node
      }

      var first = val.charAt(0)
      var last = val.slice(-1)

      if (first === '!') {
        val = '^' + val.slice(1)
      }

      if (last === '\\' || (val === '^' && next === ']')) {
        val += this.input[0]
        this.consume(1)
      }

      node.val = val
      return node
    })

    /**
     * Close: ']'
     */

    .capture('bracket.close', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\]/)
      if (!m) return

      var prev = this.prev()
      var last = utils$5.last(prev.nodes)

      if (parsed.slice(-1) === '\\' && !this.isInside('bracket')) {
        last.val = last.val.slice(0, last.val.length - 1)

        return pos({
          type: 'escape',
          val: m[0],
        })
      }

      var node = pos({
        type: 'bracket.close',
        rest: this.input,
        val: m[0],
      })

      if (last.type === 'bracket.open') {
        node.type = 'bracket.inner'
        node.escaped = true
        return node
      }

      var bracket = this.pop('bracket')
      if (!this.isType(bracket, 'bracket')) {
        if (this.options.strict) {
          throw new Error('missing opening "["')
        }
        node.type = 'bracket.inner'
        node.escaped = true
        return node
      }

      bracket.nodes.push(node)
      D__git_packageInherit_node_modules_defineProperty(node, 'parent', bracket)
    })
}

/**
 * Brackets parsers
 */

var parsers_1 = parsers$2

/**
 * Expose text regex
 */

var TEXT_REGEX_1 = TEXT_REGEX
parsers_1.TEXT_REGEX = TEXT_REGEX_1

/**
 * Local dependencies
 */

/**
 * Module dependencies
 */

var debug$3 = D__git_packageInherit_node_modules_debug_src('expand-brackets')

/**
 * Parses the given POSIX character class `pattern` and returns a
 * string that can be used for creating regular expressions for matching.
 *
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object}
 * @api public
 */

function brackets(pattern, options) {
  debug$3('initializing from <%s>', __filename)
  var res = brackets.create(pattern, options)
  return res.output
}

/**
 * Takes an array of strings and a POSIX character class pattern, and returns a new
 * array with only the strings that matched the pattern.
 *
 * ```js
 * var brackets = require('expand-brackets');
 * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));
 * //=> ['a']
 *
 * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));
 * //=> ['a', 'ab']
 * ```
 * @param {Array} `arr` Array of strings to match
 * @param {String} `pattern` POSIX character class pattern(s)
 * @param {Object} `options`
 * @return {Array}
 * @api public
 */

brackets.match = function (arr, pattern, options) {
  arr = [].concat(arr)
  var opts = D__git_packageInherit_node_modules_extendShallow({}, options)
  var isMatch = brackets.matcher(pattern, opts)
  var len = arr.length
  var idx = -1
  var res = []

  while (++idx < len) {
    var ele = arr[idx]
    if (isMatch(ele)) {
      res.push(ele)
    }
  }

  if (res.length === 0) {
    if (opts.failglob === true) {
      throw new Error('no matches found for "' + pattern + '"')
    }

    if (opts.nonull === true || opts.nullglob === true) {
      return [pattern.split('\\').join('')]
    }
  }
  return res
}

/**
 * Returns true if the specified `string` matches the given
 * brackets `pattern`.
 *
 * ```js
 * var brackets = require('expand-brackets');
 *
 * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));
 * //=> true
 * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));
 * //=> false
 * ```
 * @param {String} `string` String to match
 * @param {String} `pattern` Poxis pattern
 * @param {String} `options`
 * @return {Boolean}
 * @api public
 */

brackets.isMatch = function (str, pattern, options) {
  return brackets.matcher(pattern, options)(str)
}

/**
 * Takes a POSIX character class pattern and returns a matcher function. The returned
 * function takes the string to match as its only argument.
 *
 * ```js
 * var brackets = require('expand-brackets');
 * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');
 *
 * console.log(isMatch('a.a'));
 * //=> false
 * console.log(isMatch('a.A'));
 * //=> true
 * ```
 * @param {String} `pattern` Poxis pattern
 * @param {String} `options`
 * @return {Boolean}
 * @api public
 */

brackets.matcher = function (pattern, options) {
  var re = brackets.makeRe(pattern, options)
  return function (str) {
    return re.test(str)
  }
}

/**
 * Create a regular expression from the given `pattern`.
 *
 * ```js
 * var brackets = require('expand-brackets');
 * var re = brackets.makeRe('[[:alpha:]]');
 * console.log(re);
 * //=> /^(?:[a-zA-Z])$/
 * ```
 * @param {String} `pattern` The pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

brackets.makeRe = function (pattern, options) {
  var res = brackets.create(pattern, options)
  var opts = D__git_packageInherit_node_modules_extendShallow(
    { strictErrors: false },
    options,
  )
  return D__git_packageInherit_node_modules_toRegex(res.output, opts)
}

/**
 * Parses the given POSIX character class `pattern` and returns an object
 * with the compiled `output` and optional source `map`.
 *
 * ```js
 * var brackets = require('expand-brackets');
 * console.log(brackets('[[:alpha:]]'));
 * // { options: { source: 'string' },
 * //   input: '[[:alpha:]]',
 * //   state: {},
 * //   compilers:
 * //    { eos: [Function],
 * //      noop: [Function],
 * //      bos: [Function],
 * //      not: [Function],
 * //      escape: [Function],
 * //      text: [Function],
 * //      posix: [Function],
 * //      bracket: [Function],
 * //      'bracket.open': [Function],
 * //      'bracket.inner': [Function],
 * //      'bracket.literal': [Function],
 * //      'bracket.close': [Function] },
 * //   output: '[a-zA-Z]',
 * //   ast:
 * //    { type: 'root',
 * //      errors: [],
 * //      nodes: [ [Object], [Object], [Object] ] },
 * //   parsingErrors: [] }
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object}
 * @api public
 */

brackets.create = function (pattern, options) {
  var snapdragon =
    (options && options.snapdragon) ||
    new D__git_packageInherit_node_modules_snapdragon(options)
  compilers$2(snapdragon)
  parsers_1(snapdragon)

  var ast = snapdragon.parse(pattern, options)
  ast.input = pattern
  var res = snapdragon.compile(ast, options)
  res.input = pattern
  return res
}

/**
 * Expose `brackets` constructor, parsers and compilers
 */

brackets.compilers = compilers$2
brackets.parsers = parsers_1

/**
 * Expose `brackets`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_expandBrackets = brackets

/**
 * Extglob compilers
 */

var compilers$3 = function (extglob) {
  function star() {
    if (typeof extglob.options.star === 'function') {
      return extglob.options.star.apply(this, arguments)
    }
    if (typeof extglob.options.star === 'string') {
      return extglob.options.star
    }
    return '.*?'
  }

  /**
   * Use `expand-brackets` compilers
   */

  extglob.use(D__git_packageInherit_node_modules_expandBrackets.compilers)
  extglob.compiler

    /**
     * Escaped: "\\*"
     */

    .set('escape', function (node) {
      return this.emit(node.val, node)
    })

    /**
     * Dot: "."
     */

    .set('dot', function (node) {
      return this.emit('\\' + node.val, node)
    })

    /**
     * Question mark: "?"
     */

    .set('qmark', function (node) {
      var val = '[^\\\\/.]'
      var prev = this.prev()

      if (node.parsed.slice(-1) === '(') {
        var ch = node.rest.charAt(0)
        if (ch !== '!' && ch !== '=' && ch !== ':') {
          return this.emit(val, node)
        }
        return this.emit(node.val, node)
      }

      if (prev.type === 'text' && prev.val) {
        return this.emit(val, node)
      }

      if (node.val.length > 1) {
        val += '{' + node.val.length + '}'
      }
      return this.emit(val, node)
    })

    /**
     * Plus: "+"
     */

    .set('plus', function (node) {
      var prev = node.parsed.slice(-1)
      if (prev === ']' || prev === ')') {
        return this.emit(node.val, node)
      }
      var ch = this.output.slice(-1)
      if (
        !this.output ||
        (/[?*+]/.test(ch) && node.parent.type !== 'bracket')
      ) {
        return this.emit('\\+', node)
      }
      if (/\w/.test(ch) && !node.inside) {
        return this.emit('+\\+?', node)
      }
      return this.emit('+', node)
    })

    /**
     * Star: "*"
     */

    .set('star', function (node) {
      var prev = this.prev()
      var prefix =
        prev.type !== 'text' && prev.type !== 'escape' ? '(?!\\.)' : ''

      return this.emit(prefix + star.call(this, node), node)
    })

    /**
     * Parens
     */

    .set('paren', function (node) {
      return this.mapVisit(node.nodes)
    })
    .set('paren.open', function (node) {
      var capture = this.options.capture ? '(' : ''

      switch (node.parent.prefix) {
        case '!':
        case '^':
          return this.emit(capture + '(?:(?!(?:', node)
        case '*':
        case '+':
        case '?':
        case '@':
          return this.emit(capture + '(?:', node)
        default: {
          var val = node.val
          if (this.options.bash === true) {
            val = '\\' + val
          } else if (
            !this.options.capture &&
            val === '(' &&
            node.parent.rest[0] !== '?'
          ) {
            val += '?:'
          }

          return this.emit(val, node)
        }
      }
    })
    .set('paren.close', function (node) {
      var capture = this.options.capture ? ')' : ''

      switch (node.prefix) {
        case '!':
        case '^':
          var prefix = /^(\)|$)/.test(node.rest) ? '$' : ''
          var str = star.call(this, node)

          // if the extglob has a slash explicitly defined, we know the user wants
          // to match slashes, so we need to ensure the "star" regex allows for it
          if (
            node.parent.hasSlash &&
            !this.options.star &&
            this.options.slash !== false
          ) {
            str = '.*?'
          }

          return this.emit(prefix + ('))' + str + ')') + capture, node)
        case '*':
        case '+':
        case '?':
          return this.emit(')' + node.prefix + capture, node)
        case '@':
          return this.emit(')' + capture, node)
        default: {
          var val = (this.options.bash === true ? '\\' : '') + ')'
          return this.emit(val, node)
        }
      }
    })

    /**
     * Text
     */

    .set('text', function (node) {
      var val = node.val.replace(/[\[\]]/g, '\\$&')
      return this.emit(val, node)
    })
}

var D__git_packageInherit_node_modules_extglob_node_modules_defineProperty = function defineProperty(
  obj,
  prop,
  val,
) {
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('expected an object or function.')
  }

  if (typeof prop !== 'string') {
    throw new TypeError('expected `prop` to be a string.')
  }

  if (
    D__git_packageInherit_node_modules_isDescriptor(val) &&
    ('set' in val || 'get' in val)
  ) {
    return Object.defineProperty(obj, prop, val)
  }

  return Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })
}

var utils_1$2 = createCommonjsModule(function (module) {
  /**
   * Utils
   */

  var utils = module.exports
  var cache = (utils.cache = new D__git_packageInherit_node_modules_fragmentCache())

  /**
   * Cast `val` to an array
   * @return {Array}
   */

  utils.arrayify = function (val) {
    if (!Array.isArray(val)) {
      return [val]
    }
    return val
  }

  /**
   * Memoize a generated regex or function
   */

  utils.memoize = function (type, pattern, options, fn) {
    var key = utils.createKey(type + pattern, options)

    if (cache.has(type, key)) {
      return cache.get(type, key)
    }

    var val = fn(pattern, options)
    if (options && options.cache === false) {
      return val
    }

    cache.set(type, key, val)
    return val
  }

  /**
   * Create the key to use for memoization. The key is generated
   * by iterating over the options and concatenating key-value pairs
   * to the pattern string.
   */

  utils.createKey = function (pattern, options) {
    var key = pattern
    if (typeof options === 'undefined') {
      return key
    }
    for (var prop in options) {
      key += ';' + prop + '=' + String(options[prop])
    }
    return key
  }

  /**
   * Create the regex to use for matching text
   */

  utils.createRegex = function (str) {
    var opts = { contains: true, strictClose: false }
    return D__git_packageInherit_node_modules_regexNot(str, opts)
  }
})

/**
 * Characters to use in text regex (we want to "not" match
 * characters that are matched by other parsers)
 */

var TEXT_REGEX$1 = '([!@*?+]?\\(|\\)|[*?.+\\\\]|\\[:?(?=.*\\])|:?\\])+'
var not$2 = utils_1$2.createRegex(TEXT_REGEX$1)

/**
 * Extglob parsers
 */

function parsers$3(extglob) {
  extglob.state = extglob.state || {}

  /**
   * Use `expand-brackets` parsers
   */

  extglob.use(D__git_packageInherit_node_modules_expandBrackets.parsers)
  extglob.parser.sets.paren = extglob.parser.sets.paren || []
  extglob.parser

    /**
     * Extglob open: "*("
     */

    .capture('paren.open', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^([!@*?+])?\(/)
      if (!m) return

      var prev = this.prev()
      var prefix = m[1]
      var val = m[0]

      var open = pos({
        type: 'paren.open',
        parsed: parsed,
        val: val,
      })

      var node = pos({
        type: 'paren',
        prefix: prefix,
        nodes: [open],
      })

      // if nested negation extglobs, just cancel them out to simplify
      if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {
        prev.prefix = '@'
        node.prefix = '@'
      }

      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        node,
        'rest',
        this.input,
      )
      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        node,
        'parsed',
        parsed,
      )
      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        node,
        'parent',
        prev,
      )
      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        open,
        'parent',
        node,
      )

      this.push('paren', node)
      prev.nodes.push(node)
    })

    /**
     * Extglob close: ")"
     */

    .capture('paren.close', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\)/)
      if (!m) return

      var parent = this.pop('paren')
      var node = pos({
        type: 'paren.close',
        rest: this.input,
        parsed: parsed,
        val: m[0],
      })

      if (!this.isType(parent, 'paren')) {
        if (this.options.strict) {
          throw new Error('missing opening paren: "("')
        }
        node.escaped = true
        return node
      }

      node.prefix = parent.prefix
      parent.nodes.push(node)
      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        node,
        'parent',
        parent,
      )
    })

    /**
     * Escape: "\\."
     */

    .capture('escape', function () {
      var pos = this.position()
      var m = this.match(/^\\(.)/)
      if (!m) return

      return pos({
        type: 'escape',
        val: m[0],
        ch: m[1],
      })
    })

    /**
     * Question marks: "?"
     */

    .capture('qmark', function () {
      var parsed = this.parsed
      var pos = this.position()
      var m = this.match(/^\?+(?!\()/)
      if (!m) return
      extglob.state.metachar = true
      return pos({
        type: 'qmark',
        rest: this.input,
        parsed: parsed,
        val: m[0],
      })
    })

    /**
     * Character parsers
     */

    .capture('star', /^\*(?!\()/)
    .capture('plus', /^\+(?!\()/)
    .capture('dot', /^\./)
    .capture('text', not$2)
}
/**
 * Expose text regex string
 */

var TEXT_REGEX_1$1 = TEXT_REGEX$1

/**
 * Extglob parsers
 */

var parsers_1$1 = parsers$3
parsers_1$1.TEXT_REGEX = TEXT_REGEX_1$1

/**
 * Module dependencies
 */

/**
 * Local dependencies
 */

/**
 * Customize Snapdragon parser and renderer
 */

function Extglob(options) {
  this.options = D__git_packageInherit_node_modules_extendShallow(
    { source: 'extglob' },
    options,
  )
  this.snapdragon =
    this.options.snapdragon ||
    new D__git_packageInherit_node_modules_snapdragon(this.options)
  this.snapdragon.patterns = this.snapdragon.patterns || {}
  this.compiler = this.snapdragon.compiler
  this.parser = this.snapdragon.parser

  compilers$3(this.snapdragon)
  parsers_1$1(this.snapdragon)

  /**
   * Override Snapdragon `.parse` method
   */

  D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
    this.snapdragon,
    'parse',
    function (str, options) {
      var parsed = D__git_packageInherit_node_modules_snapdragon.prototype.parse.apply(
        this,
        arguments,
      )
      parsed.input = str

      // escape unmatched brace/bracket/parens
      var last = this.parser.stack.pop()
      if (last && this.options.strict !== true) {
        var node = last.nodes[0]
        node.val = '\\' + node.val
        var sibling = node.parent.nodes[1]
        if (sibling.type === 'star') {
          sibling.loose = true
        }
      }

      // add non-enumerable parser reference
      D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
        parsed,
        'parser',
        this.parser,
      )
      return parsed
    },
  )

  /**
   * Decorate `.parse` method
   */

  D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
    this,
    'parse',
    function (ast, options) {
      return this.snapdragon.parse.apply(this.snapdragon, arguments)
    },
  )

  /**
   * Decorate `.compile` method
   */

  D__git_packageInherit_node_modules_extglob_node_modules_defineProperty(
    this,
    'compile',
    function (ast, options) {
      return this.snapdragon.compile.apply(this.snapdragon, arguments)
    },
  )
}

/**
 * Expose `Extglob`
 */

var extglob = Extglob

/**
 * Module dependencies
 */

/**
 * Local dependencies
 */

var MAX_LENGTH$5 = 1024 * 64

/**
 * Convert the given `extglob` pattern into a regex-compatible string. Returns
 * an object with the compiled result and the parsed AST.
 *
 * ```js
 * var extglob = require('extglob');
 * console.log(extglob('*.!(*a)'));
 * //=> '(?!\\.)[^/]*?\\.(?!(?!\\.)[^/]*?a\\b).*?'
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

function extglob$1(pattern, options) {
  return extglob$1.create(pattern, options).output
}

/**
 * Takes an array of strings and an extglob pattern and returns a new
 * array that contains only the strings that match the pattern.
 *
 * ```js
 * var extglob = require('extglob');
 * console.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));
 * //=> ['a.b', 'a.c']
 * ```
 * @param {Array} `list` Array of strings to match
 * @param {String} `pattern` Extglob pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of matches
 * @api public
 */

extglob$1.match = function (list, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  list = utils_1$2.arrayify(list)
  var isMatch = extglob$1.matcher(pattern, options)
  var len = list.length
  var idx = -1
  var matches = []

  while (++idx < len) {
    var ele = list[idx]

    if (isMatch(ele)) {
      matches.push(ele)
    }
  }

  // if no options were passed, uniquify results and return
  if (typeof options === 'undefined') {
    return D__git_packageInherit_node_modules_arrayUnique(matches)
  }

  if (matches.length === 0) {
    if (options.failglob === true) {
      throw new Error('no matches found for "' + pattern + '"')
    }
    if (options.nonull === true || options.nullglob === true) {
      return [pattern.split('\\').join('')]
    }
  }

  return options.nodupes !== false
    ? D__git_packageInherit_node_modules_arrayUnique(matches)
    : matches
}

/**
 * Returns true if the specified `string` matches the given
 * extglob `pattern`.
 *
 * ```js
 * var extglob = require('extglob');
 *
 * console.log(extglob.isMatch('a.a', '*.!(*a)'));
 * //=> false
 * console.log(extglob.isMatch('a.b', '*.!(*a)'));
 * //=> true
 * ```
 * @param {String} `string` String to match
 * @param {String} `pattern` Extglob pattern
 * @param {String} `options`
 * @return {Boolean}
 * @api public
 */

extglob$1.isMatch = function (str, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  if (typeof str !== 'string') {
    throw new TypeError('expected a string')
  }

  if (pattern === str) {
    return true
  }

  if (pattern === '' || pattern === ' ' || pattern === '.') {
    return pattern === str
  }

  var isMatch = utils_1$2.memoize(
    'isMatch',
    pattern,
    options,
    extglob$1.matcher,
  )
  return isMatch(str)
}

/**
 * Returns true if the given `string` contains the given pattern. Similar to `.isMatch` but
 * the pattern can match any part of the string.
 *
 * ```js
 * var extglob = require('extglob');
 * console.log(extglob.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(extglob.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {Object} `options`
 * @return {Boolean} Returns true if the patter matches any part of `str`.
 * @api public
 */

extglob$1.contains = function (str, pattern, options) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string')
  }

  if (pattern === '' || pattern === ' ' || pattern === '.') {
    return pattern === str
  }

  var opts = D__git_packageInherit_node_modules_extendShallow({}, options, {
    contains: true,
  })
  opts.strictClose = false
  opts.strictOpen = false
  return extglob$1.isMatch(str, pattern, opts)
}

/**
 * Takes an extglob pattern and returns a matcher function. The returned
 * function takes the string to match as its only argument.
 *
 * ```js
 * var extglob = require('extglob');
 * var isMatch = extglob.matcher('*.!(*a)');
 *
 * console.log(isMatch('a.a'));
 * //=> false
 * console.log(isMatch('a.b'));
 * //=> true
 * ```
 * @param {String} `pattern` Extglob pattern
 * @param {String} `options`
 * @return {Boolean}
 * @api public
 */

extglob$1.matcher = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  function matcher() {
    var re = extglob$1.makeRe(pattern, options)
    return function (str) {
      return re.test(str)
    }
  }

  return utils_1$2.memoize('matcher', pattern, options, matcher)
}

/**
 * Convert the given `extglob` pattern into a regex-compatible string. Returns
 * an object with the compiled result and the parsed AST.
 *
 * ```js
 * var extglob = require('extglob');
 * console.log(extglob.create('*.!(*a)').output);
 * //=> '(?!\\.)[^/]*?\\.(?!(?!\\.)[^/]*?a\\b).*?'
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

extglob$1.create = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  function create() {
    var ext = new extglob(options)
    var ast = ext.parse(pattern, options)
    return ext.compile(ast, options)
  }

  return utils_1$2.memoize('create', pattern, options, create)
}

/**
 * Returns an array of matches captured by `pattern` in `string`, or `null`
 * if the pattern did not match.
 *
 * ```js
 * var extglob = require('extglob');
 * extglob.capture(pattern, string[, options]);
 *
 * console.log(extglob.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(extglob.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {String} `string` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns an array of captures if the string matches the glob pattern, otherwise `null`.
 * @api public
 */

extglob$1.capture = function (pattern, str, options) {
  var re = extglob$1.makeRe(
    pattern,
    D__git_packageInherit_node_modules_extendShallow(
      { capture: true },
      options,
    ),
  )

  function match() {
    return function (string) {
      var match = re.exec(string)
      if (!match) {
        return null
      }

      return match.slice(1)
    }
  }

  var capture = utils_1$2.memoize('capture', pattern, options, match)
  return capture(str)
}

/**
 * Create a regular expression from the given `pattern` and `options`.
 *
 * ```js
 * var extglob = require('extglob');
 * var re = extglob.makeRe('*.!(*a)');
 * console.log(re);
 * //=> /^[^\/]*?\.(?![^\/]*?a)[^\/]*?$/
 * ```
 * @param {String} `pattern` The pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

extglob$1.makeRe = function (pattern, options) {
  if (pattern instanceof RegExp) {
    return pattern
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  if (pattern.length > MAX_LENGTH$5) {
    throw new Error(
      'expected pattern to be less than ' + MAX_LENGTH$5 + ' characters',
    )
  }

  function makeRe() {
    var opts = D__git_packageInherit_node_modules_extendShallow(
      { strictErrors: false },
      options,
    )
    if (opts.strictErrors === true) opts.strict = true
    var res = extglob$1.create(pattern, opts)
    return D__git_packageInherit_node_modules_toRegex(res.output, opts)
  }

  var regex = utils_1$2.memoize('makeRe', pattern, options, makeRe)
  if (regex.source.length > MAX_LENGTH$5) {
    throw new SyntaxError('potentially malicious regex detected')
  }

  return regex
}

/**
 * Cache
 */

extglob$1.cache = utils_1$2.cache
extglob$1.clearCache = function () {
  extglob$1.cache.__data__ = {}
}

/**
 * Expose `Extglob` constructor, parsers and compilers
 */

extglob$1.Extglob = extglob
extglob$1.compilers = compilers$3
extglob$1.parsers = parsers_1$1

/**
 * Expose `extglob`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_extglob = extglob$1

var compilers$4 = function (snapdragon) {
  var compilers = snapdragon.compiler.compilers
  var opts = snapdragon.options

  // register nanomatch compilers
  snapdragon.use(D__git_packageInherit_node_modules_nanomatch.compilers)

  // get references to some specific nanomatch compilers before they
  // are overridden by the extglob and/or custom compilers
  var escape = compilers.escape
  var qmark = compilers.qmark
  var slash = compilers.slash
  var star = compilers.star
  var text = compilers.text
  var plus = compilers.plus
  var dot = compilers.dot

  // register extglob compilers or escape exglobs if disabled
  if (opts.extglob === false || opts.noext === true) {
    snapdragon.compiler.use(escapeExtglobs)
  } else {
    snapdragon.use(D__git_packageInherit_node_modules_extglob.compilers)
  }

  snapdragon.use(function () {
    this.options.star =
      this.options.star ||
      function (/*node*/) {
        return '[^\\\\/]*?'
      }
  })

  // custom micromatch compilers
  snapdragon.compiler

    // reset referenced compiler
    .set('dot', dot)
    .set('escape', escape)
    .set('plus', plus)
    .set('slash', slash)
    .set('qmark', qmark)
    .set('star', star)
    .set('text', text)
}

function escapeExtglobs(compiler) {
  compiler.set('paren', function (node) {
    var val = ''
    visit(node, function (tok) {
      if (tok.val) val += (/^\W/.test(tok.val) ? '\\' : '') + tok.val
    })
    return this.emit(val, node)
  })

  /**
   * Visit `node` with the given `fn`
   */

  function visit(node, fn) {
    return node.nodes ? mapVisit(node.nodes, fn) : fn(node)
  }

  /**
   * Map visit over array of `nodes`.
   */

  function mapVisit(nodes, fn) {
    var len = nodes.length
    var idx = -1
    while (++idx < len) {
      visit(nodes[idx], fn)
    }
  }
}

var not$3

/**
 * Characters to use in negation regex (we want to "not" match
 * characters that are matched by other parsers)
 */

var TEXT = '([!@*?+]?\\(|\\)|\\[:?(?=.*?:?\\])|:?\\]|[*+?!^$.\\\\/])+'
var createNotRegex = function (opts) {
  return not$3 || (not$3 = textRegex(TEXT))
}

/**
 * Parsers
 */

var parsers$4 = function (snapdragon) {
  var parsers = snapdragon.parser.parsers

  // register nanomatch parsers
  snapdragon.use(D__git_packageInherit_node_modules_nanomatch.parsers)

  // get references to some specific nanomatch parsers before they
  // are overridden by the extglob and/or parsers
  var escape = parsers.escape
  var slash = parsers.slash
  var qmark = parsers.qmark
  var plus = parsers.plus
  var star = parsers.star
  var dot = parsers.dot

  // register extglob parsers
  snapdragon.use(D__git_packageInherit_node_modules_extglob.parsers)

  // custom micromatch parsers
  snapdragon.parser
    .use(function () {
      // override "notRegex" created in nanomatch parser
      this.notRegex = /^\!+(?!\()/
    })
    // reset the referenced parsers
    .capture('escape', escape)
    .capture('slash', slash)
    .capture('qmark', qmark)
    .capture('star', star)
    .capture('plus', plus)
    .capture('dot', dot)

    /**
     * Override `text` parser
     */

    .capture('text', function () {
      if (this.isInside('bracket')) return
      var pos = this.position()
      var m = this.match(createNotRegex(this.options))
      if (!m || !m[0]) return

      // escape regex boundary characters and simple brackets
      var val = m[0].replace(/([[\]^$])/g, '\\$1')

      return pos({
        type: 'text',
        val: val,
      })
    })
}

/**
 * Create text regex
 */

function textRegex(pattern) {
  var notStr = D__git_packageInherit_node_modules_regexNot.create(pattern, {
    contains: true,
    strictClose: false,
  })
  var prefix = '(?:[\\^]|\\\\|'
  return D__git_packageInherit_node_modules_toRegex(prefix + notStr + ')', {
    strictClose: false,
  })
}

var cache$5 = new D__git_packageInherit_node_modules_fragmentCache()

var define$4 =
  typeof Reflect !== 'undefined' && Reflect.defineProperty
    ? Reflect.defineProperty
    : Object.defineProperty

var D__git_packageInherit_node_modules_micromatch_node_modules_defineProperty = function defineProperty(
  obj,
  key,
  val,
) {
  if (!isobject(obj) && typeof obj !== 'function' && !Array.isArray(obj)) {
    throw new TypeError('expected an object, function, or array')
  }

  if (typeof key !== 'string') {
    throw new TypeError('expected "key" to be a string')
  }

  if (D__git_packageInherit_node_modules_isDescriptor(val)) {
    define$4(obj, key, val)
    return obj
  }

  define$4(obj, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: val,
  })

  return obj
}

var toString$a = Object.prototype.toString

var D__git_packageInherit_node_modules_micromatch_node_modules_kindOf = function kindOf(
  val,
) {
  if (val === void 0) return 'undefined'
  if (val === null) return 'null'

  var type = typeof val
  if (type === 'boolean') return 'boolean'
  if (type === 'string') return 'string'
  if (type === 'number') return 'number'
  if (type === 'symbol') return 'symbol'
  if (type === 'function') {
    return isGeneratorFn$4(val) ? 'generatorfunction' : 'function'
  }

  if (isArray$4(val)) return 'array'
  if (isBuffer$6(val)) return 'buffer'
  if (isArguments$4(val)) return 'arguments'
  if (isDate$4(val)) return 'date'
  if (isError$4(val)) return 'error'
  if (isRegexp$4(val)) return 'regexp'

  switch (ctorName$4(val)) {
    case 'Symbol':
      return 'symbol'
    case 'Promise':
      return 'promise'

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap':
      return 'weakmap'
    case 'WeakSet':
      return 'weakset'
    case 'Map':
      return 'map'
    case 'Set':
      return 'set'

    // 8-bit typed arrays
    case 'Int8Array':
      return 'int8array'
    case 'Uint8Array':
      return 'uint8array'
    case 'Uint8ClampedArray':
      return 'uint8clampedarray'

    // 16-bit typed arrays
    case 'Int16Array':
      return 'int16array'
    case 'Uint16Array':
      return 'uint16array'

    // 32-bit typed arrays
    case 'Int32Array':
      return 'int32array'
    case 'Uint32Array':
      return 'uint32array'
    case 'Float32Array':
      return 'float32array'
    case 'Float64Array':
      return 'float64array'
  }

  if (isGeneratorObj$4(val)) {
    return 'generator'
  }

  // Non-plain objects
  type = toString$a.call(val)
  switch (type) {
    case '[object Object]':
      return 'object'
    // iterators
    case '[object Map Iterator]':
      return 'mapiterator'
    case '[object Set Iterator]':
      return 'setiterator'
    case '[object String Iterator]':
      return 'stringiterator'
    case '[object Array Iterator]':
      return 'arrayiterator'
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '')
}

function ctorName$4(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null
}

function isArray$4(val) {
  if (Array.isArray) return Array.isArray(val)
  return val instanceof Array
}

function isError$4(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  )
}

function isDate$4(val) {
  if (val instanceof Date) return true
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  )
}

function isRegexp$4(val) {
  if (val instanceof RegExp) return true
  return (
    typeof val.flags === 'string' &&
    typeof val.ignoreCase === 'boolean' &&
    typeof val.multiline === 'boolean' &&
    typeof val.global === 'boolean'
  )
}

function isGeneratorFn$4(name, val) {
  return ctorName$4(name) === 'GeneratorFunction'
}

function isGeneratorObj$4(val) {
  return (
    typeof val.throw === 'function' &&
    typeof val.return === 'function' &&
    typeof val.next === 'function'
  )
}

function isArguments$4(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true
    }
  }
  return false
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer$6(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val)
  }
  return false
}

var utils_1$3 = createCommonjsModule(function (module) {
  var utils = module.exports

  /**
   * Module dependencies
   */

  utils.define = D__git_packageInherit_node_modules_micromatch_node_modules_defineProperty
  utils.diff = D__git_packageInherit_node_modules_arrDiff
  utils.extend = D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow
  utils.pick = D__git_packageInherit_node_modules_object_pick
  utils.typeOf = D__git_packageInherit_node_modules_micromatch_node_modules_kindOf
  utils.unique = D__git_packageInherit_node_modules_arrayUnique

  /**
   * Returns true if the platform is windows, or `path.sep` is `\\`.
   * This is defined as a function to allow `path.sep` to be set in unit tests,
   * or by the user, if there is a reason to do so.
   * @return {Boolean}
   */

  utils.isWindows = function () {
    return path__default['default'].sep === '\\' || process.platform === 'win32'
  }

  /**
   * Get the `Snapdragon` instance to use
   */

  utils.instantiate = function (ast, options) {
    var snapdragon
    // if an instance was created by `.parse`, use that instance
    if (utils.typeOf(ast) === 'object' && ast.snapdragon) {
      snapdragon = ast.snapdragon
      // if the user supplies an instance on options, use that instance
    } else if (utils.typeOf(options) === 'object' && options.snapdragon) {
      snapdragon = options.snapdragon
      // create a new instance
    } else {
      snapdragon = new D__git_packageInherit_node_modules_snapdragon(options)
    }

    utils.define(snapdragon, 'parse', function (str, options) {
      var parsed = D__git_packageInherit_node_modules_snapdragon.prototype.parse.apply(
        this,
        arguments,
      )
      parsed.input = str

      // escape unmatched brace/bracket/parens
      var last = this.parser.stack.pop()
      if (last && this.options.strictErrors !== true) {
        var open = last.nodes[0]
        var inner = last.nodes[1]
        if (last.type === 'bracket') {
          if (inner.val.charAt(0) === '[') {
            inner.val = '\\' + inner.val
          }
        } else {
          open.val = '\\' + open.val
          var sibling = open.parent.nodes[1]
          if (sibling.type === 'star') {
            sibling.loose = true
          }
        }
      }

      // add non-enumerable parser reference
      utils.define(parsed, 'parser', this.parser)
      return parsed
    })

    return snapdragon
  }

  /**
   * Create the key to use for memoization. The key is generated
   * by iterating over the options and concatenating key-value pairs
   * to the pattern string.
   */

  utils.createKey = function (pattern, options) {
    if (utils.typeOf(options) !== 'object') {
      return pattern
    }
    var val = pattern
    var keys = Object.keys(options)
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]
      val += ';' + key + '=' + String(options[key])
    }
    return val
  }

  /**
   * Cast `val` to an array
   * @return {Array}
   */

  utils.arrayify = function (val) {
    if (typeof val === 'string') return [val]
    return val ? (Array.isArray(val) ? val : [val]) : []
  }

  /**
   * Return true if `val` is a non-empty string
   */

  utils.isString = function (val) {
    return typeof val === 'string'
  }

  /**
   * Return true if `val` is a non-empty string
   */

  utils.isObject = function (val) {
    return utils.typeOf(val) === 'object'
  }

  /**
   * Returns true if the given `str` has special characters
   */

  utils.hasSpecialChars = function (str) {
    return /(?:(?:(^|\/)[!.])|[*?+()|\[\]{}]|[+@]\()/.test(str)
  }

  /**
   * Escape regex characters in the given string
   */

  utils.escapeRegex = function (str) {
    return str.replace(/[-[\]{}()^$|*+?.\\\/\s]/g, '\\$&')
  }

  /**
   * Normalize slashes in the given filepath.
   *
   * @param {String} `filepath`
   * @return {String}
   */

  utils.toPosixPath = function (str) {
    return str.replace(/\\+/g, '/')
  }

  /**
   * Strip backslashes before special characters in a string.
   *
   * @param {String} `str`
   * @return {String}
   */

  utils.unescape = function (str) {
    return utils.toPosixPath(str.replace(/\\(?=[*+?!.])/g, ''))
  }

  /**
   * Strip the prefix from a filepath
   * @param {String} `fp`
   * @return {String}
   */

  utils.stripPrefix = function (str) {
    if (str.charAt(0) !== '.') {
      return str
    }
    var ch = str.charAt(1)
    if (utils.isSlash(ch)) {
      return str.slice(2)
    }
    return str
  }

  /**
   * Returns true if the given str is an escaped or
   * unescaped path character
   */

  utils.isSlash = function (str) {
    return str === '/' || str === '\\/' || str === '\\' || str === '\\\\'
  }

  /**
   * Returns a function that returns true if the given
   * pattern matches or contains a `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.matchPath = function (pattern, options) {
    return options && options.contains
      ? utils.containsPattern(pattern, options)
      : utils.equalsPattern(pattern, options)
  }

  /**
   * Returns true if the given (original) filepath or unixified path are equal
   * to the given pattern.
   */

  utils._equals = function (filepath, unixPath, pattern) {
    return pattern === filepath || pattern === unixPath
  }

  /**
   * Returns true if the given (original) filepath or unixified path contain
   * the given pattern.
   */

  utils._contains = function (filepath, unixPath, pattern) {
    return filepath.indexOf(pattern) !== -1 || unixPath.indexOf(pattern) !== -1
  }

  /**
   * Returns a function that returns true if the given
   * pattern is the same as a given `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.equalsPattern = function (pattern, options) {
    var unixify = utils.unixify(options)
    options = options || {}

    return function fn(filepath) {
      var equal = utils._equals(filepath, unixify(filepath), pattern)
      if (equal === true || options.nocase !== true) {
        return equal
      }
      var lower = filepath.toLowerCase()
      return utils._equals(lower, unixify(lower), pattern)
    }
  }

  /**
   * Returns a function that returns true if the given
   * pattern contains a `filepath`
   *
   * @param {String} `pattern`
   * @return {Function}
   */

  utils.containsPattern = function (pattern, options) {
    var unixify = utils.unixify(options)
    options = options || {}

    return function (filepath) {
      var contains = utils._contains(filepath, unixify(filepath), pattern)
      if (contains === true || options.nocase !== true) {
        return contains
      }
      var lower = filepath.toLowerCase()
      return utils._contains(lower, unixify(lower), pattern)
    }
  }

  /**
   * Returns a function that returns true if the given
   * regex matches the `filename` of a file path.
   *
   * @param {RegExp} `re` Matching regex
   * @return {Function}
   */

  utils.matchBasename = function (re) {
    return function (filepath) {
      return re.test(path__default['default'].basename(filepath))
    }
  }

  /**
   * Determines the filepath to return based on the provided options.
   * @return {any}
   */

  utils.value = function (str, unixify, options) {
    if (options && options.unixify === false) {
      return str
    }
    return unixify(str)
  }

  /**
   * Returns a function that normalizes slashes in a string to forward
   * slashes, strips `./` from beginning of paths, and optionally unescapes
   * special characters.
   * @return {Function}
   */

  utils.unixify = function (options) {
    options = options || {}
    return function (filepath) {
      if (utils.isWindows() || options.unixify === true) {
        filepath = utils.toPosixPath(filepath)
      }
      if (options.stripPrefix !== false) {
        filepath = utils.stripPrefix(filepath)
      }
      if (options.unescape === true) {
        filepath = utils.unescape(filepath)
      }
      return filepath
    }
  }
})

/**
 * Module dependencies
 */

/**
 * Local dependencies
 */

var MAX_LENGTH$6 = 1024 * 64

/**
 * The main function takes a list of strings and one or more
 * glob patterns to use for matching.
 *
 * ```js
 * var mm = require('micromatch');
 * mm(list, patterns[, options]);
 *
 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {Array} `list` A list of strings to match
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

function micromatch$1(list, patterns, options) {
  patterns = utils_1$3.arrayify(patterns)
  list = utils_1$3.arrayify(list)

  var len = patterns.length
  if (list.length === 0 || len === 0) {
    return []
  }

  if (len === 1) {
    return micromatch$1.match(list, patterns[0], options)
  }

  var omit = []
  var keep = []
  var idx = -1

  while (++idx < len) {
    var pattern = patterns[idx]

    if (typeof pattern === 'string' && pattern.charCodeAt(0) === 33 /* ! */) {
      omit.push.apply(omit, micromatch$1.match(list, pattern.slice(1), options))
    } else {
      keep.push.apply(keep, micromatch$1.match(list, pattern, options))
    }
  }

  var matches = utils_1$3.diff(keep, omit)
  if (!options || options.nodupes !== false) {
    return utils_1$3.unique(matches)
  }

  return matches
}

/**
 * Similar to the main function, but `pattern` must be a string.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.match(list, pattern[, options]);
 *
 * console.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
 * //=> ['a.a', 'a.aa']
 * ```
 * @param {Array} `list` Array of strings to match
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of matches
 * @api public
 */

micromatch$1.match = function (list, pattern, options) {
  if (Array.isArray(pattern)) {
    throw new TypeError('expected pattern to be a string')
  }

  var unixify = utils_1$3.unixify(options)
  var isMatch = memoize$3('match', pattern, options, micromatch$1.matcher)
  var matches = []

  list = utils_1$3.arrayify(list)
  var len = list.length
  var idx = -1

  while (++idx < len) {
    var ele = list[idx]
    if (ele === pattern || isMatch(ele)) {
      matches.push(utils_1$3.value(ele, unixify, options))
    }
  }

  // if no options were passed, uniquify results and return
  if (typeof options === 'undefined') {
    return utils_1$3.unique(matches)
  }

  if (matches.length === 0) {
    if (options.failglob === true) {
      throw new Error('no matches found for "' + pattern + '"')
    }
    if (options.nonull === true || options.nullglob === true) {
      return [options.unescape ? utils_1$3.unescape(pattern) : pattern]
    }
  }

  // if `opts.ignore` was defined, diff ignored list
  if (options.ignore) {
    matches = micromatch$1.not(matches, options.ignore, options)
  }

  return options.nodupes !== false ? utils_1$3.unique(matches) : matches
}

/**
 * Returns true if the specified `string` matches the given glob `pattern`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.isMatch(string, pattern[, options]);
 *
 * console.log(mm.isMatch('a.a', '*.a'));
 * //=> true
 * console.log(mm.isMatch('a.b', '*.a'));
 * //=> false
 * ```
 * @param {String} `string` String to match
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the string matches the glob pattern.
 * @api public
 */

micromatch$1.isMatch = function (str, pattern, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (isEmptyString$1(str) || isEmptyString$1(pattern)) {
    return false
  }

  var equals = utils_1$3.equalsPattern(options)
  if (equals(str)) {
    return true
  }

  var isMatch = memoize$3('isMatch', pattern, options, micromatch$1.matcher)
  return isMatch(str)
}

/**
 * Returns true if some of the strings in the given `list` match any of the
 * given glob `patterns`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.some(list, patterns[, options]);
 *
 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param  {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch$1.some = function (list, patterns, options) {
  if (typeof list === 'string') {
    list = [list]
  }
  for (var i = 0; i < list.length; i++) {
    if (micromatch$1(list[i], patterns, options).length === 1) {
      return true
    }
  }
  return false
}

/**
 * Returns true if every string in the given `list` matches
 * any of the given glob `patterns`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.every(list, patterns[, options]);
 *
 * console.log(mm.every('foo.js', ['foo.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // false
 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param  {String|Array} `list` The string or array of strings to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch$1.every = function (list, patterns, options) {
  if (typeof list === 'string') {
    list = [list]
  }
  for (var i = 0; i < list.length; i++) {
    if (micromatch$1(list[i], patterns, options).length !== 1) {
      return false
    }
  }
  return true
}

/**
 * Returns true if **any** of the given glob `patterns`
 * match the specified `string`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.any(string, patterns[, options]);
 *
 * console.log(mm.any('a.a', ['b.*', '*.a']));
 * //=> true
 * console.log(mm.any('a.a', 'b.*'));
 * //=> false
 * ```
 * @param  {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch$1.any = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (isEmptyString$1(str) || isEmptyString$1(patterns)) {
    return false
  }

  if (typeof patterns === 'string') {
    patterns = [patterns]
  }

  for (var i = 0; i < patterns.length; i++) {
    if (micromatch$1.isMatch(str, patterns[i], options)) {
      return true
    }
  }
  return false
}

/**
 * Returns true if **all** of the given `patterns` match
 * the specified string.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.all(string, patterns[, options]);
 *
 * console.log(mm.all('foo.js', ['foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
 * // false
 *
 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
 * // true
 * ```
 * @param  {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch$1.all = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }
  if (typeof patterns === 'string') {
    patterns = [patterns]
  }
  for (var i = 0; i < patterns.length; i++) {
    if (!micromatch$1.isMatch(str, patterns[i], options)) {
      return false
    }
  }
  return true
}

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.not(list, patterns[, options]);
 *
 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

micromatch$1.not = function (list, patterns, options) {
  var opts = D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow(
    {},
    options,
  )
  var ignore = opts.ignore
  delete opts.ignore

  var unixify = utils_1$3.unixify(opts)
  list = utils_1$3.arrayify(list).map(unixify)

  var matches = utils_1$3.diff(list, micromatch$1(list, patterns, opts))
  if (ignore) {
    matches = utils_1$3.diff(matches, micromatch$1(list, ignore))
  }

  return opts.nodupes !== false ? utils_1$3.unique(matches) : matches
}

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.contains(string, pattern[, options]);
 *
 * console.log(mm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(mm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if the patter matches any part of `str`.
 * @api public
 */

micromatch$1.contains = function (str, patterns, options) {
  if (typeof str !== 'string') {
    throw new TypeError(
      'expected a string: "' + util__default['default'].inspect(str) + '"',
    )
  }

  if (typeof patterns === 'string') {
    if (isEmptyString$1(str) || isEmptyString$1(patterns)) {
      return false
    }

    var equals = utils_1$3.equalsPattern(patterns, options)
    if (equals(str)) {
      return true
    }
    var contains = utils_1$3.containsPattern(patterns, options)
    if (contains(str)) {
      return true
    }
  }

  var opts = D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow(
    {},
    options,
    { contains: true },
  )
  return micromatch$1.any(str, patterns, opts)
}

/**
 * Returns true if the given pattern and options should enable
 * the `matchBase` option.
 * @return {Boolean}
 * @api private
 */

micromatch$1.matchBase = function (pattern, options) {
  if ((pattern && pattern.indexOf('/') !== -1) || !options) return false
  return options.basename === true || options.matchBase === true
}

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.matchKeys(object, patterns[, options]);
 *
 * var obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(mm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

micromatch$1.matchKeys = function (obj, patterns, options) {
  if (!utils_1$3.isObject(obj)) {
    throw new TypeError('expected the first argument to be an object')
  }
  var keys = micromatch$1(Object.keys(obj), patterns, options)
  return utils_1$3.pick(obj, keys)
}

/**
 * Returns a memoized matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.matcher(pattern[, options]);
 *
 * var isMatch = mm.matcher('*.!(*a)');
 * console.log(isMatch('a.a'));
 * //=> false
 * console.log(isMatch('a.b'));
 * //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options` See available [options](#options) for changing how matches are performed.
 * @return {Function} Returns a matcher function.
 * @api public
 */

micromatch$1.matcher = function matcher(pattern, options) {
  if (Array.isArray(pattern)) {
    return compose$2(pattern, options, matcher)
  }

  // if pattern is a regex
  if (pattern instanceof RegExp) {
    return test(pattern)
  }

  // if pattern is invalid
  if (!utils_1$3.isString(pattern)) {
    throw new TypeError('expected pattern to be an array, string or regex')
  }

  // if pattern is a non-glob string
  if (!utils_1$3.hasSpecialChars(pattern)) {
    if (options && options.nocase === true) {
      pattern = pattern.toLowerCase()
    }
    return utils_1$3.matchPath(pattern, options)
  }

  // if pattern is a glob string
  var re = micromatch$1.makeRe(pattern, options)

  // if `options.matchBase` or `options.basename` is defined
  if (micromatch$1.matchBase(pattern, options)) {
    return utils_1$3.matchBasename(re, options)
  }

  function test(regex) {
    var equals = utils_1$3.equalsPattern(options)
    var unixify = utils_1$3.unixify(options)

    return function (str) {
      if (equals(str)) {
        return true
      }

      if (regex.test(unixify(str))) {
        return true
      }
      return false
    }
  }

  var fn = test(re)
  Object.defineProperty(fn, 'result', {
    configurable: true,
    enumerable: false,
    value: re.result,
  })
  return fn
}

/**
 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.capture(pattern, string[, options]);
 *
 * console.log(mm.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `pattern` Glob pattern to use for matching.
 * @param {String} `string` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns an array of captures if the string matches the glob pattern, otherwise `null`.
 * @api public
 */

micromatch$1.capture = function (pattern, str, options) {
  var re = micromatch$1.makeRe(
    pattern,
    D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow(
      { capture: true },
      options,
    ),
  )
  var unixify = utils_1$3.unixify(options)

  function match() {
    return function (string) {
      var match = re.exec(unixify(string))
      if (!match) {
        return null
      }

      return match.slice(1)
    }
  }

  var capture = memoize$3('capture', pattern, options, match)
  return capture(str)
}

/**
 * Create a regular expression from the given glob `pattern`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.makeRe(pattern[, options]);
 *
 * console.log(mm.makeRe('*.js'));
 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
 * ```
 * @param {String} `pattern` A glob pattern to convert to regex.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

micromatch$1.makeRe = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected pattern to be a string')
  }

  if (pattern.length > MAX_LENGTH$6) {
    throw new Error(
      'expected pattern to be less than ' + MAX_LENGTH$6 + ' characters',
    )
  }

  function makeRe() {
    var result = micromatch$1.create(pattern, options)
    var ast_array = []
    var output = result.map(function (obj) {
      obj.ast.state = obj.state
      ast_array.push(obj.ast)
      return obj.output
    })

    var regex = D__git_packageInherit_node_modules_toRegex(
      output.join('|'),
      options,
    )
    Object.defineProperty(regex, 'result', {
      configurable: true,
      enumerable: false,
      value: ast_array,
    })
    return regex
  }

  return memoize$3('makeRe', pattern, options, makeRe)
}

/**
 * Expand the given brace `pattern`.
 *
 * ```js
 * var mm = require('micromatch');
 * console.log(mm.braces('foo/{a,b}/bar'));
 * //=> ['foo/(a|b)/bar']
 *
 * console.log(mm.braces('foo/{a,b}/bar', {expand: true}));
 * //=> ['foo/(a|b)/bar']
 * ```
 * @param {String} `pattern` String with brace pattern to expand.
 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
 * @return {Array}
 * @api public
 */

micromatch$1.braces = function (pattern, options) {
  if (typeof pattern !== 'string' && !Array.isArray(pattern)) {
    throw new TypeError('expected pattern to be an array or string')
  }

  function expand() {
    if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
      return utils_1$3.arrayify(pattern)
    }
    return D__git_packageInherit_node_modules_braces(pattern, options)
  }

  return memoize$3('braces', pattern, options, expand)
}

/**
 * Proxy to the [micromatch.braces](#method), for parity with
 * minimatch.
 */

micromatch$1.braceExpand = function (pattern, options) {
  var opts = D__git_packageInherit_node_modules_micromatch_node_modules_extendShallow(
    {},
    options,
    { expand: true },
  )
  return micromatch$1.braces(pattern, opts)
}

/**
 * Parses the given glob `pattern` and returns an array of abstract syntax
 * trees (ASTs), with the compiled `output` and optional source `map` on
 * each AST.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.create(pattern[, options]);
 *
 * console.log(mm.create('abc/*.js'));
 * // [{ options: { source: 'string', sourcemap: true },
 * //   state: {},
 * //   compilers:
 * //    { ... },
 * //   output: '(\\.[\\\\\\/])?abc\\/(?!\\.)(?=.)[^\\/]*?\\.js',
 * //   ast:
 * //    { type: 'root',
 * //      errors: [],
 * //      nodes:
 * //       [ ... ],
 * //      dot: false,
 * //      input: 'abc/*.js' },
 * //   parsingErrors: [],
 * //   map:
 * //    { version: 3,
 * //      sources: [ 'string' ],
 * //      names: [],
 * //      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',
 * //      sourcesContent: [ 'abc/*.js' ] },
 * //   position: { line: 1, column: 28 },
 * //   content: {},
 * //   files: {},
 * //   idx: 6 }]
 * ```
 * @param {String} `pattern` Glob pattern to parse and compile.
 * @param {Object} `options` Any [options](#options) to change how parsing and compiling is performed.
 * @return {Object} Returns an object with the parsed AST, compiled string and optional source map.
 * @api public
 */

micromatch$1.create = function (pattern, options) {
  return memoize$3('create', pattern, options, function () {
    function create(str, opts) {
      return micromatch$1.compile(micromatch$1.parse(str, opts), opts)
    }

    pattern = micromatch$1.braces(pattern, options)
    var len = pattern.length
    var idx = -1
    var res = []

    while (++idx < len) {
      res.push(create(pattern[idx], options))
    }
    return res
  })
}

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.parse(pattern[, options]);
 *
 * var ast = mm.parse('a/{b,c}/d');
 * console.log(ast);
 * // { type: 'root',
 * //   errors: [],
 * //   input: 'a/{b,c}/d',
 * //   nodes:
 * //    [ { type: 'bos', val: '' },
 * //      { type: 'text', val: 'a/' },
 * //      { type: 'brace',
 * //        nodes:
 * //         [ { type: 'brace.open', val: '{' },
 * //           { type: 'text', val: 'b,c' },
 * //           { type: 'brace.close', val: '}' } ] },
 * //      { type: 'text', val: '/d' },
 * //      { type: 'eos', val: '' } ] }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an AST
 * @api public
 */

micromatch$1.parse = function (pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('expected a string')
  }

  function parse() {
    var snapdragon = utils_1$3.instantiate(null, options)
    parsers$4(snapdragon)

    var ast = snapdragon.parse(pattern, options)
    utils_1$3.define(ast, 'snapdragon', snapdragon)
    ast.input = pattern
    return ast
  }

  return memoize$3('parse', pattern, options, parse)
}

/**
 * Compile the given `ast` or string with the given `options`.
 *
 * ```js
 * var mm = require('micromatch');
 * mm.compile(ast[, options]);
 *
 * var ast = mm.parse('a/{b,c}/d');
 * console.log(mm.compile(ast));
 * // { options: { source: 'string' },
 * //   state: {},
 * //   compilers:
 * //    { eos: [Function],
 * //      noop: [Function],
 * //      bos: [Function],
 * //      brace: [Function],
 * //      'brace.open': [Function],
 * //      text: [Function],
 * //      'brace.close': [Function] },
 * //   output: [ 'a/(b|c)/d' ],
 * //   ast:
 * //    { ... },
 * //   parsingErrors: [] }
 * ```
 * @param {Object|String} `ast`
 * @param {Object} `options`
 * @return {Object} Returns an object that has an `output` property with the compiled string.
 * @api public
 */

micromatch$1.compile = function (ast, options) {
  if (typeof ast === 'string') {
    ast = micromatch$1.parse(ast, options)
  }

  return memoize$3('compile', ast.input, options, function () {
    var snapdragon = utils_1$3.instantiate(ast, options)
    compilers$4(snapdragon)
    return snapdragon.compile(ast, options)
  })
}

/**
 * Clear the regex cache.
 *
 * ```js
 * mm.clearCache();
 * ```
 * @api public
 */

micromatch$1.clearCache = function () {
  micromatch$1.cache.caches = {}
}

/**
 * Returns true if the given value is effectively an empty string
 */

function isEmptyString$1(val) {
  return String(val) === '' || String(val) === './'
}

/**
 * Compose a matcher function with the given patterns.
 * This allows matcher functions to be compiled once and
 * called multiple times.
 */

function compose$2(patterns, options, matcher) {
  var matchers

  return memoize$3('compose', String(patterns), options, function () {
    return function (file) {
      // delay composition until it's invoked the first time,
      // after that it won't be called again
      if (!matchers) {
        matchers = []
        for (var i = 0; i < patterns.length; i++) {
          matchers.push(matcher(patterns[i], options))
        }
      }

      var len = matchers.length
      while (len--) {
        if (matchers[len](file) === true) {
          return true
        }
      }
      return false
    }
  })
}

/**
 * Memoize a generated regex or function. A unique key is generated
 * from the `type` (usually method name), the `pattern`, and
 * user-defined options.
 */

function memoize$3(type, pattern, options, fn) {
  var key = utils_1$3.createKey(type + '=' + pattern, options)

  if (options && options.cache === false) {
    return fn(pattern, options)
  }

  if (cache$5.has(type, key)) {
    return cache$5.get(type, key)
  }

  var val = fn(pattern, options)
  cache$5.set(type, key, val)
  return val
}

/**
 * Expose compiler, parser and cache on `micromatch`
 */

micromatch$1.compilers = compilers$4
micromatch$1.parsers = parsers$4
micromatch$1.caches = cache$5.caches

/**
 * Expose `micromatch`
 * @type {Function}
 */

var D__git_packageInherit_node_modules_micromatch = micromatch$1

var findYarnWorkspaceRoot = findWorkspaceRoot

/**
 * Adapted from:
 * https://github.com/yarnpkg/yarn/blob/ddf2f9ade211195372236c2f39a75b00fa18d4de/src/config.js#L612
 * @param {string} [initial]
 * @return {string|null}
 */
function findWorkspaceRoot(initial) {
  if (!initial) {
    initial = process.cwd()
  }
  let previous = null
  let current = path__default['default'].normalize(initial)

  do {
    const manifest = readPackageJSON(current)
    const workspaces = extractWorkspaces(manifest)

    if (workspaces) {
      const relativePath = path__default['default'].relative(current, initial)
      if (
        relativePath === '' ||
        D__git_packageInherit_node_modules_micromatch(
          [relativePath],
          workspaces,
        ).length > 0
      ) {
        return current
      } else {
        return null
      }
    }

    previous = current
    current = path__default['default'].dirname(current)
  } while (current !== previous)

  return null
}

function extractWorkspaces(manifest) {
  const workspaces = (manifest || {}).workspaces
  return (
    (workspaces && workspaces.packages) ||
    (Array.isArray(workspaces) ? workspaces : null)
  )
}

function readPackageJSON(dir) {
  const file = path__default['default'].join(dir, 'package.json')
  if (
    D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib.pathExistsSync(
      file,
    )
  ) {
    return D__git_packageInherit_node_modules_findYarnWorkspaceRoot_node_modules_fsExtra_lib.readJsonSync(
      file,
    )
  }
  return null
}

var yarnWorkspaces = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const path_1 = __importDefault(path__default['default'])
  const fs_1 = __importDefault(fs__default['default'])
  const find_yarn_workspace_root_1 = __importDefault(findYarnWorkspaceRoot)

  function getYarnWorkspaceRoot(cwd) {
    const yarnWorkspacesRoot = find_yarn_workspace_root_1.default(cwd)
    if (!yarnWorkspacesRoot) {
      throw new Error('Could not find yarn workspaces root')
    }
    return yarnWorkspacesRoot
  }
  function getRootPackageJson(yarnWorkspacesRoot) {
    const packageJsonFile = path_1.default.join(
      yarnWorkspacesRoot,
      'package.json',
    )
    try {
      const packageJson = JSON.parse(
        fs_1.default.readFileSync(packageJsonFile, 'utf-8'),
      )
      return packageJson
    } catch (e) {
      throw new Error('Could not load package.json from workspaces root')
    }
  }
  function getPackages(packageJson) {
    const { workspaces } = packageJson
    if (workspaces && Array.isArray(workspaces)) {
      return workspaces
    }
    if (!workspaces || !workspaces.packages) {
      throw new Error('Could not find a workspaces object in package.json')
    }
    return workspaces.packages
  }
  function getYarnWorkspaces(cwd) {
    try {
      const yarnWorkspacesRoot = getYarnWorkspaceRoot(cwd)
      const rootPackageJson = getRootPackageJson(yarnWorkspacesRoot)
      const packages = getPackages(rootPackageJson)
      const packagePaths = getPackagePaths_1.getPackagePaths(
        yarnWorkspacesRoot,
        packages,
      )
      const workspaceInfo = getWorkspacePackageInfo_1.getWorkspacePackageInfo(
        packagePaths,
      )
      return workspaceInfo
    } catch (_a) {
      return []
    }
  }
  exports.getYarnWorkspaces = getYarnWorkspaces
})

var unicode = createCommonjsModule(function (module) {
  // This is autogenerated with esprima tools, see:
  // https://github.com/ariya/esprima/blob/master/esprima.js
  //
  // PS: oh God, I hate Unicode

  // ECMAScript 5.1/Unicode v6.3.0 NonAsciiIdentifierStart:

  var Uni = module.exports

  module.exports.isWhiteSpace = function isWhiteSpace(x) {
    // section 7.2, table 2
    return (
      x === '\u0020' ||
      x === '\u00A0' ||
      x === '\uFEFF' || // <-- this is not a Unicode WS, only a JS one
      (x >= '\u0009' && x <= '\u000D') || // 9 A B C D
      // + whitespace characters from unicode, category Zs
      x === '\u1680' ||
      (x >= '\u2000' && x <= '\u200A') || // 0 1 2 3 4 5 6 7 8 9 A
      x === '\u2028' ||
      x === '\u2029' ||
      x === '\u202F' ||
      x === '\u205F' ||
      x === '\u3000'
    )
  }

  module.exports.isWhiteSpaceJSON = function isWhiteSpaceJSON(x) {
    return x === '\u0020' || x === '\u0009' || x === '\u000A' || x === '\u000D'
  }

  module.exports.isLineTerminator = function isLineTerminator(x) {
    // ok, here is the part when JSON is wrong
    // section 7.3, table 3
    return x === '\u000A' || x === '\u000D' || x === '\u2028' || x === '\u2029'
  }

  module.exports.isLineTerminatorJSON = function isLineTerminatorJSON(x) {
    return x === '\u000A' || x === '\u000D'
  }

  module.exports.isIdentifierStart = function isIdentifierStart(x) {
    return (
      x === '$' ||
      x === '_' ||
      (x >= 'A' && x <= 'Z') ||
      (x >= 'a' && x <= 'z') ||
      (x >= '\u0080' && Uni.NonAsciiIdentifierStart.test(x))
    )
  }

  module.exports.isIdentifierPart = function isIdentifierPart(x) {
    return (
      x === '$' ||
      x === '_' ||
      (x >= 'A' && x <= 'Z') ||
      (x >= 'a' && x <= 'z') ||
      (x >= '0' && x <= '9') || // <-- addition to Start
      (x >= '\u0080' && Uni.NonAsciiIdentifierPart.test(x))
    )
  }

  module.exports.NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/

  // ECMAScript 5.1/Unicode v6.3.0 NonAsciiIdentifierPart:

  module.exports.NonAsciiIdentifierPart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
})

var parse_1$2 = createCommonjsModule(function (module) {
  // RTFM: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

  function isHexDigit(x) {
    return (
      (x >= '0' && x <= '9') || (x >= 'A' && x <= 'F') || (x >= 'a' && x <= 'f')
    )
  }

  function isOctDigit(x) {
    return x >= '0' && x <= '7'
  }

  function isDecDigit(x) {
    return x >= '0' && x <= '9'
  }

  var unescapeMap = {
    "'": "'",
    '"': '"',
    '\\': '\\',
    b: '\b',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t',
    v: '\v',
    '/': '/',
  }

  function formatError(input, msg, position, lineno, column, json5) {
    var result = msg + ' at ' + (lineno + 1) + ':' + (column + 1),
      tmppos = position - column - 1,
      srcline = '',
      underline = ''

    var isLineTerminator = json5
      ? unicode.isLineTerminator
      : unicode.isLineTerminatorJSON

    // output no more than 70 characters before the wrong ones
    if (tmppos < position - 70) {
      tmppos = position - 70
    }

    while (1) {
      var chr = input[++tmppos]

      if (isLineTerminator(chr) || tmppos === input.length) {
        if (position >= tmppos) {
          // ending line error, so show it after the last char
          underline += '^'
        }
        break
      }
      srcline += chr

      if (position === tmppos) {
        underline += '^'
      } else if (position > tmppos) {
        underline += input[tmppos] === '\t' ? '\t' : ' '
      }

      // output no more than 78 characters on the string
      if (srcline.length > 78) break
    }

    return result + '\n' + srcline + '\n' + underline
  }

  function parse(input, options) {
    // parse as a standard JSON mode
    var json5 = false
    var cjson = false

    if (options.legacy || options.mode === 'json');
    else if (options.mode === 'cjson') {
      cjson = true
    } else if (options.mode === 'json5') {
      json5 = true
    } else {
      // use it by default
      json5 = true
    }

    var isLineTerminator = json5
      ? unicode.isLineTerminator
      : unicode.isLineTerminatorJSON
    var isWhiteSpace = json5 ? unicode.isWhiteSpace : unicode.isWhiteSpaceJSON

    var length = input.length,
      lineno = 0,
      linestart = 0,
      position = 0,
      stack = []

    var tokenStart = function () {}
    var tokenEnd = function (v) {
      return v
    }

    /* tokenize({
         raw: '...',
         type: 'whitespace'|'comment'|'key'|'literal'|'separator'|'newline',
         value: 'number'|'string'|'whatever',
         path: [...],
       })
    */
    if (options._tokenize) {
      ;(function () {
        var start = null
        tokenStart = function () {
          if (start !== null) throw Error('internal error, token overlap')
          start = position
        }

        tokenEnd = function (v, type) {
          if (start != position) {
            var hash = {
              raw: input.substr(start, position - start),
              type: type,
              stack: stack.slice(0),
            }
            if (v !== undefined) hash.value = v
            options._tokenize.call(null, hash)
          }
          start = null
          return v
        }
      })()
    }

    function fail(msg) {
      var column = position - linestart

      if (!msg) {
        if (position < length) {
          var token =
            "'" +
            JSON.stringify(input[position])
              .replace(/^"|"$/g, '')
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"') +
            "'"

          if (!msg) msg = 'Unexpected token ' + token
        } else {
          if (!msg) msg = 'Unexpected end of input'
        }
      }

      var error = SyntaxError(
        formatError(input, msg, position, lineno, column, json5),
      )
      error.row = lineno + 1
      error.column = column + 1
      throw error
    }

    function newline(chr) {
      // account for <cr><lf>
      if (chr === '\r' && input[position] === '\n') position++
      linestart = position
      lineno++
    }

    function parseGeneric() {
      while (position < length) {
        tokenStart()
        var chr = input[position++]

        if (chr === '"' || (chr === "'" && json5)) {
          return tokenEnd(parseString(chr), 'literal')
        } else if (chr === '{') {
          tokenEnd(undefined, 'separator')
          return parseObject()
        } else if (chr === '[') {
          tokenEnd(undefined, 'separator')
          return parseArray()
        } else if (
          chr === '-' ||
          chr === '.' ||
          isDecDigit(chr) ||
          //           + number       Infinity          NaN
          (json5 && (chr === '+' || chr === 'I' || chr === 'N'))
        ) {
          return tokenEnd(parseNumber(), 'literal')
        } else if (chr === 'n') {
          parseKeyword('null')
          return tokenEnd(null, 'literal')
        } else if (chr === 't') {
          parseKeyword('true')
          return tokenEnd(true, 'literal')
        } else if (chr === 'f') {
          parseKeyword('false')
          return tokenEnd(false, 'literal')
        } else {
          position--
          return tokenEnd(undefined)
        }
      }
    }

    function parseKey() {
      var result

      while (position < length) {
        tokenStart()
        var chr = input[position++]

        if (chr === '"' || (chr === "'" && json5)) {
          return tokenEnd(parseString(chr), 'key')
        } else if (chr === '{') {
          tokenEnd(undefined, 'separator')
          return parseObject()
        } else if (chr === '[') {
          tokenEnd(undefined, 'separator')
          return parseArray()
        } else if (chr === '.' || isDecDigit(chr)) {
          return tokenEnd(parseNumber(), 'key')
        } else if (
          (json5 && unicode.isIdentifierStart(chr)) ||
          (chr === '\\' && input[position] === 'u')
        ) {
          // unicode char or a unicode sequence
          var rollback = position - 1
          var result = parseIdentifier()

          if (result === undefined) {
            position = rollback
            return tokenEnd(undefined)
          } else {
            return tokenEnd(result, 'key')
          }
        } else {
          position--
          return tokenEnd(undefined)
        }
      }
    }

    function skipWhiteSpace() {
      tokenStart()
      while (position < length) {
        var chr = input[position++]

        if (isLineTerminator(chr)) {
          position--
          tokenEnd(undefined, 'whitespace')
          tokenStart()
          position++
          newline(chr)
          tokenEnd(undefined, 'newline')
          tokenStart()
        } else if (isWhiteSpace(chr));
        else if (
          chr === '/' &&
          (json5 || cjson) &&
          (input[position] === '/' || input[position] === '*')
        ) {
          position--
          tokenEnd(undefined, 'whitespace')
          tokenStart()
          position++
          skipComment(input[position++] === '*')
          tokenEnd(undefined, 'comment')
          tokenStart()
        } else {
          position--
          break
        }
      }
      return tokenEnd(undefined, 'whitespace')
    }

    function skipComment(multi) {
      while (position < length) {
        var chr = input[position++]

        if (isLineTerminator(chr)) {
          // LineTerminator is an end of singleline comment
          if (!multi) {
            // let parent function deal with newline
            position--
            return
          }

          newline(chr)
        } else if (chr === '*' && multi) {
          // end of multiline comment
          if (input[position] === '/') {
            position++
            return
          }
        } else;
      }

      if (multi) {
        fail('Unclosed multiline comment')
      }
    }

    function parseKeyword(keyword) {
      // keyword[0] is not checked because it should've checked earlier
      var _pos = position
      var len = keyword.length
      for (var i = 1; i < len; i++) {
        if (position >= length || keyword[i] != input[position]) {
          position = _pos - 1
          fail()
        }
        position++
      }
    }

    function parseObject() {
      var result = options.null_prototype ? Object.create(null) : {},
        empty_object = {},
        is_non_empty = false

      while (position < length) {
        skipWhiteSpace()
        var item1 = parseKey()
        skipWhiteSpace()
        tokenStart()
        var chr = input[position++]
        tokenEnd(undefined, 'separator')

        if (chr === '}' && item1 === undefined) {
          if (!json5 && is_non_empty) {
            position--
            fail('Trailing comma in object')
          }
          return result
        } else if (chr === ':' && item1 !== undefined) {
          skipWhiteSpace()
          stack.push(item1)
          var item2 = parseGeneric()
          stack.pop()

          if (item2 === undefined) fail('No value found for key ' + item1)
          if (typeof item1 !== 'string') {
            if (!json5 || typeof item1 !== 'number') {
              fail('Wrong key type: ' + item1)
            }
          }

          if (
            (item1 in empty_object || empty_object[item1] != null) &&
            options.reserved_keys !== 'replace'
          ) {
            if (options.reserved_keys === 'throw') {
              fail('Reserved key: ' + item1)
            }
          } else {
            if (typeof options.reviver === 'function') {
              item2 = options.reviver.call(null, item1, item2)
            }

            if (item2 !== undefined) {
              is_non_empty = true
              Object.defineProperty(result, item1, {
                value: item2,
                enumerable: true,
                configurable: true,
                writable: true,
              })
            }
          }

          skipWhiteSpace()

          tokenStart()
          var chr = input[position++]
          tokenEnd(undefined, 'separator')

          if (chr === ',') {
            continue
          } else if (chr === '}') {
            return result
          } else {
            fail()
          }
        } else {
          position--
          fail()
        }
      }

      fail()
    }

    function parseArray() {
      var result = []

      while (position < length) {
        skipWhiteSpace()
        stack.push(result.length)
        var item = parseGeneric()
        stack.pop()
        skipWhiteSpace()
        tokenStart()
        var chr = input[position++]
        tokenEnd(undefined, 'separator')

        if (item !== undefined) {
          if (typeof options.reviver === 'function') {
            item = options.reviver.call(null, String(result.length), item)
          }
          if (item === undefined) {
            result.length++
            item = true // hack for check below, not included into result
          } else {
            result.push(item)
          }
        }

        if (chr === ',') {
          if (item === undefined) {
            fail('Elisions are not supported')
          }
        } else if (chr === ']') {
          if (!json5 && item === undefined && result.length) {
            position--
            fail('Trailing comma in array')
          }
          return result
        } else {
          position--
          fail()
        }
      }
    }

    function parseNumber() {
      // rewind because we don't know first char
      position--

      var start = position,
        chr = input[position++]
      var to_num = function (is_octal) {
        var str = input.substr(start, position - start)

        if (is_octal) {
          var result = parseInt(str.replace(/^0o?/, ''), 8)
        } else {
          var result = Number(str)
        }

        if (Number.isNaN(result)) {
          position--
          fail(
            'Bad numeric literal - "' +
              input.substr(start, position - start + 1) +
              '"',
          )
        } else if (
          !json5 &&
          !str.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)
        ) {
          // additional restrictions imposed by json
          position--
          fail(
            'Non-json numeric literal - "' +
              input.substr(start, position - start + 1) +
              '"',
          )
        } else {
          return result
        }
      }

      // ex: -5982475.249875e+29384
      //     ^ skipping this
      if (chr === '-' || (chr === '+' && json5)) chr = input[position++]

      if (chr === 'N' && json5) {
        parseKeyword('NaN')
        return NaN
      }

      if (chr === 'I' && json5) {
        parseKeyword('Infinity')

        // returning +inf or -inf
        return to_num()
      }

      if (chr >= '1' && chr <= '9') {
        // ex: -5982475.249875e+29384
        //        ^^^ skipping these
        while (position < length && isDecDigit(input[position])) position++
        chr = input[position++]
      }

      // special case for leading zero: 0.123456
      if (chr === '0') {
        chr = input[position++]

        //             new syntax, "0o777"           old syntax, "0777"
        var is_octal = chr === 'o' || chr === 'O' || isOctDigit(chr)
        var is_hex = chr === 'x' || chr === 'X'

        if (json5 && (is_octal || is_hex)) {
          while (
            position < length &&
            (is_hex ? isHexDigit : isOctDigit)(input[position])
          )
            position++

          var sign = 1
          if (input[start] === '-') {
            sign = -1
            start++
          } else if (input[start] === '+') {
            start++
          }

          return sign * to_num(is_octal)
        }
      }

      if (chr === '.') {
        // ex: -5982475.249875e+29384
        //                ^^^ skipping these
        while (position < length && isDecDigit(input[position])) position++
        chr = input[position++]
      }

      if (chr === 'e' || chr === 'E') {
        chr = input[position++]
        if (chr === '-' || chr === '+') position++
        // ex: -5982475.249875e+29384
        //                       ^^^ skipping these
        while (position < length && isDecDigit(input[position])) position++
        chr = input[position++]
      }

      // we have char in the buffer, so count for it
      position--
      return to_num()
    }

    function parseIdentifier() {
      // rewind because we don't know first char
      position--

      var result = ''

      while (position < length) {
        var chr = input[position++]

        if (
          chr === '\\' &&
          input[position] === 'u' &&
          isHexDigit(input[position + 1]) &&
          isHexDigit(input[position + 2]) &&
          isHexDigit(input[position + 3]) &&
          isHexDigit(input[position + 4])
        ) {
          // UnicodeEscapeSequence
          chr = String.fromCharCode(parseInt(input.substr(position + 1, 4), 16))
          position += 5
        }

        if (result.length) {
          // identifier started
          if (unicode.isIdentifierPart(chr)) {
            result += chr
          } else {
            position--
            return result
          }
        } else {
          if (unicode.isIdentifierStart(chr)) {
            result += chr
          } else {
            return undefined
          }
        }
      }

      fail()
    }

    function parseString(endChar) {
      // 7.8.4 of ES262 spec
      var result = ''

      while (position < length) {
        var chr = input[position++]

        if (chr === endChar) {
          return result
        } else if (chr === '\\') {
          if (position >= length) fail()
          chr = input[position++]

          if (unescapeMap[chr] && (json5 || (chr != 'v' && chr != "'"))) {
            result += unescapeMap[chr]
          } else if (json5 && isLineTerminator(chr)) {
            // line continuation
            newline(chr)
          } else if (chr === 'u' || (chr === 'x' && json5)) {
            // unicode/character escape sequence
            var off = chr === 'u' ? 4 : 2

            // validation for \uXXXX
            for (var i = 0; i < off; i++) {
              if (position >= length) fail()
              if (!isHexDigit(input[position])) fail('Bad escape sequence')
              position++
            }

            result += String.fromCharCode(
              parseInt(input.substr(position - off, off), 16),
            )
          } else if (json5 && isOctDigit(chr)) {
            if (
              chr < '4' &&
              isOctDigit(input[position]) &&
              isOctDigit(input[position + 1])
            ) {
              // three-digit octal
              var digits = 3
            } else if (isOctDigit(input[position])) {
              // two-digit octal
              var digits = 2
            } else {
              var digits = 1
            }
            position += digits - 1
            result += String.fromCharCode(
              parseInt(input.substr(position - digits, digits), 8),
            )
            /*if (!isOctDigit(input[position])) {
              // \0 is allowed still
              result += '\0'
            } else {
              fail('Octal literals are not supported')
            }*/
          } else if (json5) {
            // \X -> x
            result += chr
          } else {
            position--
            fail()
          }
        } else if (isLineTerminator(chr)) {
          fail()
        } else {
          if (!json5 && chr.charCodeAt(0) < 32) {
            position--
            fail('Unexpected control character')
          }

          // SourceCharacter but not one of " or \ or LineTerminator
          result += chr
        }
      }

      fail()
    }

    skipWhiteSpace()
    var return_value = parseGeneric()
    if (return_value !== undefined || position < length) {
      skipWhiteSpace()

      if (position >= length) {
        if (typeof options.reviver === 'function') {
          return_value = options.reviver.call(null, '', return_value)
        }
        return return_value
      } else {
        fail()
      }
    } else {
      if (position) {
        fail('No data, only a whitespace')
      } else {
        fail('No data, empty input')
      }
    }
  }

  /*
   * parse(text, options)
   * or
   * parse(text, reviver)
   *
   * where:
   * text - string
   * options - object
   * reviver - function
   */
  module.exports.parse = function parseJSON(input, options) {
    // support legacy functions
    if (typeof options === 'function') {
      options = {
        reviver: options,
      }
    }

    if (input === undefined) {
      // parse(stringify(x)) should be equal x
      // with JSON functions it is not 'cause of undefined
      // so we're fixing it
      return undefined
    }

    // JSON.parse compat
    if (typeof input !== 'string') input = String(input)
    if (options == null) options = {}
    if (options.reserved_keys == null) options.reserved_keys = 'ignore'

    if (
      options.reserved_keys === 'throw' ||
      options.reserved_keys === 'ignore'
    ) {
      if (options.null_prototype == null) {
        options.null_prototype = true
      }
    }

    try {
      return parse(input, options)
    } catch (err) {
      // jju is a recursive parser, so JSON.parse("{{{{{{{") could blow up the stack
      //
      // this catch is used to skip all those internal calls
      if (err instanceof SyntaxError && err.row != null && err.column != null) {
        var old_err = err
        err = SyntaxError(old_err.message)
        err.column = old_err.column
        err.row = old_err.row
      }
      throw err
    }
  }

  module.exports.tokenize = function tokenizeJSON(input, options) {
    if (options == null) options = {}

    options._tokenize = function (smth) {
      if (options._addstack)
        smth.stack.unshift.apply(smth.stack, options._addstack)
      tokens.push(smth)
    }

    var tokens = []
    tokens.data = module.exports.parse(input, options)
    return tokens
  }
})

// Fix Function#name on browsers that do not support it (IE)
// http://stackoverflow.com/questions/6903762/function-name-not-supported-in-ie
if (!function f() {}.name) {
  Object.defineProperty(function () {}.constructor.prototype, 'name', {
    get: function () {
      var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]
      // For better performance only parse once, and then cache the
      // result through a new accessor for repeated access.
      Object.defineProperty(this, 'name', { value: name })
      return name
    },
  })
}

var special_chars = {
  0: '\\0', // this is not an octal literal
  8: '\\b',
  9: '\\t',
  10: '\\n',
  11: '\\v',
  12: '\\f',
  13: '\\r',
  92: '\\\\',
}

// for oddballs
var hasOwnProperty = Object.prototype.hasOwnProperty

// some people escape those, so I'd copy this to be safe
var escapable = /[\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/

function _stringify(object, options, recursiveLvl, currentKey) {
  var json5 = options.mode === 'json5' || !options.mode
  /*
   * Opinionated decision warning:
   *
   * Objects are serialized in the following form:
   * { type: 'Class', data: DATA }
   *
   * Class is supposed to be a function, and new Class(DATA) is
   * supposed to be equivalent to the original value
   */
  /*function custom_type() {
    return stringify({
      type: object.constructor.name,
      data: object.toString()
    })
  }*/

  // if add, it's an internal indentation, so we add 1 level and a eol
  // if !add, it's an ending indentation, so we just indent
  function indent(str, add) {
    var prefix = options._prefix ? options._prefix : ''
    if (!options.indent) return prefix + str
    var result = ''
    var count = recursiveLvl + (add || 0)
    for (var i = 0; i < count; i++) result += options.indent
    return prefix + result + str + (add ? '\n' : '')
  }

  function _stringify_key(key) {
    if (options.quote_keys) return _stringify_str(key)
    if (String(Number(key)) == key && key[0] != '-') return key
    if (key == '') return _stringify_str(key)

    var result = ''
    for (var i = 0; i < key.length; i++) {
      if (i > 0) {
        if (!unicode.isIdentifierPart(key[i])) return _stringify_str(key)
      } else {
        if (!unicode.isIdentifierStart(key[i])) return _stringify_str(key)
      }

      var chr = key.charCodeAt(i)

      if (options.ascii) {
        if (chr < 0x80) {
          result += key[i]
        } else {
          result += '\\u' + ('0000' + chr.toString(16)).slice(-4)
        }
      } else {
        if (escapable.exec(key[i])) {
          result += '\\u' + ('0000' + chr.toString(16)).slice(-4)
        } else {
          result += key[i]
        }
      }
    }

    return result
  }

  function _stringify_str(key) {
    var quote = options.quote
    var quoteChr = quote.charCodeAt(0)

    var result = ''
    for (var i = 0; i < key.length; i++) {
      var chr = key.charCodeAt(i)

      if (chr < 0x10) {
        if (chr === 0 && json5) {
          result += '\\0'
        } else if (chr >= 8 && chr <= 13 && (json5 || chr !== 11)) {
          result += special_chars[chr]
        } else if (json5) {
          result += '\\x0' + chr.toString(16)
        } else {
          result += '\\u000' + chr.toString(16)
        }
      } else if (chr < 0x20) {
        if (json5) {
          result += '\\x' + chr.toString(16)
        } else {
          result += '\\u00' + chr.toString(16)
        }
      } else if (chr >= 0x20 && chr < 0x80) {
        // ascii range
        if (chr === 47 && i && key[i - 1] === '<') {
          // escaping slashes in </script>
          result += '\\' + key[i]
        } else if (chr === 92) {
          result += '\\\\'
        } else if (chr === quoteChr) {
          result += '\\' + quote
        } else {
          result += key[i]
        }
      } else if (
        options.ascii ||
        unicode.isLineTerminator(key[i]) ||
        escapable.exec(key[i])
      ) {
        if (chr < 0x100) {
          if (json5) {
            result += '\\x' + chr.toString(16)
          } else {
            result += '\\u00' + chr.toString(16)
          }
        } else if (chr < 0x1000) {
          result += '\\u0' + chr.toString(16)
        } else if (chr < 0x10000) {
          result += '\\u' + chr.toString(16)
        } else {
          throw Error('weird codepoint')
        }
      } else {
        result += key[i]
      }
    }
    return quote + result + quote
  }

  function _stringify_object() {
    if (object === null) return 'null'
    var result = [],
      len = 0,
      braces

    if (Array.isArray(object)) {
      braces = '[]'
      for (var i = 0; i < object.length; i++) {
        var s = _stringify(object[i], options, recursiveLvl + 1, String(i))
        if (s === undefined) s = 'null'
        len += s.length + 2
        result.push(s + ',')
      }
    } else {
      braces = '{}'
      var fn = function (key) {
        var t = _stringify(object[key], options, recursiveLvl + 1, key)
        if (t !== undefined) {
          t = _stringify_key(key) + ':' + (options.indent ? ' ' : '') + t + ','
          len += t.length + 1
          result.push(t)
        }
      }

      if (Array.isArray(options.replacer)) {
        for (var i = 0; i < options.replacer.length; i++)
          if (hasOwnProperty.call(object, options.replacer[i]))
            fn(options.replacer[i])
      } else {
        var keys = Object.keys(object)
        if (options.sort_keys)
          keys = keys.sort(
            typeof options.sort_keys === 'function'
              ? options.sort_keys
              : undefined,
          )
        keys.forEach(fn)
      }
    }

    // objects shorter than 30 characters are always inlined
    // objects longer than 60 characters are always splitted to multiple lines
    // anything in the middle depends on indentation level
    len -= 2
    if (
      options.indent &&
      (len > options._splitMax - recursiveLvl * options.indent.length ||
        len > options._splitMin)
    ) {
      // remove trailing comma in multiline if asked to
      if (options.no_trailing_comma && result.length) {
        result[result.length - 1] = result[result.length - 1].substring(
          0,
          result[result.length - 1].length - 1,
        )
      }

      var innerStuff = result
        .map(function (x) {
          return indent(x, 1)
        })
        .join('')
      return (
        braces[0] +
        (options.indent ? '\n' : '') +
        innerStuff +
        indent(braces[1])
      )
    } else {
      // always remove trailing comma in one-lined arrays
      if (result.length) {
        result[result.length - 1] = result[result.length - 1].substring(
          0,
          result[result.length - 1].length - 1,
        )
      }

      var innerStuff = result.join(options.indent ? ' ' : '')
      return braces[0] + innerStuff + braces[1]
    }
  }

  function _stringify_nonobject(object) {
    if (typeof options.replacer === 'function') {
      object = options.replacer.call(null, currentKey, object)
    }

    switch (typeof object) {
      case 'string':
        return _stringify_str(object)

      case 'number':
        if (object === 0 && 1 / object < 0) {
          // Opinionated decision warning:
          //
          // I want cross-platform negative zero in all js engines
          // I know they're equal, but why lose that tiny bit of
          // information needlessly?
          return '-0'
        }
        if (!json5 && !Number.isFinite(object)) {
          // json don't support infinity (= sucks)
          return 'null'
        }
        return object.toString()

      case 'boolean':
        return object.toString()

      case 'undefined':
        return undefined

      case 'function':
      //        return custom_type()

      default:
        // fallback for something weird
        return JSON.stringify(object)
    }
  }

  if (options._stringify_key) {
    return _stringify_key(object)
  }

  if (typeof object === 'object') {
    if (object === null) return 'null'

    var str
    if (
      typeof (str = object.toJSON5) === 'function' &&
      options.mode !== 'json'
    ) {
      object = str.call(object, currentKey)
    } else if (typeof (str = object.toJSON) === 'function') {
      object = str.call(object, currentKey)
    }

    if (object === null) return 'null'
    if (typeof object !== 'object') return _stringify_nonobject(object)

    if (
      object.constructor === Number ||
      object.constructor === Boolean ||
      object.constructor === String
    ) {
      object = object.valueOf()
      return _stringify_nonobject(object)
    } else if (object.constructor === Date) {
      // only until we can't do better
      return _stringify_nonobject(object.toISOString())
    } else {
      if (typeof options.replacer === 'function') {
        object = options.replacer.call(null, currentKey, object)
        if (typeof object !== 'object') return _stringify_nonobject(object)
      }

      return _stringify_object()
    }
  } else {
    return _stringify_nonobject(object)
  }
}

/*
 * stringify(value, options)
 * or
 * stringify(value, replacer, space)
 *
 * where:
 * value - anything
 * options - object
 * replacer - function or array
 * space - boolean or number or string
 */
var stringify_1 = function stringifyJSON(object, options, _space) {
  // support legacy syntax
  if (typeof options === 'function' || Array.isArray(options)) {
    options = {
      replacer: options,
    }
  } else if (typeof options === 'object' && options !== null);
  else {
    options = {}
  }
  if (_space != null) options.indent = _space

  if (options.indent == null) options.indent = '\t'
  if (options.quote == null) options.quote = "'"
  if (options.ascii == null) options.ascii = false
  if (options.mode == null) options.mode = 'json5'

  if (options.mode === 'json' || options.mode === 'cjson') {
    // json only supports double quotes (= sucks)
    options.quote = '"'

    // json don't support trailing commas (= sucks)
    options.no_trailing_comma = true

    // json don't support unquoted property names (= sucks)
    options.quote_keys = true
  }

  // why would anyone use such objects?
  if (typeof options.indent === 'object') {
    if (
      options.indent.constructor === Number ||
      options.indent.constructor === Boolean ||
      options.indent.constructor === String
    )
      options.indent = options.indent.valueOf()
  }

  // gap is capped at 10 characters
  if (typeof options.indent === 'number') {
    if (options.indent >= 0) {
      options.indent = Array(Math.min(~~options.indent, 10) + 1).join(' ')
    } else {
      options.indent = false
    }
  } else if (typeof options.indent === 'string') {
    options.indent = options.indent.substr(0, 10)
  }

  if (options._splitMin == null) options._splitMin = 50
  if (options._splitMax == null) options._splitMax = 70

  return _stringify(object, options, 0, '')
}

var stringify$3 = {
  stringify: stringify_1,
}

var tokenize = parse_1$2.tokenize

var analyze_1 = function analyzeJSON(input, options) {
  if (options == null) options = {}

  if (!Array.isArray(input)) {
    input = tokenize(input, options)
  }

  var result = {
    has_whitespace: false,
    has_comments: false,
    has_newlines: false,
    has_trailing_comma: false,
    indent: '',
    newline: '\n',
    quote: '"',
    quote_keys: true,
  }

  var stats = {
    indent: {},
    newline: {},
    quote: {},
  }

  for (var i = 0; i < input.length; i++) {
    if (input[i].type === 'newline') {
      if (input[i + 1] && input[i + 1].type === 'whitespace') {
        if (input[i + 1].raw[0] === '\t') {
          // if first is tab, then indent is tab
          stats.indent['\t'] = (stats.indent['\t'] || 0) + 1
        }
        if (input[i + 1].raw.match(/^\x20+$/)) {
          // if all are spaces, then indent is space
          // this can fail with mixed indent (4, 2 would display 3)
          var ws_len = input[i + 1].raw.length
          var indent_len = input[i + 1].stack.length + 1
          if (ws_len % indent_len === 0) {
            var t = Array(ws_len / indent_len + 1).join(' ')
            stats.indent[t] = (stats.indent[t] || 0) + 1
          }
        }
      }

      stats.newline[input[i].raw] = (stats.newline[input[i].raw] || 0) + 1
    }

    if (input[i].type === 'newline') {
      result.has_newlines = true
    }
    if (input[i].type === 'whitespace') {
      result.has_whitespace = true
    }
    if (input[i].type === 'comment') {
      result.has_comments = true
    }
    if (input[i].type === 'key') {
      if (input[i].raw[0] !== '"' && input[i].raw[0] !== "'")
        result.quote_keys = false
    }

    if (input[i].type === 'key' || input[i].type === 'literal') {
      if (input[i].raw[0] === '"' || input[i].raw[0] === "'") {
        stats.quote[input[i].raw[0]] = (stats.quote[input[i].raw[0]] || 0) + 1
      }
    }

    if (input[i].type === 'separator' && input[i].raw === ',') {
      for (var j = i + 1; j < input.length; j++) {
        if (input[j].type === 'literal' || input[j].type === 'key') break
        if (input[j].type === 'separator') result.has_trailing_comma = true
      }
    }
  }

  for (var k in stats) {
    if (Object.keys(stats[k]).length) {
      result[k] = Object.keys(stats[k]).reduce(function (a, b) {
        return stats[k][a] > stats[k][b] ? a : b
      })
    }
  }

  return result
}

var analyze = {
  analyze: analyze_1,
}

var tokenize$1 = parse_1$2.tokenize
var stringify$4 = stringify$3.stringify
var analyze$1 = analyze.analyze

function isObject$e(x) {
  return typeof x === 'object' && x !== null
}

function value_to_tokenlist(value, stack, options, is_key, indent) {
  options = Object.create(options)
  options._stringify_key = !!is_key

  if (indent) {
    options._prefix = indent.prefix
      .map(function (x) {
        return x.raw
      })
      .join('')
  }

  if (options._splitMin == null) options._splitMin = 0
  if (options._splitMax == null) options._splitMax = 0

  var stringified = stringify$4(value, options)

  if (is_key) {
    return [{ raw: stringified, type: 'key', stack: stack, value: value }]
  }

  options._addstack = stack
  var result = tokenize$1(stringified, {
    _addstack: stack,
  })
  result.data = null
  return result
}

// '1.2.3' -> ['1','2','3']
function arg_to_path(path) {
  // array indexes
  if (typeof path === 'number') path = String(path)

  if (path === '') path = []
  if (typeof path === 'string') path = path.split('.')

  if (!Array.isArray(path))
    throw Error('Invalid path type, string or array expected')
  return path
}

// returns new [begin, end] or false if not found
//
//          {x:3, xxx: 111, y: [111,  {q: 1, e: 2}  ,333]  }
// f('y',0) returns this       B^^^^^^^^^^^^^^^^^^^^^^^^E
// then f('1',1) would reduce it to   B^^^^^^^^^^E
function find_element_in_tokenlist(element, lvl, tokens, begin, end) {
  while (tokens[begin].stack[lvl] != element) {
    if (begin++ >= end) return false
  }
  while (tokens[end].stack[lvl] != element) {
    if (end-- < begin) return false
  }
  return [begin, end]
}

function is_whitespace(token_type) {
  return (
    token_type === 'whitespace' ||
    token_type === 'newline' ||
    token_type === 'comment'
  )
}

function find_first_non_ws_token(tokens, begin, end) {
  while (is_whitespace(tokens[begin].type)) {
    if (begin++ >= end) return false
  }
  return begin
}

function find_last_non_ws_token(tokens, begin, end) {
  while (is_whitespace(tokens[end].type)) {
    if (end-- < begin) return false
  }
  return end
}

/*
 * when appending a new element of an object/array, we are trying to
 * figure out the style used on the previous element
 *
 * return {prefix, sep1, sep2, suffix}
 *
 *      '    "key" :  "element"    \r\n'
 * prefix^^^^ sep1^ ^^sep2     ^^^^^^^^suffix
 *
 * begin - the beginning of the object/array
 * end - last token of the last element (value or comma usually)
 */
function detect_indent_style(tokens, is_array, begin, end, level) {
  var result = {
    sep1: [],
    sep2: [],
    suffix: [],
    prefix: [],
    newline: [],
  }

  if (
    tokens[end].type === 'separator' &&
    tokens[end].stack.length !== level + 1 &&
    tokens[end].raw !== ','
  ) {
    // either a beginning of the array (no last element) or other weird situation
    //
    // just return defaults
    return result
  }

  //                              ' "key"  : "value"  ,'
  // skipping last separator, we're now here        ^^
  if (tokens[end].type === 'separator')
    end = find_last_non_ws_token(tokens, begin, end - 1)
  if (end === false) return result

  //                              ' "key"  : "value"  ,'
  // skipping value                          ^^^^^^^
  while (tokens[end].stack.length > level) end--

  if (!is_array) {
    while (is_whitespace(tokens[end].type)) {
      if (end < begin) return result
      if (tokens[end].type === 'whitespace') {
        result.sep2.unshift(tokens[end])
      } else {
        // newline, comment or other unrecognized codestyle
        return result
      }
      end--
    }

    //                              ' "key"  : "value"  ,'
    // skipping separator                    ^
    assert__default['default'].equal(tokens[end].type, 'separator')
    assert__default['default'].equal(tokens[end].raw, ':')
    while (is_whitespace(tokens[--end].type)) {
      if (end < begin) return result
      if (tokens[end].type === 'whitespace') {
        result.sep1.unshift(tokens[end])
      } else {
        // newline, comment or other unrecognized codestyle
        return result
      }
    }

    assert__default['default'].equal(tokens[end].type, 'key')
    end--
  }

  //                              ' "key"  : "value"  ,'
  // skipping key                   ^^^^^
  while (is_whitespace(tokens[end].type)) {
    if (end < begin) return result
    if (tokens[end].type === 'whitespace') {
      result.prefix.unshift(tokens[end])
    } else if (tokens[end].type === 'newline') {
      result.newline.unshift(tokens[end])
      return result
    } else {
      // comment or other unrecognized codestyle
      return result
    }
    end--
  }

  return result
}

function Document(text, options) {
  var self = Object.create(Document.prototype)

  if (options == null) options = {}
  //options._structure = true
  var tokens = (self._tokens = tokenize$1(text, options))
  self._data = tokens.data
  tokens.data = null
  self._options = options

  var stats = analyze$1(text, options)
  if (options.indent == null) {
    options.indent = stats.indent
  }
  if (options.quote == null) {
    options.quote = stats.quote
  }
  if (options.quote_keys == null) {
    options.quote_keys = stats.quote_keys
  }
  if (options.no_trailing_comma == null) {
    options.no_trailing_comma = !stats.has_trailing_comma
  }
  return self
}

// return true if it's a proper object
//        throw otherwise
function check_if_can_be_placed(key, object, is_unset) {
  //if (object == null) return false
  function error(add) {
    return Error(
      "You can't " + (is_unset ? 'unset' : 'set') + " key '" + key + "'" + add,
    )
  }

  if (!isObject$e(object)) {
    throw error(' of an non-object')
  }
  if (Array.isArray(object)) {
    // array, check boundary
    if (String(key).match(/^\d+$/)) {
      key = Number(String(key))
      if (object.length < key || (is_unset && object.length === key)) {
        throw error(', out of bounds')
      } else if (is_unset && object.length !== key + 1) {
        throw error(' in the middle of an array')
      } else {
        return true
      }
    } else {
      throw error(' of an array')
    }
  } else {
    // object
    return true
  }
}

// usage: document.set('path.to.something', 'value')
//    or: document.set(['path','to','something'], 'value')
Document.prototype.set = function (path, value) {
  path = arg_to_path(path)

  // updating this._data and check for errors
  if (path.length === 0) {
    if (value === undefined) throw Error("can't remove root document")
    this._data = value
    var new_key = false
  } else {
    var data = this._data

    for (var i = 0; i < path.length - 1; i++) {
      check_if_can_be_placed(path[i], data, false)
      data = data[path[i]]
    }
    if (i === path.length - 1) {
      check_if_can_be_placed(path[i], data, value === undefined)
    }

    var new_key = !(path[i] in data)

    if (value === undefined) {
      if (Array.isArray(data)) {
        data.pop()
      } else {
        delete data[path[i]]
      }
    } else {
      data[path[i]] = value
    }
  }

  // for inserting document
  if (!this._tokens.length)
    this._tokens = [{ raw: '', type: 'literal', stack: [], value: undefined }]

  var position = [
    find_first_non_ws_token(this._tokens, 0, this._tokens.length - 1),
    find_last_non_ws_token(this._tokens, 0, this._tokens.length - 1),
  ]
  for (var i = 0; i < path.length - 1; i++) {
    position = find_element_in_tokenlist(
      path[i],
      i,
      this._tokens,
      position[0],
      position[1],
    )
    if (position == false) throw Error('internal error, please report this')
  }
  // assume that i == path.length-1 here

  if (path.length === 0) {
    var newtokens = value_to_tokenlist(value, path, this._options)
    // all good
  } else if (!new_key) {
    // replace old value with a new one (or deleting something)
    var pos_old = position
    position = find_element_in_tokenlist(
      path[i],
      i,
      this._tokens,
      position[0],
      position[1],
    )

    if (value === undefined && position !== false) {
      // deleting element (position !== false ensures there's something)
      var newtokens = []

      if (!Array.isArray(data)) {
        // removing element from an object, `{x:1, key:CURRENT} -> {x:1}`
        // removing sep, literal and optional sep
        // ':'
        var pos2 = find_last_non_ws_token(
          this._tokens,
          pos_old[0],
          position[0] - 1,
        )
        assert__default['default'].equal(this._tokens[pos2].type, 'separator')
        assert__default['default'].equal(this._tokens[pos2].raw, ':')
        position[0] = pos2

        // key
        var pos2 = find_last_non_ws_token(
          this._tokens,
          pos_old[0],
          position[0] - 1,
        )
        assert__default['default'].equal(this._tokens[pos2].type, 'key')
        assert__default['default'].equal(
          this._tokens[pos2].value,
          path[path.length - 1],
        )
        position[0] = pos2
      }

      // removing comma in arrays and objects
      var pos2 = find_last_non_ws_token(
        this._tokens,
        pos_old[0],
        position[0] - 1,
      )
      assert__default['default'].equal(this._tokens[pos2].type, 'separator')
      if (this._tokens[pos2].raw === ',') {
        position[0] = pos2
      } else {
        // beginning of the array/object, so we should remove trailing comma instead
        pos2 = find_first_non_ws_token(
          this._tokens,
          position[1] + 1,
          pos_old[1],
        )
        assert__default['default'].equal(this._tokens[pos2].type, 'separator')
        if (this._tokens[pos2].raw === ',') {
          position[1] = pos2
        }
      }
    } else {
      var indent =
        pos2 !== false
          ? detect_indent_style(
              this._tokens,
              Array.isArray(data),
              pos_old[0],
              position[1] - 1,
              i,
            )
          : {}
      var newtokens = value_to_tokenlist(
        value,
        path,
        this._options,
        false,
        indent,
      )
    }
  } else {
    // insert new key, that's tricky
    var path_1 = path.slice(0, i)

    //  find a last separator after which we're inserting it
    var pos2 = find_last_non_ws_token(
      this._tokens,
      position[0] + 1,
      position[1] - 1,
    )
    assert__default['default'](pos2 !== false)

    var indent =
      pos2 !== false
        ? detect_indent_style(
            this._tokens,
            Array.isArray(data),
            position[0] + 1,
            pos2,
            i,
          )
        : {}

    var newtokens = value_to_tokenlist(
      value,
      path,
      this._options,
      false,
      indent,
    )

    // adding leading whitespaces according to detected codestyle
    var prefix = []
    if (indent.newline && indent.newline.length)
      prefix = prefix.concat(indent.newline)
    if (indent.prefix && indent.prefix.length)
      prefix = prefix.concat(indent.prefix)

    // adding '"key":' (as in "key":"value") to object values
    if (!Array.isArray(data)) {
      prefix = prefix.concat(
        value_to_tokenlist(path[path.length - 1], path_1, this._options, true),
      )
      if (indent.sep1 && indent.sep1.length) prefix = prefix.concat(indent.sep1)
      prefix.push({ raw: ':', type: 'separator', stack: path_1 })
      if (indent.sep2 && indent.sep2.length) prefix = prefix.concat(indent.sep2)
    }

    newtokens.unshift.apply(newtokens, prefix)

    // check if prev token is a separator AND they're at the same level
    if (
      this._tokens[pos2].type === 'separator' &&
      this._tokens[pos2].stack.length === path.length - 1
    ) {
      // previous token is either , or [ or {
      if (this._tokens[pos2].raw === ',') {
        // restore ending comma
        newtokens.push({ raw: ',', type: 'separator', stack: path_1 })
      }
    } else {
      // previous token isn't a separator, so need to insert one
      newtokens.unshift({ raw: ',', type: 'separator', stack: path_1 })
    }

    if (indent.suffix && indent.suffix.length)
      newtokens.push.apply(newtokens, indent.suffix)

    assert__default['default'].equal(
      this._tokens[position[1]].type,
      'separator',
    )
    position[0] = pos2 + 1
    position[1] = pos2
  }

  newtokens.unshift(position[1] - position[0] + 1)
  newtokens.unshift(position[0])
  this._tokens.splice.apply(this._tokens, newtokens)

  return this
}

// convenience method
Document.prototype.unset = function (path) {
  return this.set(path, undefined)
}

Document.prototype.get = function (path) {
  path = arg_to_path(path)

  var data = this._data
  for (var i = 0; i < path.length; i++) {
    if (!isObject$e(data)) return undefined
    data = data[path[i]]
  }
  return data
}

Document.prototype.has = function (path) {
  path = arg_to_path(path)

  var data = this._data
  for (var i = 0; i < path.length; i++) {
    if (!isObject$e(data)) return false
    data = data[path[i]]
  }
  return data !== undefined
}

// compare old object and new one, and change differences only
Document.prototype.update = function (value) {
  var self = this
  change([], self._data, value)
  return self

  function change(path, old_data, new_data) {
    if (!isObject$e(new_data) || !isObject$e(old_data)) {
      // if source or dest is primitive, just replace
      if (new_data !== old_data) self.set(path, new_data)
    } else if (Array.isArray(new_data) != Array.isArray(old_data)) {
      // old data is an array XOR new data is an array, replace as well
      self.set(path, new_data)
    } else if (Array.isArray(new_data)) {
      // both values are arrays here

      if (new_data.length > old_data.length) {
        // adding new elements, so going forward
        for (var i = 0; i < new_data.length; i++) {
          path.push(String(i))
          change(path, old_data[i], new_data[i])
          path.pop()
        }
      } else {
        // removing something, so going backward
        for (var i = old_data.length - 1; i >= 0; i--) {
          path.push(String(i))
          change(path, old_data[i], new_data[i])
          path.pop()
        }
      }
    } else {
      // both values are objects here
      for (var i in new_data) {
        path.push(String(i))
        change(path, old_data[i], new_data[i])
        path.pop()
      }

      for (var i in old_data) {
        if (i in new_data) continue
        path.push(String(i))
        change(path, old_data[i], new_data[i])
        path.pop()
      }
    }
  }
}

Document.prototype.toString = function () {
  return this._tokens
    .map(function (x) {
      return x.raw
    })
    .join('')
}

var Document_1 = Document

var update = function updateJSON(source, new_value, options) {
  return Document(source, options).update(new_value).toString()
}

var document$1 = {
  Document: Document_1,
  update: update,
}

// this function registers json5 extension, so you
// can do `require("./config.json5")` kind of thing
var register = function () {
  var r = commonjsRequire,
    e = 'extensions'
  r[e]['.json5'] = function (m, f) {
    /*eslint no-sync:0*/
    m.exports = D__git_packageInherit_node_modules_jju.parse(
      fs__default['default'].readFileSync(f, 'utf8'),
    )
  }
}

// this function monkey-patches JSON.parse, so it
// will return an exact position of error in case
// of parse failure
var patch_JSON_parse = function () {
  var _parse = JSON.parse
  JSON.parse = function (text, rev) {
    try {
      return _parse(text, rev)
    } catch (err) {
      // this call should always throw
      D__git_packageInherit_node_modules_jju.parse(text, {
        mode: 'json',
        legacy: true,
        reviver: rev,
        reserved_keys: 'replace',
        null_prototype: false,
      })

      // if it didn't throw, but original parser did,
      // this is an error in this library and should be reported
      throw err
    }
  }
}

// this function is an express/connect middleware
// that accepts uploads in application/json5 format
var middleware = function () {
  return function (req, res, next) {
    throw Error('this function is removed, use express-json5 instead')
  }
}

var utils$6 = {
  register: register,
  patch_JSON_parse: patch_JSON_parse,
  middleware: middleware,
}

var D__git_packageInherit_node_modules_jju = createCommonjsModule(function (
  module,
) {
  module.exports.__defineGetter__('parse', function () {
    return parse_1$2.parse
  })

  module.exports.__defineGetter__('stringify', function () {
    return stringify$3.stringify
  })

  module.exports.__defineGetter__('tokenize', function () {
    return parse_1$2.tokenize
  })

  module.exports.__defineGetter__('update', function () {
    return document$1.update
  })

  module.exports.__defineGetter__('analyze', function () {
    return analyze.analyze
  })

  module.exports.__defineGetter__('utils', function () {
    return utils$6
  })

  /**package
  { "name": "jju",
    "version": "0.0.0",
    "dependencies": {"js-yaml": "*"},
    "scripts": {"postinstall": "js-yaml package.yaml > package.json ; npm install"}
  }
  **/
})

var rushWorkspaces = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const find_up_1 = __importDefault(findUp)
  const path_1 = __importDefault(path__default['default'])
  const jju_1 = __importDefault(D__git_packageInherit_node_modules_jju)
  const fs_1 = __importDefault(fs__default['default'])
  function getRushWorkspaces(cwd) {
    try {
      const rushJsonPath = find_up_1.default.sync('rush.json', { cwd })
      if (!rushJsonPath) {
        return []
      }
      const rushConfig = jju_1.default.parse(
        fs_1.default.readFileSync(rushJsonPath, 'utf-8'),
      )
      const root = path_1.default.dirname(rushJsonPath)
      return rushConfig.projects.map((project) => {
        return {
          name: project.packageName,
          path: path_1.default.join(root, project.projectFolder),
          packageJson: Object.assign(Object.assign({}, project.packageJson), {
            packageJsonPath: path_1.default.join(
              root,
              project.projectFolder,
              'package.json',
            ),
          }),
        }
      })
    } catch (_a) {
      return []
    }
  }
  exports.getRushWorkspaces = getRushWorkspaces
})

var getWorkspaces_1 = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const find_up_1 = __importDefault(findUp)

  const workspaceGetter = {
    yarn: yarnWorkspaces.getYarnWorkspaces,
    pnpm: pnpmWorkspaces.getPnpmWorkspaces,
    rush: rushWorkspaces.getRushWorkspaces,
  }
  const preferred = process.env.PREFERRED_WORKSPACE_MANAGER
  function getWorkspaces(cwd) {
    if (preferred && workspaceGetter[preferred]) {
      return workspaceGetter[preferred](cwd)
    }
    const yarnLockPath = find_up_1.default.sync('yarn.lock', { cwd })
    if (yarnLockPath) {
      return yarnWorkspaces.getYarnWorkspaces(cwd)
    }
    const pnpmLockPath = find_up_1.default.sync('pnpm-workspace.yaml', { cwd })
    if (pnpmLockPath) {
      return pnpmWorkspaces.getPnpmWorkspaces(cwd)
    }
    const rushJsonPath = find_up_1.default.sync('rush.json', { cwd })
    if (rushJsonPath) {
      return rushWorkspaces.getRushWorkspaces(cwd)
    }
    return []
  }
  exports.getWorkspaces = getWorkspaces
})

var workspaces = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', { value: true })

  const cache = new Map()
  /**
   * Get paths to every package.json in the workspace, given a cwd
   * @param cwd
   */
  function getAllPackageJsonFiles(cwd) {
    if (cache.has(cwd)) {
      return cache.get(cwd)
    }
    const workspaces = getWorkspaces_1.getWorkspaces(cwd)
    const packageJsonFiles = workspaces.map(
      (workspace) => workspace.packageJson.packageJsonPath,
    )
    cache.set(cwd, packageJsonFiles)
    return packageJsonFiles
  }
  exports.getAllPackageJsonFiles = getAllPackageJsonFiles
  function _resetCache() {
    cache.clear()
  }
  exports._resetCache = _resetCache
})

var getPackageInfos_1 = createCommonjsModule(function (module, exports) {
  var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule ? mod : { default: mod }
    }
  Object.defineProperty(exports, '__esModule', { value: true })
  const fs_1 = __importDefault(fs__default['default'])

  function getPackageInfos(cwd) {
    const packageJsonFiles = workspaces.getAllPackageJsonFiles(cwd)
    const packageInfos = {}
    if (packageJsonFiles && packageJsonFiles.length > 0) {
      packageJsonFiles.forEach((packageJsonPath) => {
        try {
          const packageJson = JSON.parse(
            fs_1.default.readFileSync(packageJsonPath, 'utf-8'),
          )
          packageInfos[
            packageJson.name
          ] = infoFromPackageJson_1.infoFromPackageJson(
            packageJson,
            packageJsonPath,
          )
        } catch (e) {
          // Pass, the package.json is invalid
          console.warn(
            `Invalid package.json file detected ${packageJsonPath}: `,
            e,
          )
        }
      })
      return packageInfos
    }
    return {}
  }
  exports.getPackageInfos = getPackageInfos
})

const RE_SCOPED = /^(@[^/]+\/[^/@]+)(?:\/([^@]+))?(?:@([\s\S]+))?/
const RE_NORMAL = /^([^/@]+)(?:\/([^@]+))?(?:@([\s\S]+))?/

var D__git_packageInherit_node_modules_parsePackageName = function (input) {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string')
  }

  const matched =
    input.charAt(0) === '@' ? input.match(RE_SCOPED) : input.match(RE_NORMAL)

  if (!matched) {
    throw new Error(`[parse-package-name] "${input}" is not a valid string`)
  }

  return {
    name: matched[1],
    path: matched[2] || '',
    version: matched[3] || '',
  }
}

function generateInheritedPackageJson(cwd) {
  const allPackages = getPackageInfos_1.getPackageInfos(cwd)
  const modifiedPackages = []
  const keys = [
    'devDependencies',
    'peerDependencies',
    'dependencies',
    'scripts',
  ]
  for (const [pkg, info] of Object.entries(allPackages)) {
    // workspace-tools typings are not comprehensive about what is possible, so we force cast it
    if (info.inherits) {
      const inheritSpecifiers = info.inherits
      let mergedInheritInfo = {}
      for (const specifier of inheritSpecifiers) {
        const file = resolveInRepo(pkg, specifier, allPackages)
        if (!file) {
          throw new Error(`${file} does not exist`)
        }
        const inheritInfo = JSON.parse(
          fs__default['default'].readFileSync(file, 'utf-8'),
        )
        // Merge inherit infos for given package together before checking shouldUpdate. This will
        // allows inherit check behavior to be symmetric with update behavior, which updates packages
        // defined in multiple inherit files to their last occurrence.
        for (const key of keys) {
          mergedInheritInfo[key] = {
            ...mergedInheritInfo[key],
            ...inheritInfo[key],
          }
        }
      }
      for (const key of keys) {
        if (shouldUpdate(info[key], mergedInheritInfo[key])) {
          const combined = { ...info[key], ...mergedInheritInfo[key] }
          const sorted = {}
          Object.keys(combined)
            .sort()
            .forEach(function (name) {
              sorted[name] = combined[name]
            })
          info[key] = sorted
          modifiedPackages.push(pkg)
        }
      }
    }
  }
  return { allPackages, modifiedPackages }
}
function resolveInRepo(pkg, specifier, allPackages) {
  const parsedInfo = D__git_packageInherit_node_modules_parsePackageName(
    specifier,
  )
  if (parsedInfo.name === '.') {
    parsedInfo.name = pkg
  }
  const info = allPackages[parsedInfo.name]
  if (info) {
    return path__default['default'].join(
      path__default['default'].dirname(info.packageJsonPath),
      parsedInfo.path,
    )
  }
}
function shouldUpdate(mine, theirs) {
  if (!theirs) {
    return false
  }
  let result = false
  for (const [key, value] of Object.entries(theirs)) {
    if (mine[key] !== value) {
      result = true
    }
  }
  return result
}

function updateCommand(cwd) {
  const updatedInfo = generateInheritedPackageJson(cwd)
  if (updatedInfo.modifiedPackages.length > 0) {
    for (const pkg of updatedInfo.modifiedPackages) {
      const info = updatedInfo.allPackages[pkg]
      const { packageJsonPath, ...output } = info
      const newLine =
        detectNewline_1(
          fs__default['default'].readFileSync(info.packageJsonPath, 'utf-8'),
        ) || os__default['default'].EOL
      fs__default['default'].writeFileSync(
        info.packageJsonPath,
        JSON.stringify(output, null, 2).replace(/\n/g, newLine) + newLine,
      )
    }
    console.log(
      `Updated these packages: ${updatedInfo.modifiedPackages.join(', ')}`,
    )
  } else {
    console.log('Nothing needs to be updated.')
  }
}

function checkCommand(cwd, args) {
  const updatedInfo = generateInheritedPackageJson(cwd)
  if (updatedInfo.modifiedPackages.length > 0) {
    const recoveryCommand = args.recovery || 'package-inherit update'
    console.error(`
The inheritance of package.json is in an inconsistent state. These packages
are inconsistent:

${updatedInfo.modifiedPackages.join(', ')}

Please run the following command:
> ${recoveryCommand}
`)
    process.exit(1)
  }
}

const args = yargsParser(process.argv.slice(2))
const command = args._[0]
switch (command) {
  case 'update':
    updateCommand(process.cwd())
    break
  case 'check':
    checkCommand(process.cwd(), args)
    break
  default:
    console.log(`
Usage: package-inherit [command] [--recovery]

This utility will update package.json in a monorepo to inherit from another package.json template.
Currently, only "scripts", "devDependencies", and "dependencies" are merged into the package.json

Commands:

  update      updates the package.json for all packages in a monorepo to match inheritance
  check       checks all the package.json inheritance are consistent

Options:

  --recovery  custom recovery command to show developers when the check has failed
`)
    break
}
